package com.motivewave.platform.study.chaikin;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Chaikin Volatility Indicator 037 */@StudyHeader(  namespace="com.motivewave",  id="ID_CVI",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_CHAIKIN_VOLATILITY_INDICATOR",  desc="DESC_CVI",  menu="MENU_MARC_CHAIKIN",  helpLink="http://www.motivewave.com/studies/chaikin_volatility_indicator.htm",  label="LBL_CVI",  signals=false,  overlay=false,  studyOverlay=true)public class ChaikinVolatility extends Study{  enum Values { H_L, MA, CVI };  @Override  public void initialize(Defaults defaults)  {    var sd = createSD();    var tab = sd.addTab(get("TAB_GENERAL"));    var grp = tab.addGroup(get("INPUTS"));    grp.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.EMA));    grp.addRow(new IntegerDescriptor(Inputs.PERIOD, get("MA_PERIOD"), 10, 1, 999, 1));    grp.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("ROC_PERIOD"), 12, 1, 999, 1));    grp = tab.addGroup(get("PATH_INDICATOR"));    grp.addRow(new PathDescriptor(Inputs.PATH, get("PATH"), defaults.getLineColor(), 1.0f, null, true, false, true));    grp.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    grp = tab.addGroup(get("GUIDE"));    var mg = new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -999.01, 999.01, .01, true);    mg.setDash(new float[] { 3, 3 });    grp.addRow(mg);    grp = tab.addGroup(get("SHADING"));    grp.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    grp.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("MA_PERIOD"), 10, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("ROC_PERIOD"), 12, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);    var desc = createRD();    desc.setLabelSettings(Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2);    desc.exportValue(new ValueDescriptor(Values.CVI, get("LBL_CVI"), new String[] { Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2 }));    desc.declarePath(Values.CVI, Inputs.PATH);    desc.declareIndicator(Values.CVI, Inputs.IND);    desc.setRangeKeys(Values.CVI);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars(p1 + p2);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period=getSettings().getInteger(Inputs.PERIOD);    int rocPeriod=getSettings().getInteger(Inputs.PERIOD2);    var method=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.EMA);    var series=ctx.getDataSeries();    double high=series.getHigh(index);    double low=series.getLow(index);    series.setDouble(index, Values.H_L, high - low);    if (index < period) return;    Double ma=series.ma(method, index, period, Values.H_L);    if (ma == null) return;    series.setDouble(index, Values.MA, ma);    if (index < period + rocPeriod) return;    Double cvi=series.roc(index, rocPeriod, Values.MA);    if (cvi == null) return;    cvi=cvi * 100;    series.setDouble(index, Values.CVI, cvi);    series.setComplete(index);  }}