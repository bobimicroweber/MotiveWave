package com.motivewave.platform.study.general2;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Sentiment Zone Oscillator 175 */@StudyHeader(  namespace="com.motivewave",  id="ID_SENT_ZONE_OSC",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_STZOSC",  name="NAME_SENTIMENT_ZONE_OSCILLATOR",  desc="DESC_STZOSC",  helpLink="http://www.motivewave.com/studies/sentiment_zone_oscillator.htm",  signals=true,  overlay=false,  studyOverlay=true)public class SentimentZoneOscillator extends Study{  final static String IND3="Ind3";  final static String FACTOR="Factor";  enum Values { R, SZO, OB, OS }  protected enum Signals { SELL, BUY }  double highSell=Double.NEGATIVE_INFINITY;  double lowBuy=Double.MAX_VALUE;  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.TEMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 14, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("LONG_PERIOD"), 30, 1, 999, 1));    inputs.addRow(new DoubleDescriptor(FACTOR, get("%FACTOR"), 95, 0, 100.01, .01));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_STZOSC"), defaults.getLineColor(), 1.0f, null, true, false, true));    var path=new PathDescriptor(Inputs.PATH2, get("OVER_BOUGHT"), defaults.getBlue(), Enums.PointType.DOT, Enums.Size.SMALL, true, true, false);    path.setSupportsMaxPoints(true);    path.setSupportsColorPolicy(false);    settings.addRow(path);    path=new PathDescriptor(Inputs.PATH3, get("OVER_SOLD"), defaults.getGreen(), Enums.PointType.DOT, Enums.Size.SMALL, true, true, false);    path.setSupportsMaxPoints(true);    path.setSupportsColorPolicy(false);    settings.addRow(path);    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("LBL_STZOSC"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("OVER_BOUGHT"), defaults.getBlue(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(IND3, get("OVER_SOLD"), defaults.getGreen(), null, false, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var guides=tab.addGroup(get("GUIDES"));    var topDesc=new GuideDescriptor(Inputs.TOP_GUIDE, get("TOP_GUIDE"), 7, 0, 99, 1, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -99, 99, 1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var bottomDesc=new GuideDescriptor(Inputs.BOTTOM_GUIDE, get("BOTTOM_GUIDE"), -7, 0, -99, 1, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 14, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("LONG_PERIOD"), 30, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(FACTOR, Inputs.PATH, Inputs.PATH2, Inputs.PATH3);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2);    desc.exportValue(new ValueDescriptor(Values.SZO, get("LBL_STZOSC"), new String[] { Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2 }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.SZO, Inputs.PATH);    desc.declarePath(Values.OB, Inputs.PATH2);    desc.declarePath(Values.OS, Inputs.PATH3);    desc.declareIndicator(Values.SZO, Inputs.IND);    desc.declareIndicator(Values.OB, Inputs.IND2);    desc.declareIndicator(Values.OS, IND3);    desc.setRangeKeys(Values.SZO, Values.OB, Values.OS);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars(p1 + p2);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period=getSettings().getInteger(Inputs.PERIOD);    int longPeriod=getSettings().getInteger(Inputs.PERIOD2);    if (index < 1) return;    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var method=getSettings().getMAMethod(Inputs.METHOD);    double fac=getSettings().getDouble(FACTOR);    fac=fac / 100.0;    var series=ctx.getDataSeries();    double r=0, szo=0, lowest=0, highest=0, range=0, ob=0, os=0;    double price=series.getDouble(index, key, 0);    double prevPrice=series.getDouble(index - 1, key, 0);    if (price > prevPrice) r=1;    else r=-1;    series.setDouble(index, Values.R, r);    if (index < (period * 3) + 1) return;    Double sp=series.ma(method, index, period, Values.R);    if (sp == null) return;    szo=100 * sp / period;    series.setDouble(index, Values.SZO, szo);    if (index < (period * 3) + longPeriod + 1) return;    highest=series.highest(index, longPeriod, Values.SZO);    lowest=series.lowest(index, longPeriod, Values.SZO);    range=highest - lowest;    ob=lowest + range * fac;    os=highest - range * fac;    series.setDouble(index, Values.OB, ob);    series.setDouble(index, Values.OS, os);    // Check for signal events    var topGuide=getSettings().getGuide(Inputs.TOP_GUIDE);    double topG=topGuide.getValue();    var bottomGuide=getSettings().getGuide(Inputs.BOTTOM_GUIDE);    double bottG=bottomGuide.getValue();    boolean sell=szo > ob || szo > topG;    boolean buy=szo < os || szo < bottG;    series.setBoolean(index, Signals.BUY, buy);    series.setBoolean(index, Signals.SELL, sell);    if (sell) {      var c=new Coordinate(series.getStartTime(index), szo);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_PRICE_SZO_OB", Util.round(price, 2), Util.round(szo, 2), Util.round(ob, 2));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, price);    }    if (buy) {      var c=new Coordinate(series.getStartTime(index), szo);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_PRICE_SZO_OS", Util.round(price, 2), Util.round(szo, 2), Util.round(os, 2));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, price);    }    series.setComplete(index);  }}