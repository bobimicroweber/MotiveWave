package com.motivewave.platform.study.general2;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Fisher Transform Stochastic Oscillator 177 */@StudyHeader(  namespace="com.motivewave",  id="ID_FISH_TRANS_STOCH_OSC",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_FTSO",  name="NAME_FISHER_TRANSFORM_STOCHASTIC_OSCILLATOR",  desc="DESC_FISH_TRANS_STOCH_OSC",  menu="MENU_OSCILLATORS",  helpLink="http://www.motivewave.com/studies/fisher_transform_stochastic_oscillator.htm",  signals=true,  overlay=false,  studyOverlay=true)public class FishTranStochOsc extends Study{  final static String HIGH_LOW="HighLow";  enum Values { MA1, MA2, MA3, MA4, MA5, MA6, MA7, MA8, MA9, RBW, NUM, DEN, RBWS, FTSO }  protected enum Signals { SELL, BUY }  double highSell=Double.NEGATIVE_INFINITY;  double lowBuy=Double.MAX_VALUE;  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.WMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("AVERAGE_PERIOD"), 2, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("STOCHASTIC_PERIOD"), 30, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD3, get("SMOOTH_PERIOD"), 5, 1, 999, 1));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("FTSO"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("RBWS"), defaults.getRed(), 1.0f, null, true, false, true));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("DS"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("SDS"), defaults.getRed(), null, false, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var guides=tab.addGroup(get("GUIDES"));    var topDesc=new GuideDescriptor(Inputs.TOP_GUIDE, get("TOP_GUIDE"), 80, 0, 999.1, .1, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 50, 0, 999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var bottomDesc=new GuideDescriptor(Inputs.BOTTOM_GUIDE, get("BOTTOM_GUIDE"), 20, 0, 999.1, .1, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD1"), 32, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("PERIOD2"), 5, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD3, get("SIGNAL_PERIOD"), 5, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.PATH2, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3);    desc.exportValue(new ValueDescriptor(Values.FTSO, get("LBL_FTS"), new String[] { Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3 }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.FTSO, Inputs.PATH);    desc.declarePath(Values.RBWS, Inputs.PATH2);    desc.declareIndicator(Values.FTSO, Inputs.IND);    desc.declareIndicator(Values.RBWS, Inputs.IND2);    desc.setRangeKeys(Values.FTSO, Values.RBWS);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    int p3=getSettings().getInteger(Inputs.PERIOD3);    setMinBars((p1 * 10) + p2 + p3);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int maP=getSettings().getInteger(Inputs.PERIOD);    if (index < maP) return;    int stochP=getSettings().getInteger(Inputs.PERIOD2);    int smP=getSettings().getInteger(Inputs.PERIOD3);    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var method=getSettings().getMAMethod(Inputs.METHOD);    var series=ctx.getDataSeries();    Double ma1=series.ma(method, index, maP, key);    if (ma1 == null) return;    double rbw=ma1 * 5;    series.setDouble(index, Values.MA1, ma1);    if (index < maP * 2) return;    Double ma2=series.ma(method, index, maP, Values.MA1);    if (ma2 == null) return;    rbw=rbw + ma2 * 4;    series.setDouble(index, Values.MA2, ma2);    if (index < maP * 3) return;    Double ma3=series.ma(method, index, maP, Values.MA2);    if (ma3 == null) return;    rbw=rbw + ma3 * 3;    series.setDouble(index, Values.MA3, ma2);    if (index < maP * 4) return;    Double ma4=series.ma(method, index, maP, Values.MA3);    if (ma4 == null) return;    rbw=rbw + ma4 * 2;    series.setDouble(index, Values.MA4, ma4);    if (index < maP * 5) return;    Double ma5=series.ma(method, index, maP, Values.MA4);    if (ma5 == null) return;    rbw=rbw + ma5;    series.setDouble(index, Values.MA5, ma5);    if (index < maP * 6) return;    Double ma6=series.ma(method, index, maP, Values.MA5);    if (ma6 == null) return;    rbw=rbw + ma6;    series.setDouble(index, Values.MA6, ma6);    if (index < maP * 7) return;    Double ma7=series.ma(method, index, maP, Values.MA6);    if (ma7 == null) return;    rbw=rbw + ma7;    series.setDouble(index, Values.MA7, ma7);    if (index < maP * 8) return;    Double ma8=series.ma(method, index, maP, Values.MA7);    if (ma8 == null) return;    rbw=rbw + ma8;    series.setDouble(index, Values.MA8, ma8);    if (index < maP * 9) return;    Double ma9=series.ma(method, index, maP, Values.MA8);    if (ma9 == null) return;    rbw=rbw + ma9;    series.setDouble(index, Values.MA9, ma9);    if (index < maP * 10) return;    Double ma10=series.ma(method, index, maP, Values.MA9);    if (ma10 == null) return;    rbw=(rbw + ma10) / 20;    series.setDouble(index, Values.RBW, rbw);    if (index < (maP * 10) + stochP) return;    double lowest=series.lowest(index, stochP, Values.RBW);    double highest=series.highest(index, stochP, Values.RBW);    double num=rbw - lowest;    double den=highest - lowest;    series.setDouble(index, Values.NUM, num);    series.setDouble(index, Values.DEN, den);    if (index < (maP * 10) + stochP + smP) return;    num=series.sum(index, smP, Values.NUM);    den=series.sum(index, smP, Values.DEN);    double rbws=(num / (den + .0001)) * 100.0;    double x=0.1 * (rbws - 50);    double ftso=((Math.exp(2 * x) - 1) / (Math.exp(2 * x) + 1) + 1) * 50;    series.setDouble(index, Values.RBWS, rbws);    series.setDouble(index, Values.FTSO, ftso);    // Check for signal events    var topGuide=getSettings().getGuide(Inputs.TOP_GUIDE);    double topG=topGuide.getValue();    var bottomGuide=getSettings().getGuide(Inputs.BOTTOM_GUIDE);    double bottG=bottomGuide.getValue();    double price=series.getDouble(index, key, 0);    double prevFtso=series.getDouble(index - 1, Values.FTSO, 0);    boolean sell=prevFtso < topG && ftso > topG;    boolean buy=prevFtso > bottG && ftso < bottG;    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      var c=new Coordinate(series.getStartTime(index), ftso);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_PRICE_FTSO", Util.round(price, 2), Util.round(ftso, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, price);    }    if (buy) {      var c=new Coordinate(series.getStartTime(index), ftso);      var marker=getSettings().getMarker(Inputs.UP_MARKER);       String msg = get("BUY_PRICE_FTSO", Util.round(price, 2), Util.round(ftso, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, price);    }    series.setComplete(index);  }}