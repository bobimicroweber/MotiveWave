package com.motivewave.platform.study.general2;import java.awt.Color;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.ColorDescriptor;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Technical Rank 134 */@StudyHeader(  namespace="com.motivewave",  id="ID_TRANK",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_TRANK",  name="NAME_TECHNICAL_RANK",  desc="DESC_TRANK",  helpLink="http://www.motivewave.com/studies/technical_rank.htm",  signals=false,  overlay=false,  studyOverlay=true)public class TechnicalRank extends Study{  final static String PERIOD5="Period5";  final static String PERIOD6="Period6";  final static String PERIOD7="Period7";  final static String PERIOD8="Period8";  final static String PERIOD9="Period9";  enum Values { PPO_HIST, TR, UP, DOWN }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("LONG_TERM_SMA_PERIOD1"), 200, 1, 9999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("LONG_TERM_ROC_PERIOD2"), 125, 1, 9999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD3, get("MID_TERM_SMA_PERIOD3"), 50, 1, 9999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD4, get("MID_TERM_ROC_PERIOD4"), 20, 1, 9999, 1));    inputs.addRow(new IntegerDescriptor(PERIOD5, get("SHORT_TERM_PPOH_MA5_PERIOD5"), 12, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(PERIOD6, get("SHORT_TERM_PPOH_MA6_PERIOD6"), 26, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(PERIOD7, get("SHORT_TERM_PPOH_SIG_PERIOD7"), 9, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(PERIOD8, get("SHORT_TERM_PPOH_SLOPE_PERIOD8"), 3, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(PERIOD9, get("SHORT_TERM_RSI_PERIOD9"), 14, 1, 999, 1));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("RSI_METHOD"), Enums.MAMethod.EMA));    tab=sd.addTab(get("TAB_DISPLAY"));    var settings=tab.addGroup(get("COLORS"));    settings.addRow(new ColorDescriptor(Inputs.TOP_COLOR, get("TOP_COLOR"), defaults.getGreen()));    settings.addRow(new ColorDescriptor(Inputs.NEUTRAL_COLOR, get("MID_COLOR"), defaults.getBlue()));    settings.addRow(new ColorDescriptor(Inputs.BOTTOM_COLOR, get("BOTTOM_COLOR"), defaults.getRed()));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    var guides=tab.addGroup(get("GUIDE"));    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 50, -99.1, 99.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD, Inputs.TOP_COLOR, Inputs.NEUTRAL_COLOR, Inputs.BOTTOM_COLOR);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3, Inputs.PERIOD4, PERIOD5, PERIOD6, PERIOD7, PERIOD8, PERIOD9, Inputs.METHOD);    desc.exportValue(new ValueDescriptor(Values.TR, get("LBL_TRANK"), new String[] { Inputs.INPUT, Inputs.PERIOD,        Inputs.PERIOD2, Inputs.PERIOD3, Inputs.PERIOD4, PERIOD5, PERIOD6, PERIOD7, PERIOD8, PERIOD9 }));    desc.declareBars(Values.TR);    desc.declareIndicator(Values.TR, Inputs.IND);    desc.setRangeKeys(Values.TR);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    int p3=getSettings().getInteger(Inputs.PERIOD3);    int p4=getSettings().getInteger(Inputs.PERIOD4);    int p5=getSettings().getInteger(PERIOD5);    int p6=getSettings().getInteger(PERIOD6);    int p7=getSettings().getInteger(PERIOD7);    int p8=getSettings().getInteger(PERIOD8);    int p9=getSettings().getInteger(PERIOD9);    setMinBars(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(p1, p2), p3), p4), p5), p6), p7), p8), p9));  }  @Override  protected void calculate(int index, DataContext ctx)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    int p3=getSettings().getInteger(Inputs.PERIOD3);    int p4=getSettings().getInteger(Inputs.PERIOD4);    int p5=getSettings().getInteger(PERIOD5);    int p6=getSettings().getInteger(PERIOD6);    int p7=getSettings().getInteger(PERIOD7);    int p8=getSettings().getInteger(PERIOD8);    int p9=getSettings().getInteger(PERIOD9);    int lp=Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(p1, p2), p3), p4), p5), p6), p7), p8), p9);    if (index < lp) return;    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var method=getSettings().getMAMethod(Inputs.METHOD);    var series=ctx.getDataSeries();    double price=series.getDouble(index, key, 0);    double ma1=series.sma(index, p1, key);    double ltMa=.3 * 100 * (price - ma1) / ma1;    double ltRoc=.3 * 100 * series.roc(index, p2, key);    double ma2=series.sma(index, p3, key);    double mtMa=.15 * 100 * (price - ma2) / ma2;    double mtRoc=.15 * 100 * series.roc(index, p4, key);    Double ma5=series.ma(Enums.MAMethod.EMA, index, p5, key);    if (ma5 == null) return;    Double ma6=series.ma(Enums.MAMethod.EMA, index, p6, key);    if (ma6 == null) return;    double ppo=100.0 * (ma5 - ma6) / ma6;    Double sig=series.ma(Enums.MAMethod.EMA, index, p7, key);    if (sig == null) return;    double ppoHist=ppo - sig;    series.setDouble(index, Values.PPO_HIST, ppoHist);    if (index < lp + p8) return;    double value=series.getDouble(index, Values.PPO_HIST, 0);    double priorV=series.getDouble(index - p8, Values.PPO_HIST, 0);    double slope=(value - priorV) / p8; // rise over run - slope of ppoHistogram    double stPpo=.05 * 100 * slope;    double diff=series.getDouble(index, key) - series.getDouble(index - 1, key);    double up=0, down=0;    if (diff > 0) up=diff;    else down=diff;    series.setDouble(index, Values.UP, up);    series.setDouble(index, Values.DOWN, Math.abs(down));    if (index < p9 + lp + p8) return;    Double avgUp=series.ma(method, index, p9, Values.UP);    if (avgUp == null) return;    Double avgDown=series.ma(method, index, p9, Values.DOWN);    if (avgDown == null) return;    double rs=avgUp / avgDown;    double rsi=100.0 - (100.0 / (1.0 + rs));    double stRsi=.05 * rsi;    double tr=ltMa + ltRoc + mtMa + mtRoc + stPpo + stRsi;    tr=Util.round(tr, 2);    if (tr < 0) tr=0;    if (tr > 100) tr=100;    series.setDouble(index, Values.TR, tr);    var midGuide=getSettings().getGuide(Inputs.MIDDLE_GUIDE);    double midG=midGuide.getValue();    Color bottC=getSettings().getColor(Inputs.BOTTOM_COLOR);    Color midC=getSettings().getColor(Inputs.NEUTRAL_COLOR);    Color topC=getSettings().getColor(Inputs.TOP_COLOR);    series.setBarColor(index, Values.TR, bottC);    if (tr > midG * .5) series.setBarColor(index, Values.TR, midC);    if (tr > midG) series.setBarColor(index, Values.TR, topC);    series.setComplete(index);  }}