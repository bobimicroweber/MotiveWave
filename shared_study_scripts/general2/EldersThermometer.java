package com.motivewave.platform.study.general2;import java.awt.Color;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.ColorDescriptor;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Elders Thermometer 160 */@StudyHeader(  namespace="com.motivewave",  id="ID_ERTHER",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_ETHER",  name="NAME_ELDERS_THERMOMETER",  desc="DESC_ERTHER",  menu="MENU_ALEXANDER_ELDER",  helpLink="http://www.motivewave.com/studies/elders_thermometer.htm",  signals=true,  overlay=false,  studyOverlay=true)public class EldersThermometer extends Study{  final static String BUY_FAC="BuyFac", SELL_FAC="SellFac", BUY_MARKER="BuyMarker", SELL_MARKER="SellMarker";  enum Values { THER, MA }  protected enum Signals { SELL, BUY }  double highSell=Double.NEGATIVE_INFINITY;  double lowBuy=Double.MAX_VALUE;  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.EMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 22, 1, 9999, 1));    inputs.addRow(new DoubleDescriptor(SELL_FAC, get("SELL_FACTOR"), 2, 1, 9.01, .01));    inputs.addRow(new DoubleDescriptor(BUY_FAC, get("BUY_FACTOR"), .5, .01, 1, .01));    var settings=tab.addGroup(get("COLORS"));    settings.addRow(new ColorDescriptor(Inputs.UP_COLOR, get("BUY_COLOR"), defaults.getGreen()));    settings.addRow(new ColorDescriptor(Inputs.NEUTRAL_COLOR, get("LBL_NEUTRAL_COLOR"), defaults.getBarColor()));    settings.addRow(new ColorDescriptor(Inputs.DOWN_COLOR, get("SELL_COLOR"), defaults.getRed()));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("MA_PATH"), defaults.getRed(), 1.0f, null, true, false, true));    tab=sd.addTab(get("TAB_DISPLAY"));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("LBL_ETHER"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("MA"), defaults.getRed(), null, false, true, true));    var guides=tab.addGroup(get("GUIDE"));    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -9.1, 9.1, .01, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(BUY_MARKER, get("BUY_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(SELL_MARKER, get("SELL_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 22, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(SELL_FAC, BUY_FAC, Inputs.UP_COLOR, Inputs.NEUTRAL_COLOR, Inputs.DOWN_COLOR, Inputs.PATH2);    var desc=createRD();    desc.setLabelSettings(Inputs.METHOD, Inputs.PERIOD, SELL_FAC, BUY_FAC);    desc.exportValue(new ValueDescriptor(Values.MA, get("LBL_ETHER"), new String[] { Inputs.METHOD, Inputs.PERIOD, SELL_FAC, BUY_FAC }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declareBars(Values.THER);    desc.declarePath(Values.MA, Inputs.PATH2);    desc.declareIndicator(Values.THER, Inputs.IND);    desc.declareIndicator(Values.MA, Inputs.IND2);    desc.setRangeKeys(Values.THER, Values.MA);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1 + 2);  }  @Override  protected void calculate(int index, DataContext ctx)  {    if (index < 1) return;    int period=getSettings().getInteger(Inputs.PERIOD);    var method=getSettings().getMAMethod(Inputs.METHOD);    double sellFac=getSettings().getDouble(SELL_FAC);    double buyFac=getSettings().getDouble(BUY_FAC);    var series=ctx.getDataSeries();    double low=series.getDouble(index, Enums.BarInput.LOW, 0);    double high=series.getDouble(index, Enums.BarInput.HIGH, 0);    double prevL=series.getDouble(index - 1, Enums.BarInput.LOW, 0);    double prevH=series.getDouble(index - 1, Enums.BarInput.HIGH, 0);    double therL=Math.abs(prevL - low);    double therH=Math.abs(high - prevH);    double ther=therL;    if (therH > therL) ther=therH;    series.setDouble(index, Values.THER, ther);    if (index < period + 1) return;    Double ma=series.ma(method, index, period, Values.THER);    if (ma == null) return;    series.setDouble(index, Values.MA, ma);    series.setComplete(index);    if (index < period + 2) return;    // Check for signal events    // double prevT = series.getDouble(index-1, Values.THER, ther);    // double prevM = series.getDouble(index-1, Values.MA, ma);    // double sellOrder = ma + prevH;    // double coverOrder = prevL - ma;    boolean sell=ther > ma * sellFac;    boolean buy=ther < ma * buyFac;    series.setBoolean(index, Signals.BUY, buy);    series.setBoolean(index, Signals.SELL, sell);    Color buyC=getSettings().getColor(Inputs.UP_COLOR);    Color nC=getSettings().getColor(Inputs.NEUTRAL_COLOR);    Color sellC=getSettings().getColor(Inputs.DOWN_COLOR);    series.setBarColor(index, Values.THER, nC);    if (buy) series.setBarColor(index, Values.THER, buyC);    if (sell) series.setBarColor(index, Values.THER, sellC);    if (sell) {      highSell=ther;      lowBuy=Double.MAX_VALUE;      var c=new Coordinate(series.getStartTime(index), ther);      var marker=getSettings().getMarker(SELL_MARKER);      String msg = get("SELL_HIGH_THER", Util.round(high, 2), Util.round(ther, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, high);    }    if (buy) {      lowBuy=ther;      highSell=Double.NEGATIVE_INFINITY;      var c=new Coordinate(series.getStartTime(index), ther);      var marker=getSettings().getMarker(BUY_MARKER);      String msg = get("BUY_LOW_THER", Util.round(low, 2), Util.round(ther, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.BUY, msg, low);    }  }}