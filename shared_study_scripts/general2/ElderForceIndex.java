package com.motivewave.platform.study.general2;import java.awt.Color;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.ColorDescriptor;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Elders Force Index 161 */@StudyHeader(  namespace="com.motivewave",  id="ID_EFORCE",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_EFORCE",  name="NAME_ELDERS_FORCE_INDEX",  desc="DESC_EFORCE",  menu="MENU_ALEXANDER_ELDER",  helpLink="http://www.motivewave.com/studies/elders_force_index.htm",  signals=true,  overlay=false,  studyOverlay=true)public class ElderForceIndex extends Study{  final static String BUY_COLOR="BuyColor";  final static String SELL_COLOR="SellColor";  enum Values { RAW_FORCE, FORCE, MA }  protected enum Signals { SELL, BUY }  double highSell=Double.NEGATIVE_INFINITY;  double lowBuy=Double.MAX_VALUE;  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.EMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD1"), 2, 1, 9999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("PERIOD2"), 13, 1, 9999, 1));    var settings=tab.addGroup(get("COLORS"));    settings.addRow(new ColorDescriptor(Inputs.UP_COLOR, get("LBL_UP_COLOR"), defaults.getTopFillColor()));    settings.addRow(new ColorDescriptor(Inputs.DOWN_COLOR, get("LBL_DOWN_COLOR"), defaults.getBottomFillColor()));    settings.addRow(new ColorDescriptor(BUY_COLOR, get("BUY_COLOR"), defaults.getGreen()));    settings.addRow(new ColorDescriptor(SELL_COLOR, get("SELL_COLOR"), defaults.getRed()));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("MA_PATH"), defaults.getRed(), 1.0f, null, true, false, true));    tab=sd.addTab(get("TAB_DISPLAY"));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("FORCE"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("MA"), defaults.getRed(), null, false, true, true));    var guides=tab.addGroup(get("GUIDE"));    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -9.1, 9.1, .01, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD1"), 2, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("PERIOD2"), 13, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH2, Inputs.UP_COLOR, Inputs.DOWN_COLOR);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2);    desc.exportValue(new ValueDescriptor(Values.MA, get("LBL_EREMA"), new String[] { Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2 }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declareBars(Values.FORCE);    desc.declarePath(Values.MA, Inputs.PATH2);    desc.declareIndicator(Values.FORCE, Inputs.IND);    desc.declareIndicator(Values.MA, Inputs.IND2);    desc.setRangeKeys(Values.FORCE, Values.MA);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars(Math.max(p1, p2) + 1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    if (index < 1) return;    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    var method=getSettings().getMAMethod(Inputs.METHOD);    var series=ctx.getDataSeries();    double price=series.getDouble(index, key, 0);    double prevP=series.getDouble(index - 1, key, 0);    long vol=series.getVolume(index);    double rawForce=vol * (price - prevP);    series.setDouble(index, Values.RAW_FORCE, rawForce);    if (index < Math.max(p1, p2) + 1) return;    Double force=series.ma(method, index, p1, Values.RAW_FORCE);    Double ma=series.ma(method, index, p2, Values.RAW_FORCE);    series.setDouble(index, Values.FORCE, force);    series.setDouble(index, Values.MA, ma);    var midGuide=getSettings().getGuide(Inputs.MIDDLE_GUIDE);    double midG=midGuide.getValue();    // Color upC = getSettings().getColor(Inputs.UP_COLOR);    // Color dnC = getSettings().getColor(Inputs.DOWN_COLOR);    // if (force > midG) series.setBarColor(index, Values.FORCE, upC);    // else series.setBarColor(index, Values.FORCE, dnC);    series.setComplete(index);    // Check for signal events    double prevMa=series.getDouble(index - 1, Values.MA, ma);    boolean sell=force > midG && ma < prevMa && price > highSell;    boolean buy=force < midG && ma > prevMa && price < lowBuy;    series.setBoolean(index, Signals.BUY, buy);    series.setBoolean(index, Signals.SELL, sell);    Color upC=getSettings().getColor(Inputs.UP_COLOR);    Color dnC=getSettings().getColor(Inputs.DOWN_COLOR);    Color buyC=getSettings().getColor(BUY_COLOR);    Color sellC=getSettings().getColor(SELL_COLOR);    if (force > midG) series.setBarColor(index, Values.FORCE, upC);    else series.setBarColor(index, Values.FORCE, dnC);    if (buy) series.setBarColor(index, Values.FORCE, buyC);    if (sell) series.setBarColor(index, Values.FORCE, sellC);    if (sell) {      highSell=price;      lowBuy=Double.MAX_VALUE;      var c=new Coordinate(series.getStartTime(index), force);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER); // set default colour to getRed() in initialize above      String msg = get("SELL_PRICE_FORCE", Util.round(price, 2), Util.round(force, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, price);    }    if (buy) {      lowBuy=price;      highSell=Double.NEGATIVE_INFINITY;      var c=new Coordinate(series.getStartTime(index), force);      var marker=getSettings().getMarker(Inputs.UP_MARKER); // set default colour to getGreen() in initialize above      String msg = get("BUY_LOW_FORCE", Util.round(price, 2), Util.round(force, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, price);    }  }}