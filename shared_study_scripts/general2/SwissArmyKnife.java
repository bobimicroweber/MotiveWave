package com.motivewave.platform.study.general2;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Swiss Army Knife Indicator John F. Ehlers 136 */@StudyHeader(  namespace="com.motivewave",  id="ID_SWAKI",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_SWAKI",  name="NAME_SWISS_ARMY_KNIFE",  desc="DESC_SWAKI",  menu="MENU_JOHN_EHLERS",  helpLink="http://www.motivewave.com/studies/swiss_army_knife_indicator.htm",  signals=false,  overlay=false,  studyOverlay=true)public class SwissArmyKnife extends Study{  final static String[] TYPE= { "E-EMA", "E-SMA", "GAUSS", "BUTTER", "SMOOTH", "HP", "2PHP", "BP", "BS" };  final static String DELTA1="Delta1";  enum Values { FILT }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.MIDPOINT));    inputs.addRow(new InputDescriptor(Inputs.INPUT2, get("TYPE"), TYPE, TYPE[0]));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 20, 1, 9999, 1));    inputs.addRow(new DoubleDescriptor(DELTA1, get("DELTA1"), .1, 0, 99.01, .01));    var settings=tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_SWAKI"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var guides=tab.addGroup(get("GUIDE"));    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -999.1, 999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.INPUT2);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 20, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(DELTA1, Inputs.PATH, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);        var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.INPUT2, Inputs.PERIOD, DELTA1);    desc.exportValue(new ValueDescriptor(Values.FILT, get("LBL_SWAKI"), new String[] { Inputs.INPUT, Inputs.INPUT2, Inputs.PERIOD, DELTA1 }));    desc.declarePath(Values.FILT, Inputs.PATH);    desc.declareIndicator(Values.FILT, Inputs.IND);    desc.setRangeKeys(Values.FILT);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1 + 2);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period=getSettings().getInteger(Inputs.PERIOD);    if (index < period) return;    String type=(String) getSettings().getInput(Inputs.INPUT2, TYPE[1]);    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.MIDPOINT);    double delta1=getSettings().getDouble(DELTA1);    var series=ctx.getDataSeries();    double c0=1.0, c1=0.0, b0=1.0, b1=0.0, b2=0.0, a1=0.0, a2=0.0, alpha=0.0, beta1=0.0, gamma1=0.0;    int n=0;    double price=series.getDouble(index, key, 0);    if (type == "E-SMA") n=period;    if (index < period + 2) {      series.setDouble(index, Values.FILT, price);      series.setComplete(index);      return;    }    double prevP1=series.getDouble(index - 1, key, 0);    double prevP2=series.getDouble(index - 2, key, 0);    double priorP=series.getDouble(index - n, key, 0);    double prevFilt1=series.getDouble(index - 1, Values.FILT, price);    double prevFilt2=series.getDouble(index - 2, Values.FILT, price);    double filt=0.0;    double twoPiPrd=(2.0 * Math.PI) / period;    if (type == "E-EMA") {      alpha=(Math.cos(twoPiPrd) + Math.sin(twoPiPrd) - 1) / Math.cos(twoPiPrd);      b0=alpha;      a1=1 - alpha;    }    if (type == "E-SMA") {      c1=1.0 / n;      b0=1.0 / n;      a1=1.0;    }    if (type == "GAUSS") {      beta1=2.451 * (1 - Math.cos(twoPiPrd));      alpha=-beta1 + Math.sqrt(beta1 * beta1 + 2 * beta1);      c0=alpha * alpha;      a1=2 * (1 - alpha);      a2=-(1 - alpha) * (1 - alpha);    }    if (type == "BUTTER") {      beta1=2.451 * (1 - Math.cos(twoPiPrd));      alpha=-beta1 + Math.sqrt(beta1 * beta1 + 2 * beta1);      c0=alpha * alpha / 4.0;      b1=2.0;      b2=1.0;      a1=2 * (1 - alpha);      a2=-(1 - alpha) * (1 - alpha);    }    if (type == "SMOOTH") {      c0=1.0 / 4.0;      b1=2.0;      b2=1.0;    }    if (type == "HP") {      alpha=(Math.cos(twoPiPrd) + Math.sin(twoPiPrd) - 1) / Math.cos(twoPiPrd);      c0=1 - alpha / 2.0;      b1=-1.0;      a1=1 - alpha;    }    if (type == "2PHP") {      beta1=2.451 * (1 - Math.cos(twoPiPrd));      alpha=-beta1 + Math.sqrt(beta1 * beta1 + 2 * beta1);      c0=(1 - alpha / 2.0) * (1 - alpha / 2.0);      b1=-2.0;      b2=1.0;      a1=2 * (1 - alpha);      a2=-(1 - alpha) * (1 - alpha);    }    if (type == "BP") {      beta1=Math.cos(twoPiPrd);      gamma1=1 / Math.cos(720 * delta1 / period);      alpha=gamma1 + Math.sqrt(gamma1 * gamma1 - 1);      c0=(1 - alpha) / 2.0;      b2=-1.0;      a1=beta1 * (1 + alpha);      a2=-alpha;    }    if (type == "BS") {      beta1=Math.cos(twoPiPrd);      gamma1=1 / Math.cos(720 * delta1 / period);      alpha=gamma1 - Math.sqrt(gamma1 * gamma1 - 1);      c0=(1 + alpha) / 2.0;      b1=-2 * beta1;      b2=1.0;      a1=beta1 * (1 + alpha);      a2=-alpha;    }    filt=c0 * ((b0 * price) + (b1 * prevP1) + (b2 * prevP2) + (a1 * prevFilt1) + (a2 * prevFilt2) - (c1 * priorP));    series.setDouble(index, Values.FILT, filt);    series.setComplete(index);  }}