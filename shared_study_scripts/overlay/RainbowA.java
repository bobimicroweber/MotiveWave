package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** RainbowA 074 */@StudyHeader(  namespace="com.motivewave",  id="ID_RBA",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_RAINBOW_A",  label="LBL_RBA",  desc="DESC_RBA",  helpLink="http://www.motivewave.com/studies/rainbow_a.htm",  requiresVolume=false,  signals=false,  overlay=true,  studyOverlay=true)public class RainbowA extends Study{  final static String PATH5="Path5", PATH6="Path6", PATH7="Path7", PATH8="Path8", PATH9="Path9", PATH10="Path10";  enum Values { AVG1, AVG2, AVG3, AVG4, AVG5, AVG6, AVG7, AVG8, AVG9, AVG10 }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.SMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 2, 1, 999, 1));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(PATH10, get("AVG10"), defaults.getBlue(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(PATH9, get("AVG9"), defaults.getRed(), 1.0f, null, true, true, true));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("AVG10"), defaults.getBlue(), null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 2, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(PATH10, PATH9);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD);    desc.exportValue(new ValueDescriptor(Values.AVG10, get("AVG10"), new String[] { Inputs.METHOD, Inputs.PERIOD }));    desc.exportValue(new ValueDescriptor(Values.AVG9, get("AVG9"), new String[] { Inputs.METHOD, Inputs.PERIOD2 }));    desc.declarePath(Values.AVG10, PATH10);    desc.declarePath(Values.AVG9, PATH9);    desc.declareIndicator(Values.AVG10, Inputs.IND);    desc.setRangeKeys(Values.AVG10, Values.AVG9);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1 * 10);  }  @Override  protected void calculate(int index, DataContext ctx)  {    var method=getSettings().getMAMethod(Inputs.METHOD);    Object input=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    int period=getSettings().getInteger(Inputs.PERIOD);    if (index < period) return;    var series=ctx.getDataSeries();    Double avg1=series.ma(method, index, period, input);    series.setDouble(index, Values.AVG1, avg1);    if (index < period * 2) return;    Double avg2=series.ma(method, index, period, Values.AVG1);    series.setDouble(index, Values.AVG2, avg2);    if (index < period * 3) return;    Double avg3=series.ma(method, index, period, Values.AVG2);    series.setDouble(index, Values.AVG3, avg3);    if (index < period * 4) return;    Double avg4=series.ma(method, index, period, Values.AVG3);    series.setDouble(index, Values.AVG4, avg4);    if (index < period * 5) return;    Double avg5=series.ma(method, index, period, Values.AVG4);    series.setDouble(index, Values.AVG5, avg5);    if (index < period * 6) return;    Double avg6=series.ma(method, index, period, Values.AVG5);    series.setDouble(index, Values.AVG6, avg6);    if (index < period * 7) return;    Double avg7=series.ma(method, index, period, Values.AVG6);    series.setDouble(index, Values.AVG7, avg7);    if (index < period * 8) return;    Double avg8=series.ma(method, index, period, Values.AVG7);    series.setDouble(index, Values.AVG8, avg8);    if (index < period * 9) return;    Double avg9=series.ma(method, index, period, Values.AVG8);    series.setDouble(index, Values.AVG9, avg9);    if (index < period * 10) return;    Double avg10=series.ma(method, index, period, Values.AVG9);    series.setDouble(index, Values.AVG10, avg10);    series.setComplete(index);  }}