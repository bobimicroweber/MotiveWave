package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Mass Index Trend used in Mass Index strategy 113*/@StudyHeader(    namespace = "com.motivewave",    id = "ID_MSSIT",    rb = "com.motivewave.platform.study.nls.strings2",    label="LBL_MSSIT",    name = "NAME_MASS_INDEX_TREND",    desc = "DESC_MSSIT",    menu = "MENU_OSCILLATORS",    helpLink = "http://www.motivewave.com/studies/mass_index_trend.htm",     signals = false,    overlay = true,    studyOverlay = true)public class MassIndexTrend extends Study{  enum Values { TREND }  @Override  public void initialize(Defaults defaults)   {    var sd = createSD();    var tab = sd.addTab(get("TAB_GENERAL"));    var inputs = tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("TREND_INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD2, get("TREND_METHOD"), Enums.MAMethod.EMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD4, get("TREND_PERIOD"), 9, 1, 999, 1));    var settings = tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_MSSI"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD2);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD4, get("TREND_PERIOD"), 9, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH);    var desc = createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD2, Inputs.PERIOD4);    desc.exportValue(new ValueDescriptor(Values.TREND, get("LBL_MASSIT"), new String[] {Inputs.INPUT, Inputs.METHOD2, Inputs.PERIOD4}));    desc.declarePath(Values.TREND, Inputs.PATH);    desc.setMinTick(0.1);    desc.declareIndicator(Values.TREND, Inputs.IND);    desc.setRangeKeys(Values.TREND);  }  @Override  public void onLoad(Defaults defaults)  {    int p4 = getSettings().getInteger(Inputs.PERIOD4);    setMinBars(p4);  }    @Override  public void calculate(int index, DataContext ctx)   {    int trendP = getSettings().getInteger(Inputs.PERIOD4);    if (index < trendP) return;        Object key = getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var trendM = getSettings().getMAMethod(Inputs.METHOD2, Enums.MAMethod.EMA);    var series = ctx.getDataSeries();    Double trend = series.ma(trendM, index, trendP, key);    series.setDouble(index, Values.TREND, trend);    series.setComplete(index);  }}