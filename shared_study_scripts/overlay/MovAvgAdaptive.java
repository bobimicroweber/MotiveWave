package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;import com.motivewave.platform.study.general.Utility;/** Moving Average Adaptive 069 */@StudyHeader(  namespace="com.motivewave",  id="ID_MAA",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_MOVING_AVERAGE_ADAPTIVE",  label="LBL_MAA",  desc="DESC_MAA",  helpLink="http://www.motivewave.com/studies/moving_average_adaptive.htm",  requiresVolume=false,  signals=false,  overlay=true,  studyOverlay=true)public class MovAvgAdaptive extends Study{  enum Values { DIFF, MAA, LRV }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 34, 1, 999, 1));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("MAA"), defaults.getLineColor(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("LRV"), defaults.getRed(), 1.0f, null, true, true, true));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("MAA"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("LRV"), defaults.getRed(), null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 34, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.PATH2);    var desc=createRD();    desc.exportValue(new ValueDescriptor(Values.MAA, get("LBL_MAA"), new String[] { Inputs.INPUT, Inputs.PERIOD }));    desc.exportValue(new ValueDescriptor(Values.LRV, get("LRV"), new String[] { Inputs.INPUT, Inputs.PERIOD }));    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD);    desc.declarePath(Values.MAA, Inputs.PATH);    desc.declarePath(Values.LRV, Inputs.PATH2);    desc.declareIndicator(Values.MAA, Inputs.IND);    desc.declareIndicator(Values.LRV, Inputs.IND2);    desc.setRangeKeys(Values.MAA, Values.LRV);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1 * 3);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period=getSettings().getInteger(Inputs.PERIOD);    if (index < period) return;    Object input=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var series=ctx.getDataSeries();    double fastest=0.667;    double slowest=0.0645;    double price=series.getDouble(index, input, 0);    double prevP=series.getDouble(index - 1, input, 0);    double diff=Math.abs(price - prevP);    series.setDouble(index, Values.DIFF, diff);    if (index < period * 2) return;    double priorP=series.getDouble(index - period, input, 0);    double signal=Math.abs(price - priorP);    double noise=series.sum(index, period, Values.DIFF);    double ratio=signal / noise;    double sm=Math.pow(ratio * (fastest - slowest) + slowest, 2);    double prevMaa=series.getDouble(index - 1, Values.MAA, price); // returns price on first try.    double maa=prevMaa + (sm * (price - prevMaa));    series.setDouble(index, Values.MAA, maa);    if (index < period * 3) return;    double[] lrv=Utility.linRegLine(series, index, period, Values.MAA, 0);    series.setDouble(index, Values.LRV, lrv[0]); // since 0 parameter above lrv[0] = a in line equation y = a + mx.    series.setComplete(index);  }}