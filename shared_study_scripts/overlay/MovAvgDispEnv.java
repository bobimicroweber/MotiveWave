package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Moving Average Displaced Envelope 052 */@StudyHeader(  namespace="com.motivewave",  id="ID_MADE",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_MOVING_AVERAGE_DISPLACED_ENVELOPE",  label="LBL_MADE",  desc="DESC_MADE",  helpLink="http://www.motivewave.com/studies/moving_average_displaced_envelope.htm",  requiresVolume=false,  signals=true,  overlay=true,  studyOverlay=true)public class MovAvgDispEnv extends Study{  final static String PERCENT_ABV="PercentAbov", PERCENT_BLW="PercentBlw";  enum Values { TOP, BOTTOM, ALERT }  enum Signals { SELL, BUY }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.EMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 9, 1, 999, 1));    inputs.addRow(new DoubleDescriptor(PERCENT_ABV, get("PERCENT_ABOVE"), 2, 0, 100.01, .01));    inputs.addRow(new DoubleDescriptor(PERCENT_BLW, get("PERCENT_BELOW"), 2, 0, 100.01, .01));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("DISPLACE"), 13, -999, 999, 1));    tab=sd.addTab(get("TAB_DISPLAY"));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("TOP"), defaults.getRed(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("BOTTOM"), defaults.getGreen(), 1.0f, null, true, true, true));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("TOP"), defaults.getRed(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("BOTTOM"), defaults.getGreen(), null, false, true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 9, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(PERCENT_ABV, PERCENT_BLW);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("DISPLACE"), 13, -999, 999, true, () -> Enums.Icon.SHIFT.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.PATH2);    var desc=createRD();    desc.exportValue(new ValueDescriptor(Values.TOP, get("TOP"), new String[] { Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, PERCENT_ABV }));    desc.exportValue(new ValueDescriptor(Values.BOTTOM, get("BOTTOM"), new String[] { Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, PERCENT_BLW }));    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, PERCENT_ABV, PERCENT_BLW, Inputs.PERIOD2);    desc.declarePath(Values.TOP, Inputs.PATH);    desc.declarePath(Values.BOTTOM, Inputs.PATH2);    desc.declareIndicator(Values.TOP, Inputs.IND);    desc.declareIndicator(Values.BOTTOM, Inputs.IND2);    desc.setRangeKeys(Values.TOP, Values.BOTTOM);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars(p1 + p2);  }  @Override  protected void calculate(int index, DataContext ctx)  {    Object input=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var method=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.EMA);    int period=getSettings().getInteger(Inputs.PERIOD);    int disp=getSettings().getInteger(Inputs.PERIOD2);    if (index < period + disp) return;    var series=ctx.getDataSeries();    Double price=series.getDouble(index, input);    if (price == null) return;        double perAb=getSettings().getDouble(PERCENT_ABV);    double perBl=getSettings().getDouble(PERCENT_BLW);    Double top=series.ma(method, index - disp, period, input);    if (top == null) return;    top=top * ((100 + perAb) / 100.0);    Double bott=series.ma(method, index - disp, period, input);    if (bott == null) return;    bott=bott * ((100 - perBl) / 100.0);    series.setDouble(index, Values.TOP, top);    series.setDouble(index, Values.BOTTOM, bott);    // Check for signal events    double prevHigh=series.getHigh(index - 1);    double prevLow=series.getLow(index - 1);    boolean sell=prevHigh > top;    boolean buy=prevLow < bott;    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      var c=new Coordinate(series.getStartTime(index), prevHigh);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_MADE_PRICE", Util.round(price, 2));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, price);    }    if (buy) {      var c=new Coordinate(series.getStartTime(index), prevLow);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_MADE_PRICE", Util.round(price, 2));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, price);    }    series.setComplete(index);  }}