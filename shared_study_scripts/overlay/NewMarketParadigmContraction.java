package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;import com.motivewave.platform.study.general.Utility;/** New Market Paradigm Contraction 077 */@StudyHeader(  namespace="com.motivewave",  id="ID_NMPC",  rb="com.motivewave.platform.study.nls.strings2",  desc="DESC_NMPC",  label="LBL_NMPC",  name="NAME_NEW_MARKET_PARADIGM_CONTRACTION",  helpLink="http://www.motivewave.com/studies/new_market_paradigm_contraction.htm",  overlay=true,  signals=true,  studyOverlay=true)public class NewMarketParadigmContraction extends Study{  final static String STD_DEV_UP="StdDevUp", STD_DEV_DOWN="StdDevDown", PATH5="Path5";  enum Values { UP, DOWN, BB_TOP, BB_BOTT, SMA }  enum Signals { SELL, BUY }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 28, 1, 999, 1));    inputs.addRow(new DoubleDescriptor(STD_DEV_UP, get("STD_DEV_UP"), 2, .1, 10.1, .1));    inputs.addRow(new DoubleDescriptor(STD_DEV_DOWN, get("STD_DEV_DOWN"), 2, .1, 10.1, .1));    var colors=tab.addGroup(get("PATHS"));    colors.addRow(new PathDescriptor(Inputs.PATH, get("TOP"), defaults.getRed(), 1.0f, null, true, true, true));    colors.addRow(new PathDescriptor(Inputs.PATH2, get("BOTTOM"), defaults.getGreen(), 1.0f, null, true, true, true));    colors.addRow(new PathDescriptor(Inputs.PATH3, get("BB_TOP"), defaults.getLineColor(), .0125f, new float[] { 5f, 5f }, true, true, true));    colors.addRow(new PathDescriptor(Inputs.PATH4, get("BB_BOTTOM"), defaults.getLineColor(), .0125f, new float[] { 5f, 5f }, true, true, true));    colors.addRow(new PathDescriptor(PATH5, get("SMA"), defaults.getLineColor(), .01f, new float[] { 5f, 5f }, true, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    colors=tab.addGroup(get("INDICATORS"));    colors.addRow(new IndicatorDescriptor(Inputs.IND, get("TOP"), defaults.getRed(), null, false, true, true));    colors.addRow(new IndicatorDescriptor(Inputs.IND2, get("BOTTOM"), defaults.getGreen(), null, false, true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 28, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(STD_DEV_UP, STD_DEV_DOWN, Inputs.PATH, Inputs.PATH2, Inputs.PATH3, Inputs.PATH4, PATH5);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD, STD_DEV_UP, STD_DEV_DOWN);    desc.exportValue(new ValueDescriptor(Values.UP, get("LBL_NMPC"), new String[] { Inputs.INPUT, Inputs.PERIOD, STD_DEV_UP }));    desc.exportValue(new ValueDescriptor(Values.DOWN, get("LBL_NMPC"), new String[] { Inputs.INPUT, Inputs.PERIOD, STD_DEV_DOWN }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declarePath(Values.UP, Inputs.PATH);    desc.declarePath(Values.DOWN, Inputs.PATH2);    desc.declarePath(Values.BB_TOP, Inputs.PATH3);    desc.declarePath(Values.BB_BOTT, Inputs.PATH4);    desc.declarePath(Values.SMA, PATH5);    desc.declareIndicator(Values.UP, Inputs.IND);    desc.declareIndicator(Values.DOWN, Inputs.IND2);    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.setRangeKeys(Values.UP, Values.DOWN, Values.BB_TOP, Values.BB_BOTT, Values.SMA);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1 + 1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period=getSettings().getInteger(Inputs.PERIOD);    if (index < period + 1) return;    double sdUp=getSettings().getDouble(STD_DEV_UP);    double sdDn=getSettings().getDouble(STD_DEV_DOWN);    Object input=getSettings().getInput(Inputs.INPUT);    var series=ctx.getDataSeries();    int nmP=0;    double price=series.getDouble(index, input, 0);    double[] bb=Utility.bollingerBands(series, index, period, sdUp, sdDn, input);    double[] prevBb=Utility.bollingerBands(series, index - 1, period, sdUp, sdDn, input);    double top=bb[0];    double bott=bb[1];    boolean cond1=top < prevBb[0] && bott > prevBb[1];    boolean cond2=top > prevBb[0] && bott < prevBb[1];    boolean cond3=(cond1 == false) && (cond2 == false);    if (cond1) nmP=1;    if (cond2) nmP=2;    if (cond3) nmP=3;    if (nmP == 1) {      series.setDouble(index, Values.UP, top);      series.setDouble(index, Values.DOWN, bott);    }    series.setDouble(index, Values.BB_TOP, top);    series.setDouble(index, Values.BB_BOTT, bott);    series.setDouble(index, Values.SMA, bb[2]);    // Check for signal events    boolean sell=price > bb[0];    boolean buy=price < bb[1];    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      var c=new Coordinate(series.getStartTime(index), price);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_NMPC_PRICE_TOP", Util.round(price, 2), Util.round(top, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, price);    }    if (buy) {      var c=new Coordinate(series.getStartTime(index), price);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_NMPC_PRICE_BOTTOM", Util.round(price, 2), Util.round(bott, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, price);    }    series.setComplete(index);  }}