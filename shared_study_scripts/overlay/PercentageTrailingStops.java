package com.motivewave.platform.study.overlay;import java.awt.Font;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.BooleanDescriptor;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.FontDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Label;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;import com.motivewave.platform.study.general.Utility;/** Percentage Trailing Stops 165 */@StudyHeader(  namespace="com.motivewave",  id="ID_PCTTS",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_PCTTS",  name="NAME_PERCENTAGE_TRAILING_STOPS",  desc="DESC_PCTTS",  helpLink="http://www.motivewave.com/studies/percentage_trailing_stops.htm",  signals=true,  overlay=true,  studyOverlay=true)public class PercentageTrailingStops extends Study{  final static String[] POSITION= { "Long", "Short" };  final static String INDEX="Index", SHOW="Show", PCT="Pct";  final static String PATH1="Path1", PATH2="Path2", PATH3="Path3", PATH4="Path4", IND3="Ind3";  enum Values { STOP, HH_LL, INDX }  protected enum Signals { SELL, BUY }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT2, get("POSITION"), POSITION, POSITION[0]));    inputs.addRow(new IntegerDescriptor(INDEX, get("ENTRY_INDEX"), 100, 1, 9999, 1));    inputs.addRow(new BooleanDescriptor(SHOW, get("SHOW_INDEX"), false));    inputs.addRow(new DoubleDescriptor(PCT, get("PERCENT"), 6, 0, 999.1, .1));    inputs.addRow(new FontDescriptor(Inputs.FONT, get("FONT"), defaults.getFont()));    tab=sd.addTab(get("TAB_DISPLAY"));    var settings=tab.addGroup(get("PATHS"));    var path=new PathDescriptor(PATH1, get("STOP_LONG"), defaults.getBlue(), Enums.PointType.DOT, Enums.Size.SMALL, true, true, false);    path.setSupportsMaxPoints(true);    path.setSupportsColorPolicy(false);    settings.addRow(path);    path=new PathDescriptor(PATH2, get("HIGHEST"), defaults.getGreen(), Enums.PointType.DOT, Enums.Size.SMALL, true, true, false);    path.setSupportsMaxPoints(true);    path.setSupportsColorPolicy(false);    settings.addRow(path);    path=new PathDescriptor(PATH3, get("STOP_SHORT"), defaults.getPurple(), Enums.PointType.DOT, Enums.Size.SMALL, true, true, false);    path.setSupportsMaxPoints(true);    path.setSupportsColorPolicy(false);    settings.addRow(path);    path=new PathDescriptor(PATH4, get("LOWEST"), defaults.getRed(), Enums.PointType.DOT, Enums.Size.SMALL, true, true, false);    path.setSupportsMaxPoints(true);    path.setSupportsColorPolicy(false);    settings.addRow(path);    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("LBL_PCTTS"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("HH_LL"), defaults.getLineColor(), null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT2, INDEX, SHOW, PCT, Inputs.FONT);    sd.addQuickSettings(PATH1, PATH2, PATH3, PATH4);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT2, INDEX, PCT);    desc.exportValue(new ValueDescriptor(Values.INDX, Enums.ValueType.INTEGER, get("INDEX"), null));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.STOP, Inputs.PATH);    desc.declarePath(Values.HH_LL, Inputs.PATH2);    desc.declareIndicator(Values.STOP, Inputs.IND);    desc.declareIndicator(Values.HH_LL, Inputs.IND2);    desc.setRangeKeys(Values.STOP, Values.HH_LL);  }  @Override  public void onLoad(Defaults defaults)  {    setMinBars(getSettings().getInteger(INDEX));  }  @Override  public void onBarUpdate(DataContext ctx)  {    calculateValues(ctx);  }  @Override  protected void calculate(int index, DataContext ctx)  {    if (index < 1) return;    boolean showI=getSettings().getBoolean(SHOW);    int ind=getSettings().getInteger(INDEX);    if (index < ind && !showI) return;    var defaults=ctx.getDefaults();    String pos=getSettings().getInput(Inputs.INPUT2, POSITION[0]).toString();    double pct=getSettings().getDouble(PCT);    var fi=getSettings().getFont(Inputs.FONT);    Font f=fi.getFont();    var pth1=getSettings().getPath(PATH1);    var pth2=getSettings().getPath(PATH2);    var pth3=getSettings().getPath(PATH3);    var pth4=getSettings().getPath(PATH4);    boolean longP=pos == "Long";    boolean shortP=pos == "Short";    if (longP) {      getSettings().setPath(Inputs.PATH, pth1);      getSettings().setPath(Inputs.PATH2, pth2);    }    if (shortP) {      getSettings().setPath(Inputs.PATH, pth3);      getSettings().setPath(Inputs.PATH2, pth4);    }    var series=ctx.getDataSeries();    series.setInt(index, Values.INDX, index);    pct=pct / 100.0; // change from percent to decimal    double highest=0, lowest=0;    Double enterP=series.getDouble(ind, Enums.BarInput.CLOSE, 0);    enterP=Util.round(enterP, 2);    double low=series.getDouble(index, Enums.BarInput.LOW, 0);    double high=series.getDouble(index, Enums.BarInput.HIGH, 0);    if (index == ind) {      if (longP) {        series.setDouble(index - 1, Values.HH_LL, enterP);        series.setDouble(index - 1, Values.STOP, high - (pct * high));      }      if (shortP) {        series.setDouble(index - 1, Values.HH_LL, enterP);        series.setDouble(index - 1, Values.STOP, low + (pct * low));      }    }    double prevHH=series.getDouble(index - 1, Values.HH_LL, enterP);    double prevLL=series.getDouble(index - 1, Values.HH_LL, enterP);    double pSL=series.getDouble(index - 1, Values.STOP, enterP);    double pSS=series.getDouble(index - 1, Values.STOP, enterP);    double stopL=0, stopS=Double.MAX_VALUE;    if (longP) {      stopL=pSL;      highest=prevHH;      if (high > prevHH) {        stopL=high - (pct * high); // set new higher stop        highest=high; // set new highest      }      series.setDouble(index, Values.HH_LL, highest);      series.setDouble(index, Values.STOP, stopL);    }    if (shortP) {      stopS=pSS;      lowest=prevLL;      if (low < prevLL) {        stopS=low + (pct * low); // set new lower stop        lowest=low; // set new lowest      }      series.setDouble(index, Values.HH_LL, lowest);      series.setDouble(index, Values.STOP, stopS);    }    series.setComplete(index);    // Check for signal events    double prevL=series.getDouble(index - 1, Enums.BarInput.LOW, 0);    double prevH=series.getDouble(index - 1, Enums.BarInput.HIGH, 0);    boolean sell=prevL > stopL && low < stopL;    boolean buy=prevH < stopS && high > stopS;    series.setBoolean(index, Signals.BUY, buy);    series.setBoolean(index, Signals.SELL, sell);    if (sell) {      var c=new Coordinate(series.getStartTime(index + 1), low);      var lbl=new Label(get("STOP_LOSS_SELL"), f, defaults.getTextColor(), defaults.getRed());      lbl.setLocation(c);      addFigure(lbl);      ctx.signal(index, Signals.SELL,          get("STOP_LOSS_SELL_TO_EXIT_LOW_STOP", Util.round(low, 2), Util.round(stopL, 3)), low);    }    if (buy) {      var c=new Coordinate(series.getStartTime(index + 1), high);      var lbl=new Label(get("STOP_LOSS_BUY"), f, defaults.getTextColor(), defaults.getGreen());      lbl.setLocation(c);      addFigure(lbl);      ctx.signal(index, Signals.BUY,          get("STOP_LOSS_BUY_TO_COVER_HIGH_STOP", Util.round(high, 2), Util.round(stopS, 3)), high);    }    if (index == ind) {      String entP=get("ENTRY_PRICE~") + enterP.toString();      var c=new Coordinate(series.getStartTime(index + 1), enterP);      var lbl=new Label(entP, f, defaults.getTextColor(), defaults.getGreen());      lbl.setLocation(c);      addFigure(lbl);    }    if (showI && Utility.isMult(index, 5)) {      Integer indx=index;      String x=indx.toString();      var c=new Coordinate(series.getStartTime(index + 1), high);      var lbl=new Label(x, f, defaults.getTextColor(), defaults.getBlue());      lbl.setLocation(c);      addFigure(lbl);    }  }}