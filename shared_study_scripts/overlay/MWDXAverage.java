package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** MWDXAverage 027 */@StudyHeader(  namespace="com.motivewave",  id="ID_MWDX",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_MWDX_AVERAGE",  desc="DESC_MWDX",  helpLink="http://www.motivewave.com/studies/mwdx_average.htm",  label="LBL_MWDX",  overlay=true,  studyOverlay=true)public class MWDXAverage extends Study{  final static String FAC="Fac";  enum Values { MWDX }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new DoubleDescriptor(FAC, get("FACTOR"), .2, 0.01, .99, .01));    var colors=tab.addGroup(get("PATH_INDICATOR"));    colors.addRow(new PathDescriptor(Inputs.PATH, get("LBL_MWDX"), defaults.getLineColor(), 1.0f, null, true, true, true));    colors.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, FAC, Inputs.PATH);        var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, FAC);    desc.exportValue(new ValueDescriptor(Values.MWDX, get("LBL_MWDX"), new String[] { Inputs.INPUT, FAC }));    desc.declarePath(Values.MWDX, Inputs.PATH);    desc.declareIndicator(Values.MWDX, Inputs.IND);    desc.setRangeKeys(Values.MWDX);    setMinBars(20);  }  @Override  public void calculate(int index, DataContext ctx)  {    if (index < 1) return;    Object input=getSettings().getInput(Inputs.INPUT);    double fac=getSettings().getDouble(FAC);    double value2=2 / fac - 1;    double factor=2 / (value2 + 1);    var series=ctx.getDataSeries();    double price=series.getDouble(index, input, 0); // close unless changed by user    double prevMwdx=series.getDouble(index - 1, Values.MWDX, price); // returns price on first try    double mwdx=factor * price + (1 - factor) * prevMwdx;    series.setDouble(index, Values.MWDX, mwdx);    series.setComplete(index);  }}