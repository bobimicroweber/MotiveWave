package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** DEMA 2Lines 024 */@StudyHeader(  namespace="com.motivewave",  id="ID_DEMA",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_DEMA_2LINES",  label="LBL_DEMA",  desc="DESC_DEMA",  menu="MENU_BILL_MARS",  helpLink="http://www.motivewave.com/studies/dema_2lines.htm",  requiresVolume=false,  signals=true,  overlay=true,  studyOverlay=true)public class DEMA2Lines extends Study{  enum Values { PRICE, EMA1, EMA2, DEMA1, DEMA2 }  protected enum Signals { BUY, SELL }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.EMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD1"), 10, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("PERIOD2"), 40, 1, 999, 1));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("DEMA1"), defaults.getLineColor(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("DEMA2"), defaults.getRed(), 1.0f, null, true, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("DEMA1"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("DEMA2"), defaults.getRed(), null, false, true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD1"), 10, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("PERIOD2"), 40, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.PATH2);    var desc=createRD();    desc.setLabelSettings(Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2);    desc.exportValue(new ValueDescriptor(Values.DEMA1, get("DEMA1"), new String[] { Inputs.METHOD, Inputs.PERIOD }));    desc.exportValue(new ValueDescriptor(Values.DEMA2, get("DEMA2"), new String[] { Inputs.METHOD, Inputs.PERIOD2 }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.DEMA1, Inputs.PATH);    desc.declarePath(Values.DEMA2, Inputs.PATH2);    desc.declareIndicator(Values.DEMA1, Inputs.IND);    desc.declareIndicator(Values.DEMA2, Inputs.IND2);    desc.setRangeKeys(Values.DEMA1, Values.DEMA2);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars(Math.max(p1, p2) * 2);  }  @Override  protected void calculate(int index, DataContext ctx)  {    var method=getSettings().getMAMethod(Inputs.METHOD);    int period1=getSettings().getInteger(Inputs.PERIOD);    int period2=getSettings().getInteger(Inputs.PERIOD2);    int longestPeriod=Math.max(period1, period2);    var series=ctx.getDataSeries();    double high=series.getHigh(index);    double low=series.getLow(index);    double price=(high + low) / 2;    series.setDouble(index, Values.PRICE, price);    if (index < longestPeriod) return;    Double ema1=series.ma(method, index, period1, Values.PRICE);    Double ema2=series.ma(method, index, period2, Values.PRICE);    series.setDouble(index, Values.EMA1, ema1);    series.setDouble(index, Values.EMA2, ema2);    if (index < longestPeriod * 2) return;    Double dema1=series.ma(method, index, period1, Values.EMA1);    Double dema2=series.ma(method, index, period2, Values.EMA2);    series.setDouble(index, Values.DEMA1, dema1);    series.setDouble(index, Values.DEMA2, dema2);    // Check for signal events    boolean buy=crossedAbove(series, index, Values.DEMA1, Values.DEMA2);    boolean sell=crossedBelow(series, index, Values.DEMA1, Values.DEMA2);    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      var c=new Coordinate(series.getStartTime(index), dema1);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_HIGH_DEMA1", Util.round(high, 2), Util.round(dema1, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, high);    }    if (buy) {      var c=new Coordinate(series.getStartTime(index), dema1);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_LOW_DEMA1", Util.round(low, 2), Util.round(dema1, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, low);    }    series.setComplete(index);  }}