package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;import com.motivewave.platform.study.general.Utility;/** Laguerre Filter Adaptive John F. Ehlers 142 */@StudyHeader(  namespace="com.motivewave",  id="ID_LAGFA",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_LAGFA",  name="NAME_LAGUERRE_FILTER_ADAPTIVE",  desc="DESC_LAGFA",  menu="MENU_JOHN_EHLERS",  helpLink="http://www.motivewave.com/studies/laguerre_filter_adaptive.htm",  signals=false,  overlay=true,  studyOverlay=true)public class LaguerreFilterAdaptive extends Study{  enum Values { DIFF, MID, L0, L1, L2, L3, FILT }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.MIDPOINT));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD1"), 20, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("PERIOD2"), 5, 1, 999, 1));    var settings=tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_LAGFA"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD1"), 20, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("PERIOD2"), 5, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2);    desc.exportValue(new ValueDescriptor(Values.FILT, get("LBL_LAGFA"), new String[] { Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2 }));    desc.declarePath(Values.FILT, Inputs.PATH);    desc.declareIndicator(Values.FILT, Inputs.IND);    desc.setRangeKeys(Values.FILT);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars(p1 + p2 + 1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    if (index < 1) return;    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.MIDPOINT);    var series=ctx.getDataSeries();    double alpha=0, mid=0;    double price=series.getDouble(index, key, 0);    double prevF=series.getDouble(index - 1, Values.FILT, price);    double diff=Math.abs(price - prevF);    series.setDouble(index, Values.DIFF, diff);    if (index < p1 + 1) return;    double hh=series.highest(index, p1, Values.DIFF);    double ll=series.lowest(index, p1, Values.DIFF);    if (hh - ll != 0) mid=(diff - ll) / (hh - ll);    series.setDouble(index, Values.MID, mid);    if (index < p1 + p2 + 1) return;    if (hh - ll != 0) {      // alpha = series.sma(index, p2, Values.MID);      alpha=Utility.median(series, index, p2, Values.MID);    }    double prevL0=series.getDouble(index - 1, Values.L0, price);    double prevL1=series.getDouble(index - 1, Values.L1, price);    double prevL2=series.getDouble(index - 1, Values.L2, price);    double prevL3=series.getDouble(index - 1, Values.L3, price);    double l0=alpha * price + (1 - alpha) * prevL0;    double l1=-(1 - alpha) * l0 + prevL0 + (1 - alpha) * prevL1;    double l2=-(1 - alpha) * l1 + prevL1 + (1 - alpha) * prevL2;    double l3=-(1 - alpha) * l2 + prevL2 + (1 - alpha) * prevL3;    double filt=(l0 + 2 * l1 + 2 * l2 + l3) / 6.0;    series.setDouble(index, Values.FILT, filt);    series.setDouble(index, Values.L0, l0);    series.setDouble(index, Values.L1, l1);    series.setDouble(index, Values.L2, l2);    series.setDouble(index, Values.L3, l3);    series.setComplete(index);  }}