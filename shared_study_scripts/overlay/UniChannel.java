package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.X11Colors;import com.motivewave.platform.sdk.common.desc.BooleanDescriptor;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Uni Channel 032 */@StudyHeader(  namespace="com.motivewave",  id="ID_UNI_CH",  rb="com.motivewave.platform.study.nls.strings2",  desc="DESC_UNI_CH",  name="NAME_UNI_CHANNEL",  label="LBL_UC",  menu="MENU_BANDS",  helpLink="http://www.motivewave.com/studies/uni_channel.htm",  requiresVolume=false,  signals=true,  overlay=true,  studyOverlay=true)public class UniChannel extends Study{  final static String UB_FACTOR="UbFac", LB_FACTOR="LbFac", IND3="Ind3", TYPE1="Type1";  enum Values { UB, MB, LB }  protected enum Signals { BUY, SELL }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab = sd.addTab(get("TAB_GENERAL"));    var inputs = tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.SMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 10, 1, 999, 1));    inputs.addRow(new DoubleDescriptor(UB_FACTOR, get("UB_FACTOR"), .02, 0, 99.01, .01));    inputs.addRow(new DoubleDescriptor(LB_FACTOR, get("LB_FACTOR"), .02, 0, 99.01, .01));    inputs.addRow(new BooleanDescriptor(TYPE1, get("TYPE1"), false));    var settings= tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("TOP"), defaults.getRed(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("MIDDLE"), defaults.getLineColor(), 1.0f, new float[] { 3f, 3f }, true, true, true));    settings.addRow(new PathDescriptor(Inputs.PATH3, get("BOTTOM"), defaults.getGreen(), 1.0f, null, true, true, true));    tab = sd.addTab(get("TAB_DISPLAY"));    settings = tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("TOP"), defaults.getRed(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("MIDDLE"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(IND3, get("BOTTOM"), defaults.getGreen(), X11Colors.WHITE, false, true, true));    var markers = tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 10, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(UB_FACTOR, LB_FACTOR, TYPE1, Inputs.PATH, Inputs.PATH2, Inputs.PATH3);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, UB_FACTOR, LB_FACTOR, TYPE1);    desc.exportValue(new ValueDescriptor(Values.UB, get("UB"), new String[] { Inputs.INPUT, Inputs.PERIOD, UB_FACTOR }));    desc.exportValue(new ValueDescriptor(Values.LB, get("LB"), new String[] { Inputs.INPUT, Inputs.PERIOD, LB_FACTOR }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.UB, Inputs.PATH);    desc.declarePath(Values.MB, Inputs.PATH2);    desc.declarePath(Values.LB, Inputs.PATH3);    desc.declareIndicator(Values.UB, Inputs.IND);    desc.declareIndicator(Values.MB, Inputs.IND2);    desc.declareIndicator(Values.LB, IND3);    desc.setRangeKeys(Values.UB, Values.MB, Values.LB);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period=getSettings().getInteger(Inputs.PERIOD);    if (index < period) return;    Object input=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var method=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.SMA);    double ubFac=getSettings().getDouble(UB_FACTOR);    double lbFac=getSettings().getDouble(LB_FACTOR);    boolean type1=getSettings().getBoolean(TYPE1);    var series=ctx.getDataSeries();    Double ma=series.ma(method, index, period, input);    if (ma == null) return;    double ub=0, lb=0;    if (type1) {      ub=ma + ubFac;      lb=ma - lbFac;    }    else {      ub=ma + (ma * ubFac);      lb=ma - (ma * lbFac);    }    series.setDouble(index, Values.UB, ub);    series.setDouble(index, Values.MB, ma);    series.setDouble(index, Values.LB, lb);    // signals    double low=series.getLow(index);    double high=series.getHigh(index);    boolean buy=low < lb;    boolean sell=high > ub;    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      var c=new Coordinate(series.getStartTime(index), high);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_UNIC_HIGH", Util.round(high, 2));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, high);    }    if (buy) {      var c=new Coordinate(series.getStartTime(index), low);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_UNIC_LOW", Util.round(low, 2));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, low);    }    series.setComplete(index);  }}