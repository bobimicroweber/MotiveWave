package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Wilder Moving Average 164 */@StudyHeader(  namespace="com.motivewave",  id="ID_WILDMA",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_WILDER_MOVING_AVERAGE",  label="LBL_WILDMA",  desc="DESC_WILDMA",  menu="MENU_MOVING_AVERAGE",  helpLink="http://www.motivewave.com/studies/wilders_moving_average.htm",  requiresVolume=false,  signals=false,  overlay=true,  studyOverlay=true)public class WildersMovingAverage extends Study{  enum Values { WILD }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 22, 1, 999, 1));    var settings=tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("PATH"), defaults.getLineColor(), 1.0f, null, true, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 22, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD);    desc.exportValue(new ValueDescriptor(Values.WILD, get("LBL_WILDMA"), new String[] { Inputs.INPUT, Inputs.PERIOD }));    desc.declarePath(Values.WILD, Inputs.PATH);    desc.declareIndicator(Values.WILD, Inputs.IND);    desc.setRangeKeys(Values.WILD);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period=getSettings().getInteger(Inputs.PERIOD);    if (index < period) return;    Object input=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var series=ctx.getDataSeries();    double k=1.0 / period;    double def=series.sma(index, period, input);    double price=series.getDouble(index, input, 0);    double prevW=series.getDouble(index - 1, Values.WILD, def);    double wild=price * k + prevW * (1 - k);    series.setDouble(index, Values.WILD, wild);    series.setComplete(index);  }}