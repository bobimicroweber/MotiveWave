package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Two Pole Butterworth Filter John F. Ehlers 137 */@StudyHeader(  namespace="com.motivewave",  id="ID_TPBWF",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_TPBWF",  name="NAME_TWO_POLE_BUTTERWORTH_FILTER",  desc="DESC_TPBWF",  menu="MENU_JOHN_EHLERS",  helpLink="http://www.motivewave.com/studies/two_pole_butterworth_filter.htm",  signals=false,  overlay=true,  studyOverlay=true)public class TwoPoleButterFilter extends Study{  enum Values { BUTTER }  @Override  public void initialize(Defaults defaults)  {    var sd = createSD();    var tab = sd.addTab(get("TAB_GENERAL"));    var inputs = tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 20, 1, 9999, 1));    var settings = tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_TPBWF"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 20, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD);    desc.exportValue(new ValueDescriptor(Values.BUTTER, get("LBL_TPBWF"), new String[] { Inputs.INPUT, Inputs.PERIOD }));    desc.declarePath(Values.BUTTER, Inputs.PATH);    desc.declareIndicator(Values.BUTTER, Inputs.IND);    desc.setRangeKeys(Values.BUTTER);    setMinBars(20);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period=getSettings().getInteger(Inputs.PERIOD);    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var series=ctx.getDataSeries();    double price=series.getDouble(index, key, 0);    if (index <= 2) {      series.setDouble(index, Values.BUTTER, price);      series.setComplete(index);      return;    }    double prevP1=series.getDouble(index - 1, key, 0);    double prevP2=series.getDouble(index - 2, key, 0);    double prevB1=series.getDouble(index - 1, Values.BUTTER, price);    double prevB2=series.getDouble(index - 2, Values.BUTTER, price);    double piPrd=Math.PI / period;    double a1=Math.exp(-1.414 * piPrd);    double b1=2 * a1 * Math.cos(1.414 * piPrd);    double coef2=b1;    double coef3=-a1 * a1;    double coef1=(1 - b1 + a1 * a1) / 4.0;    double butter=coef1 * (price + (2 * prevP1) + prevP2) + (coef2 * prevB1) + (coef3 * prevB2);    series.setDouble(index, Values.BUTTER, butter);    series.setComplete(index);  }}