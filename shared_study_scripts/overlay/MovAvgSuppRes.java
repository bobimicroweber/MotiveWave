package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;@StudyHeader(  namespace="com.motivewave",  id="ID_MASR",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_MOVING_AVERAGE_SUPPORT_RESISTANCE",  label="LBL_MASR",  desc="DESC_MASR",  helpLink="http://www.motivewave.com/studies/moving_average_support_resistance.htm",  requiresVolume=false,  signals=true,  overlay=true,  studyOverlay=true)public class MovAvgSuppRes extends Study{  final static String PERCENT_FAC="perCentFac", IND3="Ind3";    enum Values { MASR, TOP, BOTT }  enum Signals { BUY, SELL }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.SMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 10, 1, 999, 1));    inputs.addRow(new DoubleDescriptor(PERCENT_FAC, get("PERCENT_FAC"), 2, 0, 100.01, .01));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("TOP"), defaults.getRed(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_MASR"), defaults.getLineColor(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(Inputs.PATH3, get("BOTTOM"), defaults.getGreen(), 1.0f, null, true, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("TOP"), defaults.getRed(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("LBL_MASR"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(IND3, get("BOTTOM"), defaults.getGreen(), null, false, true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 9, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(PERCENT_FAC, Inputs.PATH2, Inputs.PATH, Inputs.PATH2);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, PERCENT_FAC);    desc.exportValue(new ValueDescriptor(Values.MASR, get("LBL_MASR"), new String[] { Inputs.INPUT, Inputs.METHOD,  Inputs.PERIOD, PERCENT_FAC }));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declarePath(Values.TOP, Inputs.PATH2);    desc.declarePath(Values.MASR, Inputs.PATH);    desc.declarePath(Values.BOTT, Inputs.PATH3);    desc.declareIndicator(Values.TOP, Inputs.IND2);    desc.declareIndicator(Values.MASR, Inputs.IND);    desc.declareIndicator(Values.BOTT, IND3);    desc.setRangeKeys(Values.MASR, Values.TOP, Values.BOTT);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    var method=getSettings().getMAMethod(Inputs.METHOD);    Object input=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    int period=getSettings().getInteger(Inputs.PERIOD);    double fac=getSettings().getDouble(PERCENT_FAC);    if (index < period) return;    var series=ctx.getDataSeries();    Double masr=series.ma(method, index, period, input);    series.setDouble(index, Values.MASR, masr);    double price=series.getDouble(index, input, 0);    double high=series.getHigh(index);    double low=series.getLow(index);    double suppLevel=(1 + (fac / 100.0));    double top=masr * suppLevel;    double bott=masr / suppLevel;    series.setDouble(index, Values.TOP, top);    series.setDouble(index, Values.BOTT, bott);    // Check for signal events    boolean sell=price > top;    boolean buy=price < bott;    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      var c=new Coordinate(series.getStartTime(index), high);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_MASR_PRICE_TOP", Util.round(price, 2), Util.round(top, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, price);    }    if (buy) {      var c=new Coordinate(series.getStartTime(index), low);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_MASR_PRICE_BOTTOM", Util.round(price, 2), Util.round(bott, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, price);    }    series.setComplete(index);  }}