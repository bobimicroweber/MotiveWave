package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;import com.motivewave.platform.study.general.Utility;/** Starc Bands 015 */@StudyHeader(  namespace="com.motivewave",  id="ID_STARC_BANDS",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_STARC_BANDS",  menu="MENU_BANDS",  desc="DESC_STARC",  label="LBL_STARC",  helpLink="http://www.motivewave.com/studies/starc_bands.htm",  overlay=true,  signals=true,  studyOverlay=true)public class StarcBands extends Study{  final static String ATR_MULT="atrMult", BB_MULT="bbMult", PATH5="Path5";  final static String IND3="Ind3", IND4="Ind4", IND5="Ind5";  enum Values { ST_TOP, MA, ST_BOTT, BB_TOP, BB_BOTT }  protected enum Signals { BUY, SELL }  private boolean buyStock=true;  private boolean sellStock=true;  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.SMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("MA_PERIOD"), 6, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("STARC_PERIOD"), 15, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD3, get("BB_PERIOD"), 6, 1, 999, 1));    inputs.addRow(new DoubleDescriptor(ATR_MULT, get("ATR_MULTIPLER"), 2.0, 0.1, 999, 0.1));    inputs.addRow(new DoubleDescriptor(BB_MULT, get("BB_MULTIPLER"), 2.0, 0.1, 999, 0.1));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var colors=tab.addGroup(get("PATHS"));    colors.addRow(new PathDescriptor(Inputs.PATH, get("STARC_TOP"), defaults.getRed(), 1.0f, null, true, true, true));    colors.addRow(new PathDescriptor(Inputs.PATH2, get("MA"), defaults.getBlue(), 1.0f, new float[] { 3f, 3f }, true, true, true));    colors.addRow(new PathDescriptor(Inputs.PATH3, get("STARC_BOTT"), defaults.getGreen(), 1.0f, null, true, true, true));    colors.addRow(new PathDescriptor(Inputs.PATH4, get("BB_TOP"), defaults.getLineColor(), 1.0f, new float[] { 5f, 5f }, true, true, true));    colors.addRow(new PathDescriptor(PATH5, get("BB_BOTT"), defaults.getLineColor(), 1.0f, new float[] { 5f, 5f }, true, true, true));    colors=tab.addGroup(get("INDICATORS"));    colors.addRow(new IndicatorDescriptor(Inputs.IND, get("STARC_TOP"), defaults.getRed(), null, false, true, true));    colors.addRow(new IndicatorDescriptor(Inputs.IND2, get("MA"), defaults.getLineColor(), null, false, true, true));    colors.addRow(new IndicatorDescriptor(IND3, get("STARC_BOTT"), defaults.getGreen(), null, false, true, true));    colors.addRow(new IndicatorDescriptor(IND4, get("BB_TOP"), defaults.getLineColor(), null, false, true, true));    colors.addRow(new IndicatorDescriptor(IND5, get("BB_BOTT"), defaults.getLineColor(), null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("MA_PERIOD"), 6, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("STARC_PERIOD"), 15, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD3, get("BB_PERIOD"), 6, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(ATR_MULT, BB_MULT, Inputs.PATH, Inputs.PATH2, Inputs.PATH3, Inputs.PATH4, PATH5);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3, ATR_MULT, BB_MULT);    desc.exportValue(new ValueDescriptor(Values.ST_TOP, get("STARC_TOP"), new String[] { Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2 }));    desc.exportValue(new ValueDescriptor(Values.MA, get("MA"), new String[] { Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD2 }));    desc.exportValue(new ValueDescriptor(Values.ST_BOTT, get("STARC_BOTT"), new String[] { Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2 }));    desc.exportValue(new ValueDescriptor(Values.BB_TOP, get("BB_TOP"), new String[] { Inputs.INPUT, Inputs.PERIOD3, BB_MULT }));    desc.exportValue(new ValueDescriptor(Values.BB_BOTT, get("BB_BOTT"), new String[] { Inputs.INPUT, Inputs.PERIOD3, BB_MULT }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.ST_TOP, Inputs.PATH);    desc.declarePath(Values.MA, Inputs.PATH2);    desc.declarePath(Values.ST_BOTT, Inputs.PATH3);    desc.declarePath(Values.BB_TOP, Inputs.PATH4);    desc.declarePath(Values.BB_BOTT, PATH5);    desc.declareIndicator(Values.ST_TOP, Inputs.IND);    desc.declareIndicator(Values.MA, Inputs.IND2);    desc.declareIndicator(Values.ST_BOTT, IND3);    desc.declareIndicator(Values.BB_TOP, IND4);    desc.declareIndicator(Values.BB_BOTT, IND5);    desc.setRangeKeys(Values.ST_TOP, Values.ST_BOTT, Values.BB_TOP, Values.BB_BOTT);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    int p3=getSettings().getInteger(Inputs.PERIOD3);    setMinBars(Math.max(Math.max(p1, p2), p3) + 1);  }  @Override  public void calculate(int index, DataContext ctx)  {    int maPeriod=getSettings().getInteger(Inputs.PERIOD);    if (index < maPeriod + 1) return;    int atrPeriod=getSettings().getInteger(Inputs.PERIOD2);    if (index < atrPeriod + 1) return;    int bbPeriod=getSettings().getInteger(Inputs.PERIOD3);    if (index < bbPeriod + 1) return;    var method=getSettings().getMAMethod(Inputs.METHOD);    double atrMult=getSettings().getDouble(ATR_MULT);    double bbMult=getSettings().getDouble(BB_MULT);    Object input=getSettings().getInput(Inputs.INPUT);    var series=ctx.getDataSeries();    Double ma=series.ma(method, index, maPeriod, input);    if (ma == null) return;    double atr=series.atr(index, atrPeriod);    atr=atr * atrMult;    double upperStarc=ma + atr;    double lowerStarc=ma - atr;    series.setDouble(index, Values.MA, ma);    series.setDouble(index, Values.ST_TOP, upperStarc);    series.setDouble(index, Values.ST_BOTT, lowerStarc);    double[] bb=Utility.bollingerBands(series, index, bbPeriod, bbMult, bbMult, input);    series.setDouble(index, Values.BB_TOP, bb[0]);    series.setDouble(index, Values.BB_BOTT, bb[1]);    // signals    double low=series.getLow(index);    double high=series.getHigh(index);    double prevMa=series.getDouble(index - 1, Values.MA, 0);    boolean sell=prevMa > ma && high > bb[0] && high > upperStarc && sellStock; // bb[0]= bollingerBand[top]    boolean buy=prevMa < ma && low < bb[1] && low < lowerStarc && buyStock; // bb[1] = bb[bottom]    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      sellStock=false;      buyStock=true;      var c=new Coordinate(series.getStartTime(index), high);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_LOW_STARC_UPPER_BAND", Util.round(high, 2), Util.round(upperStarc, 3));       if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, high);    }    if (buy) {      buyStock=false;      sellStock=true;      var c=new Coordinate(series.getStartTime(index), low);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_HIGH_STARC_LOWER_BAND", Util.round(low, 2), Util.round(lowerStarc, 3));       if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, low);    }    series.setComplete(index);  }}