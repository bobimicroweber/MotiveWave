package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.StudyHeader;/** RainbowA 076 */@StudyHeader(  namespace="com.motivewave",  id="ID_RBC",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_RAINBOW_C",  label="LBL_RBC",  desc="DESC_RBC",  helpLink="http://www.motivewave.com/studies/rainbow_c.htm",  requiresVolume=false,  signals=false,  overlay=true,  studyOverlay=true)public class RainbowC extends RainbowA{  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.SMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 2, 1, 999, 1));    tab=sd.addTab(get("TAB_DISPLAY"));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("AVG1"), defaults.getOrange(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("AVG2"), defaults.getRed(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(Inputs.PATH3, get("AVG3"), defaults.getBlue(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(Inputs.PATH4, get("AVG4"), defaults.getGreen(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(PATH5, get("AVG5"), defaults.getBlue(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(PATH6, get("AVG6"), defaults.getPurple(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(PATH7, get("AVG7"), defaults.getGreen(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(PATH8, get("AVG8"), defaults.getRed(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(PATH9, get("AVG9"), defaults.getBlue(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(PATH10, get("AVG10"), defaults.getRed(), 1.0f, null, true, true, true));    settings=tab.addGroup(get("INDICATOR"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("AVG1"), defaults.getLineColor(), null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("LBL_PERIOD"), 2, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.PATH2, Inputs.PATH3, Inputs.PATH4, PATH5, PATH6, PATH7, PATH8, PATH9, PATH10);    var desc=createRD();    desc.setLabelSettings(Inputs.METHOD, Inputs.INPUT, Inputs.PERIOD);    desc.exportValue(new ValueDescriptor(Values.AVG1, get("AVG1"), new String[] { Inputs.METHOD, Inputs.INPUT, Inputs.PERIOD }));    desc.exportValue(new ValueDescriptor(Values.AVG5, get("AVG5"), new String[] { Inputs.METHOD, Inputs.INPUT, Inputs.PERIOD }));    desc.exportValue(new ValueDescriptor(Values.AVG10, get("AVG10"), new String[] { Inputs.METHOD, Inputs.INPUT, Inputs.PERIOD }));    desc.declarePath(Values.AVG1, Inputs.PATH);    desc.declarePath(Values.AVG2, Inputs.PATH2);    desc.declarePath(Values.AVG3, Inputs.PATH3);    desc.declarePath(Values.AVG4, Inputs.PATH4);    desc.declarePath(Values.AVG5, PATH5);    desc.declarePath(Values.AVG6, PATH6);    desc.declarePath(Values.AVG7, PATH7);    desc.declarePath(Values.AVG8, PATH8);    desc.declarePath(Values.AVG9, PATH9);    desc.declarePath(Values.AVG10, PATH10);    desc.declareIndicator(Values.AVG1, Inputs.IND);    desc.setRangeKeys(Values.AVG1, Values.AVG2, Values.AVG3, Values.AVG4, Values.AVG5, Values.AVG6, Values.AVG7,        Values.AVG8, Values.AVG9, Values.AVG10);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1 * 10);  }}