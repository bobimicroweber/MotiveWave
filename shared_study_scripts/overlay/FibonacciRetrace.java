package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Fibonacci Retrace 092 */@StudyHeader(  namespace="com.motivewave",  id="ID_FBCR",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_FIBONACCI_RETRACE",  label="LBL_FBCR",  desc="DESC_FBCR",  helpLink="http://www.motivewave.com/studies/fibonacci_retrace.htm",  requiresVolume=false,  signals=false,  overlay=true,  studyOverlay=true)public class FibonacciRetrace extends Study{  final static String RETRACE="Retrace", IND3="Ind3";  enum Values { MA, HRET, LRET }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.EMA));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("MA_PERIOD"), 15, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("H_L_PERIOD"), 50, 1, 999, 1));    inputs.addRow(new DoubleDescriptor(RETRACE, get("RET_FAC"), 0.382, 0.01, 1.0, 0.01));    tab=sd.addTab(get("TAB_DISPLAY"));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("MA"), defaults.getLineColor(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("HIGH_RETRACE"), defaults.getRed(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(Inputs.PATH3, get("LOW_RETRACE"), defaults.getGreen(), 1.0f, null, true, true, true));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("MA"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("HIGH_RETRACE"), defaults.getRed(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(IND3, get("LOW_RETRACE"), defaults.getGreen(), null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.METHOD, Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("MA_PERIOD"), 15, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("H_L_PERIOD"), 50, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(RETRACE, Inputs.PATH, Inputs.PATH2, Inputs.PATH3);    var desc=createRD();    desc.setLabelSettings(Inputs.METHOD, Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2, RETRACE);    desc.exportValue(new ValueDescriptor(Values.MA, get("MA"), new String[] { Inputs.METHOD, Inputs.INPUT, Inputs.PERIOD }));    desc.exportValue(new ValueDescriptor(Values.HRET, get("HIGH_RETRACE"), new String[] { Inputs.METHOD, Inputs.PERIOD2, RETRACE }));    desc.declarePath(Values.MA, Inputs.PATH);    desc.declarePath(Values.HRET, Inputs.PATH2);    desc.declarePath(Values.LRET, Inputs.PATH3);    desc.declareIndicator(Values.MA, Inputs.IND);    desc.declareIndicator(Values.HRET, Inputs.IND2);    desc.declareIndicator(Values.LRET, IND3);    desc.setRangeKeys(Values.MA, Values.HRET, Values.LRET);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars(Math.max(p1, p2));  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period1=getSettings().getInteger(Inputs.PERIOD);    int period2=getSettings().getInteger(Inputs.PERIOD2);    int longestPeriod=Math.max(period1, period2);    if (index < longestPeriod) return;    var method=getSettings().getMAMethod(Inputs.METHOD);    Object input=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    double retfac=getSettings().getDouble(RETRACE);    var series=ctx.getDataSeries();    Double ma=series.ma(method, index, period1, input);    series.setDouble(index, Values.MA, ma);    double highest=series.highest(index, period2, Enums.BarInput.HIGH);    double lowest=series.lowest(index, period2, Enums.BarInput.LOW);    double retrace=(highest - lowest) * retfac;    double hret=highest - retrace;    series.setDouble(index, Values.HRET, hret);    double lret=lowest + retrace;    series.setDouble(index, Values.LRET, lret);    series.setComplete(index);  }}