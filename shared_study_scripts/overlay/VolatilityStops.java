package com.motivewave.platform.study.overlay;import java.awt.Font;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.FontDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Label;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Volatility Stops 166 */@StudyHeader(  namespace="com.motivewave",  id="ID_VOLSTOP",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_VOLSTOP",  name="NAME_VOLATILITY_STOPS",  desc="DESC_VOLSTOP",  helpLink="http://www.motivewave.com/studies/volatility_stops.htm",  signals=true,  overlay=true,  studyOverlay=true)public class VolatilityStops extends Study{  final static String[] POSITION= { "Long", "Short" };  final static String FAC="Fac", PATH1="Path1", PATH2="Path2";  enum Values { VSTOP, MA }  protected enum Signals { SELL, BUY }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT2, get("POSITION"), POSITION, POSITION[0]));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.EMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("MA_PERIOD"), 63, 1, 9999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("ATR_PERIOD"), 21, 1, 9999, 1));    inputs.addRow(new DoubleDescriptor(FAC, get("FACTOR"), 2, 1, 4.1, .1));    inputs.addRow(new FontDescriptor(Inputs.FONT, get("FONT"), defaults.getFont()));    tab=sd.addTab(get("TAB_DISPLAY"));    var settings=tab.addGroup(get("PATHS"));    var path=new PathDescriptor(PATH1, get("LONG"), defaults.getBlue(), Enums.PointType.DOT, Enums.Size.SMALL, true, true, false);    path.setSupportsMaxPoints(true);    path.setSupportsColorPolicy(false);    settings.addRow(path);    path=new PathDescriptor(PATH2, get("SHORT"), defaults.getPurple(), Enums.PointType.DOT, Enums.Size.SMALL, true, true, false);    path.setSupportsMaxPoints(true);    path.setSupportsColorPolicy(false);    settings.addRow(path);    settings.addRow(new PathDescriptor(Inputs.PATH2, get("MA"), defaults.getRed(), 1.0f, null, true, false, true));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("LBL_VOLSTOP"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("MA"), defaults.getRed(), null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT2, Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("MA_PERIOD"), 63, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("ATR_PERIOD"), 21, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(FAC, PATH1, PATH2);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT2, Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2, FAC);    desc.exportValue(new ValueDescriptor(Values.MA, get("LBL_CHEXITS"), new String[] { Inputs.INPUT2, Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2, FAC }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.VSTOP, Inputs.PATH);    desc.declarePath(Values.MA, Inputs.PATH2);    desc.declareIndicator(Values.VSTOP, Inputs.IND);    desc.declareIndicator(Values.MA, Inputs.IND2);    desc.setRangeKeys(Values.VSTOP, Values.MA);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars(Math.max(p1, p2));  }  @Override  protected void calculate(int index, DataContext ctx)  {    int maP=getSettings().getInteger(Inputs.PERIOD);    int atrP=getSettings().getInteger(Inputs.PERIOD2);    if (index < Math.max(maP, atrP)) return;    String pos=(String) getSettings().getInput(Inputs.INPUT2, POSITION[0]);    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var method=getSettings().getMAMethod(Inputs.METHOD);    double fac=getSettings().getDouble(FAC);    var fi=getSettings().getFont(Inputs.FONT);    Font f=fi.getFont();    var pth1=getSettings().getPath(PATH1);    var pth2=getSettings().getPath(PATH2);    boolean longP=pos == "Long";    boolean shortP=pos == "Short";    if (longP) getSettings().setPath(Inputs.PATH, pth1);    if (shortP) getSettings().setPath(Inputs.PATH, pth2);    var series=ctx.getDataSeries();    boolean upTrend=false, dnTrend=false;    double vstop=0;    double sic=0, atrUp=0, atrDn=0;    Double ma=series.ma(method, index, maP, key);    if (ma == null) return;    series.setDouble(index, Values.MA, ma);    double price=series.getDouble(index, key, 0);    upTrend=price > ma;    dnTrend=price <= ma;    if (longP && upTrend) {      atrUp=series.atr(index, atrP);      sic=series.highest(index, atrP, key);      vstop=sic - (fac * atrUp);    }    if (shortP && dnTrend) {      atrDn=series.atr(index, atrP);      sic=series.lowest(index, atrP, key);      vstop=sic + (fac * atrDn);    }    if (vstop != 0) series.setDouble(index + 1, Values.VSTOP, vstop);    series.setComplete(index);    // Check for signal events    var defaults=ctx.getDefaults();    double prevP=series.getDouble(index - 1, key, 0);    boolean sell=false, buy=false;    if (vstop != 0) {      sell=prevP > vstop && price < vstop && longP && upTrend;      buy=prevP < vstop && price > vstop && shortP && dnTrend;    }    series.setBoolean(index, Signals.BUY, buy);    series.setBoolean(index, Signals.SELL, sell);    if (sell) {      var c=new Coordinate(series.getStartTime(index + 1), price);      var lbl=new Label(get("EXIT_SELL"), f, defaults.getTextColor(), defaults.getRed());      lbl.setLocation(c);      addFigure(lbl);      ctx.signal(index, Signals.SELL, get("EXIT_SELL_PRICE_VSTOP", Util.round(price, 2), Util.round(vstop, 3)), price);    }    if (buy) {      var c=new Coordinate(series.getStartTime(index + 1), price);      var lbl=new Label(get("EXIT_BUY"), f, defaults.getTextColor(), defaults.getGreen());      lbl.setLocation(c);      addFigure(lbl);      ctx.signal(index, Signals.BUY, get("EXIT_BUY_PRICE_VSTOP", Util.round(price, 2), Util.round(vstop, 3)), price);    }  }}