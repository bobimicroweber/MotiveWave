package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** VIDYA1 Standard Deviation indicator 029 */@StudyHeader(  namespace="com.motivewave",  id="ID_VIDYA1",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_VIDYA1_INDICATOR",  label="LBL_VIDYA1",  desc="DESC_VIDYA1",  menu="MENU_TUSHAR_CHANDE",  helpLink="http://www.motivewave.com/studies/vidya1_indicator.htm",  requiresVolume=false,  signals=false,  overlay=true,  studyOverlay=true)public class VIDYA1 extends Study{  final static String ALPHA="Alpha";  enum Values { STD_DEV, VIDYA1 }  @Override  public void initialize(Defaults defaults)  {    var sd = createSD();    var tab = sd.addTab(get("TAB_GENERAL"));    var inputs = tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.SMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 5, 1, 999, 1));    inputs.addRow(new DoubleDescriptor(ALPHA, get("ALPHA"), .2, .01, 1, .01));    var settings = tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_VIDYA1"), defaults.getLineColor(), 1.0f, null, true, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("LBL_PERIOD"), 5, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(ALPHA, Inputs.PATH);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, ALPHA);    desc.exportValue(new ValueDescriptor(Values.VIDYA1, get("LBL_VIDYA1"), new String[] { Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, ALPHA }));    desc.declarePath(Values.VIDYA1, Inputs.PATH);    desc.declareIndicator(Values.VIDYA1, Inputs.IND);    desc.setRangeKeys(Values.VIDYA1);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1 * 2);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period=getSettings().getInteger(Inputs.PERIOD);    if (index < period) return;    Object input=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var method=getSettings().getMAMethod(Inputs.METHOD);    double alpha=getSettings().getDouble(ALPHA);    var series=ctx.getDataSeries();    double stdDev=series.std(index, period, input);    series.setDouble(index, Values.STD_DEV, stdDev);    if (index < period * 2) return;    double price=series.getDouble(index, input, 0);    Double avStdDev=series.ma(method, index, period, Values.STD_DEV);    if (avStdDev == null) return;    double prevVidya=series.getDouble(index - 1, Values.VIDYA1, price); // first time will yield price    double ratio=0.0;    if (avStdDev > 0.0) ratio=stdDev / avStdDev;    double vidya=(alpha * ratio * price) + ((1 - (alpha * ratio)) * prevVidya);    series.setDouble(index, Values.VIDYA1, vidya);    series.setComplete(index);  }}