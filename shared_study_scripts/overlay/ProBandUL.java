package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;import com.motivewave.platform.study.general.Utility;/** Projection Band Upper/Lower Mel Widner 033 */@StudyHeader(  namespace="com.motivewave",  id="ID_PBUL",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_PROJECTION_BAND_UL",  label="LBL_PBUL",  desc="DESC_PBUL",  helpLink="http://www.motivewave.com/studies/projection_band_ul.htm",  signals=true,  overlay=true,  studyOverlay=true)public class ProBandUL extends Study{  enum Values { V_HIGH, V_LOW, M_HIGH, M_LOW, COUNT, PL, PU }  protected enum Signals { BUY, SELL }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 14, 1, 999, 1));    var colors=tab.addGroup(get("PATHS"));    colors.addRow(new PathDescriptor(Inputs.PATH, get("TOP"), defaults.getRed(), 1.0f, null, true, true, true));    colors.addRow(new PathDescriptor(Inputs.PATH2, get("BOTTOM"), defaults.getGreen(), 1.0f, null, true, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    colors=tab.addGroup(get("INDICATORS"));    colors.addRow(new IndicatorDescriptor(Inputs.IND, get("TOP"), defaults.getRed(), null, false, true, true));    colors.addRow(new IndicatorDescriptor(Inputs.IND2, get("BOTTOM"), defaults.getGreen(), null, false, true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 14, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.PATH2);    var desc=createRD();    desc.setLabelSettings(Inputs.PERIOD);    desc.exportValue(new ValueDescriptor(Values.PL, get("PL"), new String[] { Inputs.PERIOD }));    desc.exportValue(new ValueDescriptor(Values.PU, get("PU"), new String[] { Inputs.PERIOD }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.PU, Inputs.PATH);    desc.declarePath(Values.PL, Inputs.PATH2);    desc.declareIndicator(Values.PU, Inputs.IND);    desc.declareIndicator(Values.PL, Inputs.IND2);    desc.setRangeKeys(Values.PU, Values.PL);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period=getSettings().getInteger(Inputs.PERIOD);    if (index < period) return;    var series=ctx.getDataSeries();    int count=0;    double pu=0, pl=Double.MAX_VALUE;    double mHigh=Utility.linRegLine(series, index, period, Enums.BarInput.HIGH, 0)[1];    double mLow=Utility.linRegLine(series, index, period, Enums.BarInput.LOW, 0)[1];    for (int i=(index - period + 1); i <= index; i++) // move back 1 period    {      double prevHigh=series.getDouble(i - 1, Enums.BarInput.HIGH, 0.0);      double prevLow=series.getDouble(i - 1, Enums.BarInput.LOW, 0.0);      double vHigh=prevHigh + (mHigh * (count));      double vLow=prevLow + (mLow * (count));      if (vHigh > pu) pu=vHigh;      if (vLow < pl) pl=vLow;      count++;    }    series.setDouble(index, Values.PL, pl);    series.setDouble(index, Values.PU, pu);    // start signals    double high=series.getHigh(index);    double low=series.getLow(index);    boolean sell=high > pu;    boolean buy=low < pl;    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      var c=new Coordinate(series.getStartTime(index), high);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_PBUB_HIGH", high);      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, high);    }    if (buy) {      var c=new Coordinate(series.getStartTime(index), low);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_PBLB_LOW", low);      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, low);    }    // end Signals    series.setComplete(index);  }}