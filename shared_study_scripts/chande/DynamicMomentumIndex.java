package com.motivewave.platform.study.chande;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.DataSeries;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.GuideInfo;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.MarkerInfo;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Dynamic Momentum Index 048 */@StudyHeader(  namespace="com.motivewave",  id="ID_DMI",  rb="com.motivewave.platform.study.nls.strings2",  desc="DESC_DMI",  name="NAME_DYNAMIC_MOMENTUM_INDEX",  label="LBL_DMI",  menu="MENU_TUSHAR_CHANDE",  helpLink="http://www.motivewave.com/studies/dynamic_momentum_index.htm",  signals=true,  overlay=false,  studyOverlay=true)public class DynamicMomentumIndex extends Study{  final static String PERIOD5="period5";  enum Values { STD_DEV, DMI, UP, DOWN };  protected enum Signals { SELL, BUY };  double highSell=Double.NEGATIVE_INFINITY;  double lowBuy=Double.MAX_VALUE;  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("STANDARD_DEVIATION_PERIOD"), 5, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("STDANDARD_DEVIATION_AVERAGE_PERIOD"), 10, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD3, get("RSI_PERIOD"), 14, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD4, get("UPPER_LIMIT"), 30, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(PERIOD5, get("LOWER_LIMIT"), 5, 1, 999, 1));    var settings=tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_DMI"), defaults.getLineColor(), 1.0f, null, true, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), null, null, false, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    var guides=tab.addGroup(get("GUIDES"));    var topDesc=new GuideDescriptor(Inputs.TOP_GUIDE, get("TOP_GUIDE"), 60, 0, 100.01, .01, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 50, 0, 100.01, .01, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var bottomDesc=new GuideDescriptor(Inputs.BOTTOM_GUIDE, get("BOTTOM_GUIDE"), 40, 0, 100.01, .01, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("STANDARD_DEVIATION_PERIOD"), 5, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("STDANDARD_DEVIATION_AVERAGE_PERIOD"), 100, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD3, get("RSI_PERIOD"), 14, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD4, get("UPPER_LIMIT"), 30, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(PERIOD5, get("LOWER_LIMIT"), 5, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3, Inputs.PERIOD4, PERIOD5);    desc.exportValue(new ValueDescriptor(Values.DMI, get("LBL_DMI"), new String[] { Inputs.INPUT, Inputs.PERIOD,        Inputs.PERIOD2, Inputs.PERIOD3, Inputs.PERIOD4, PERIOD5 }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declarePath(Values.DMI, Inputs.PATH);    desc.declareIndicator(Values.DMI, Inputs.IND);    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.setRangeKeys(Values.DMI);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    int p3=getSettings().getInteger(Inputs.PERIOD3);    int p4=getSettings().getInteger(Inputs.PERIOD4);    int p5=getSettings().getInteger(PERIOD5);    setMinBars(p1 + p2 + Math.max(Math.max(p3, p4), p5));  }  @Override  protected void calculate(int index, DataContext ctx)  {    int sdPeriod=getSettings().getInteger(Inputs.PERIOD);    int avSdPeriod=getSettings().getInteger(Inputs.PERIOD2);    int rsiPeriod=getSettings().getInteger(Inputs.PERIOD3);    int upLimit=getSettings().getInteger(Inputs.PERIOD4);    int loLimit=getSettings().getInteger(PERIOD5);    if (index < sdPeriod) return;    Object input=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    DataSeries series=ctx.getDataSeries();    double price=series.getDouble(index, input, 0);    double stdDev=series.std(index, sdPeriod, input);    series.setDouble(index, Values.STD_DEV, stdDev);    if (index < sdPeriod + avSdPeriod + Math.max(Math.max(rsiPeriod, upLimit), loLimit)) return;    Double avSd=series.sma(index, avSdPeriod, Values.STD_DEV);    if (avSd == null) return;    int dTime=(int) Math.round(rsiPeriod / (avSd/stdDev)); // period dependent on average of stdDev.    int lenDmi=Math.max(Math.min(dTime, upLimit), loLimit); // determine period length.        // RSI calculation    double diff=series.getDouble(index, input) - series.getDouble(index - 1, input);    double up=0, down=0;    if (diff > 0) up=diff;    else down=diff;    series.setDouble(index, Values.UP, up);    series.setDouble(index, Values.DOWN, Math.abs(down));    if (index < lenDmi + sdPeriod + avSdPeriod + Math.max(Math.max(rsiPeriod, upLimit), loLimit)) return;    Double avgUp=series.ma(Enums.MAMethod.EMA, index, lenDmi, Values.UP);    if (avgUp == null) return;    Double avgDown=series.ma(Enums.MAMethod.EMA, index, lenDmi, Values.DOWN);    if (avgDown == null) return;    double rs=avgUp / avgDown;    double dmi=100.0 - (100.0 / (1.0 + rs));    series.setDouble(index, Values.DMI, dmi);    // Check for signal events    GuideInfo topGuide=getSettings().getGuide(Inputs.TOP_GUIDE);    double topG=topGuide.getValue();    GuideInfo bottomGuide=getSettings().getGuide(Inputs.BOTTOM_GUIDE);    double bottG=bottomGuide.getValue();    double prevDmi=series.getDouble(index - 1, Values.DMI, 0.0);    boolean sell=(dmi > topG) && (prevDmi > dmi) && (dmi > highSell); // peaked above topG    boolean buy=(dmi < bottG && prevDmi < dmi) && (dmi < lowBuy); // trough below bottG    boolean wasBuy = index == series.size()-1 && series.getBoolean(index, Signals.BUY, false);    boolean wasSell = index == series.size()-1 && series.getBoolean(index, Signals.SELL, false);    series.setBoolean(index, Signals.BUY, buy);    series.setBoolean(index, Signals.SELL, sell);    if (sell) {      lowBuy=Double.MAX_VALUE;      highSell=dmi;      Coordinate c=new Coordinate(series.getStartTime(index), dmi);      MarkerInfo marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_PRICE_DMI", Util.round(price, 2), Util.round(dmi, 3));      if (!wasSell && marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, price);    }    if (buy) {      highSell=Double.NEGATIVE_INFINITY;      lowBuy=dmi;      Coordinate c=new Coordinate(series.getStartTime(index), dmi);      MarkerInfo marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_PRICE_DMI", Util.round(price, 2), Util.round(dmi, 3));      if (!wasBuy && marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, price);    }    series.setComplete(index);  }}