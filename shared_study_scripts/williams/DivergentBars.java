package com.motivewave.platform.study.williams;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Divergent Bars (Bill Williams) 008*/@StudyHeader(    namespace = "com.motivewave",    id = "ID_DIV_BARS",    rb = "com.motivewave.platform.study.nls.strings2",    name = "NAME_DIVERGENT_BARS",    desc = "DESC_DIVERGENT",    menu = "MENU_BILL_WILLIAMS",    helpLink = "http://www.motivewave.com/studies/divergent_bars.htm",    signals = true,    overlay = true,    studyOverlay=true)public class DivergentBars extends Study {	enum Signals { BULL, BEAR }	@Override	public void initialize(Defaults defaults) 	{		var sd = createSD();		var tab = sd.addTab(get("TAB_GENERAL"));		var grp = tab.addGroup(get("MARKERS"));		grp.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"),	Enums.MarkerType.TRIANGLE, Enums.Size.VERY_SMALL,		    defaults.getGreen(), defaults.getLineColor(), true, true));		grp.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER,	get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE, Enums.Size.VERY_SMALL,		    defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.UP_MARKER, Inputs.DOWN_MARKER);		var desc = createRD();	  desc.exportValue(new ValueDescriptor(Signals.BULL, Enums.ValueType.BOOLEAN, get("BULL"), null));		desc.exportValue(new ValueDescriptor(Signals.BEAR, Enums.ValueType.BOOLEAN, get("BEAR"), null));		desc.declareSignal(Signals.BULL, get("BULL"));		desc.declareSignal(Signals.BEAR, get("BEAR"));		setMinBars(20);	}	@Override	protected synchronized void calculate(int index, DataContext ctx) 	{		var series = ctx.getDataSeries();		if (!series.isBarComplete(index))	return;		double currentLow = series.getLow(index);		double currentHigh = series.getHigh(index);		float currentClose = series.getClose(index);		double prevLow = series.getLow(index - 1);		double prevHigh = series.getHigh(index - 1);		double currentAverage = (currentHigh + currentLow) / 2;		boolean buy = (currentLow < prevLow && currentClose > currentAverage); 		boolean sell = (currentHigh > prevHigh && currentClose < currentAverage);		    series.setBoolean(index, Signals.BEAR, sell);    series.setBoolean(index, Signals.BULL, buy);    		if (sell) {			var c = new Coordinate(series.getStartTime(index),	series.getHigh(index));      var marker = getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("DIVERGENT_BEAR_CLOSING_PRICE", currentClose);	    if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));	    ctx.signal(index, Signals.BEAR,	msg, currentClose);		}    if (buy) {      var c = new Coordinate(series.getStartTime(index), series.getLow(index));      var marker = getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("DIVERGENT_BULL_CLOSING_PRICE", currentClose);      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BULL, msg, currentClose);    }		series.setComplete(index);	}}