package com.motivewave.platform.study.williams;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.X11Colors;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** ABillW_3Lines 022 */@StudyHeader(    namespace="com.motivewave",     id="ID_ABW_3LINES",     rb="com.motivewave.platform.study.nls.strings2",    name="NAME_THREE_LINES",     menu="MENU_BILL_WILLIAMS",    desc="DESC_ABW3L",    label="LBL_ABW3L",    helpLink = "http://www.motivewave.com/studies/three_lines.htm",    overlay=true,    studyOverlay=true)public class Abillw3Lines extends Study{  final static String PERIOD1 = "Period1";  final static String PERIOD2 = "Period2";  final static String PERIOD3 = "Period3";  final static String PERIOD4 = "Period4";  final static String PERIOD5 = "Period5";  final static String PERIOD6 = "Period6";  enum Values {MEDIAN, LINE1, LINE2, LINE3 }  @Override  public void initialize(Defaults defaults)  {    var sd = createSD();    var tab = sd.addTab(get("TAB_GENERAL"));    var inputs = tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.MIDPOINT));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.SMA));    inputs.addRow(new IntegerDescriptor(PERIOD1, get("PERIOD1"), 13, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(PERIOD4, get("DISPLACE1"), 8, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(PERIOD2, get("PERIOD2"), 8, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(PERIOD5, get("DISPLACE2"), 5, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(PERIOD3, get("PERIOD3"), 5, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(PERIOD6, get("DISPLACE3"), 3, 1, 999, 1));    tab = sd.addTab(get("TAB_DISPLAY"));      var colors = tab.addGroup(get("PATHS"));    colors.addRow(new PathDescriptor(Inputs.PATH, get("PATH1"), defaults.getRed(), 1.0f, null, true, true, true));    colors.addRow(new PathDescriptor(Inputs.PATH2, get("PATH2"), defaults.getLineColor(), 1.0f, null, true, true, true));    colors.addRow(new PathDescriptor(Inputs.PATH3, get("PATH3"), defaults.getGreen(), 1.0f, null, true, true, true));         colors = tab.addGroup(get("INDICATORS"));    colors.addRow(new IndicatorDescriptor(Inputs.IND, get("IND1"), defaults.getRed(), X11Colors.WHITE, false, true, true));    colors.addRow(new IndicatorDescriptor(Inputs.IND2, get("IND2"), defaults.getLineColor(), X11Colors.WHITE, false, true, true));    colors.addRow(new IndicatorDescriptor("IND3", get("IND3"), defaults.getGreen(), X11Colors.WHITE, false, true, true));      // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(PERIOD1, get("PERIOD1"), 13, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(PERIOD4, get("DISPLACE1"), 8, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(PERIOD2, get("PERIOD2"), 8, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(PERIOD5, get("DISPLACE2"), 5, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(PERIOD3, get("PERIOD3"), 5, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(PERIOD6, get("DISPLACE3"), 3, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.PATH2, Inputs.PATH3);    var desc = createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, PERIOD1, PERIOD2, PERIOD3, PERIOD4, PERIOD5, PERIOD6);      desc.exportValue(new ValueDescriptor(Values.LINE1, get("ABWL1"), new String[] {Inputs.INPUT, Inputs.METHOD, PERIOD1, PERIOD4}));    desc.exportValue(new ValueDescriptor(Values.LINE2, get("ABWL2"), new String[] {Inputs.INPUT, Inputs.METHOD, PERIOD2, PERIOD5}));    desc.exportValue(new ValueDescriptor(Values.LINE3, get("ABWL3"), new String[] {Inputs.INPUT, Inputs.METHOD, PERIOD3, PERIOD6}));    desc.declarePath(Values.LINE1, Inputs.PATH);    desc.declarePath(Values.LINE2, Inputs.PATH2);    desc.declarePath(Values.LINE3, Inputs.PATH3);         desc.declareIndicator(Values.LINE1, Inputs.IND);    desc.declareIndicator(Values.LINE2, Inputs.IND2);    desc.declareIndicator(Values.LINE3, "IND3");    desc.setRangeKeys(Values.LINE1, Values.LINE2, Values.LINE3);    }  @Override  public void onLoad(Defaults defaults)  {    int p1 = getSettings().getInteger(PERIOD1);    int p2 = getSettings().getInteger(PERIOD2);    int p3 = getSettings().getInteger(PERIOD3);    int p4 = getSettings().getInteger(PERIOD4);    int p5 = getSettings().getInteger(PERIOD5);    int p6 = getSettings().getInteger(PERIOD6);    setMinBars (Math.max(Math.max(p1+p4, p2+p5), p3+p6));  }    @Override  public void calculate(int index, DataContext ctx)  {    int p1 = getSettings().getInteger(PERIOD1);    int p2 = getSettings().getInteger(PERIOD2);    int p3 = getSettings().getInteger(PERIOD3);    int d1 = getSettings().getInteger(PERIOD4);    int d2 = getSettings().getInteger(PERIOD5);    int d3 = getSettings().getInteger(PERIOD6);    int longPeriod = Math.max(Math.max(p1+d1, p2+d2), p3+d3);    var series = ctx.getDataSeries();    Object input = getSettings().getInput(Inputs.INPUT, Enums.BarInput.MIDPOINT);    if (index < longPeriod) return;     var method = getSettings().getMAMethod(Inputs.METHOD);    Double line1 = series.ma(method, index-d1, p1, input);    Double line2 = series.ma(method, index-d2, p2, input);    Double line3 = series.ma(method, index-d3, p3, input);     series.setDouble(index, Values.LINE1, line1);    series.setDouble(index, Values.LINE2, line2);    series.setDouble(index, Values.LINE3, line3);    series.setComplete(index);    }}