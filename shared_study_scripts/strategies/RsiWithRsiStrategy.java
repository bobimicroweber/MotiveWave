package com.motivewave.platform.study.strategies;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.DataSeries;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.GuideInfo;import com.motivewave.platform.sdk.common.Instrument;import com.motivewave.platform.sdk.common.MarkerInfo;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.order_mgmt.OrderContext;import com.motivewave.platform.sdk.study.Plot;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;import com.motivewave.platform.study.general.Utility;import com.motivewave.platform.study.general3.Str;import com.motivewave.platform.study.strategies.Account.Signal;@StudyHeader(  namespace="com.motivewave",  rb="com.motivewave.platform.study.nls.strings2",  id="RSI_WITH_RSI",  name="NAME_RSI_WITH_RSI_STRATEGY",  desc="DESC_RSI_WITH_RSI",  menu="MENU_GENERAL",  helpLink="http://www.motivewave.com/strategies/rsi_with_rsi_strategy.htm",  overlay=false,  signals=true,  strategy=true,  autoEntry=true,  manualEntry=false,  supportsEnterOnActivate=false,  supportsUnrealizedPL=true,  supportsRealizedPL=true,  supportsTotalPL=true,  supportsPositionType=false)public class RsiWithRsiStrategy extends Study{  final static String RSI_QUICK_PLOT="RsiQuickPlot";  enum Values { UP, DOWN, RSI_SLOW, RSI_QUICK, MA_SLOW, MA_QUICK, B01, B02, B03, B04, B05, B06 }  Marker activeMarker=null;  long activationTime=0;  Account accSlow=new Account(Account.PosType.LONG, Account.OrdType.MARKET, Account.CLOSED);  Account accQuick=new Account(Account.PosType.SAR, Account.OrdType.MARKET, Account.CLOSED); // use stop and reverse  boolean slowSig=false;  boolean quickSig=false;  double price=0.0;  @Override  public void initialize(Defaults defaults)  {    Account.studyThis=this; // give Account access to get(str);    var sd=createSD();    var tab=sd.addTab(get("INPUTS"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Str.INPUT2, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Str.METHOD1, get("RSI_METHOD"), Enums.MAMethod.SMMA));    inputs.addRow(new IntegerDescriptor(Str.PERIOD1, get("RSI_SLOW_PERIOD"), 17, 1, 9999, 1));    inputs.addRow(new IntegerDescriptor(Str.PERIOD2, get("RSI_QUICK_PERIOD"), 5, 1, 9999, 1));    inputs.addRow(new MAMethodDescriptor(Str.METHOD2, get("MA_METHOD"), Enums.MAMethod.SMA));    inputs.addRow(new IntegerDescriptor(Str.PERIOD3, get("MA_SLOW_PERIOD"), 40, 1, 9999, 1));    inputs.addRow(new IntegerDescriptor(Str.PERIOD4, get("MA_QUICK_PERIOD"), 10, 1, 9999, 1));    tab=sd.addTab(get("COLORS"));    var lines=tab.addGroup(get("PATHS_AND_INDICATORS"));    lines.addRow(new PathDescriptor(Str.PATH1, get("RSI_SLOW_PATH"), defaults.getLineColor(), 1.0f, null));    lines.addRow(new PathDescriptor(Str.PATH2, get("RSI_QUICK_PATH"), defaults.getRed(), 1.0f, null));    lines.addRow(new PathDescriptor(Str.PATH3, get("MA_SLOW_PATH"), defaults.getLineColor(), 1.0f, null));    lines.addRow(new PathDescriptor(Str.PATH4, get("MA_QUICK_PATH"), defaults.getRed(), 1.0f, null));    lines.addRow(new IndicatorDescriptor(Str.IND1, get("RSI_SLOW_IND"), defaults.getLineColor(), null, false, true, true));    lines.addRow(new IndicatorDescriptor(Str.IND2, get("RSI_QUICK_IND"), defaults.getRed(), null, false, true, true));    lines.addRow(new IndicatorDescriptor(Str.IND3, get("MA_SLOW_IND"), defaults.getLineColor(), null, false, true, true));    lines.addRow(new IndicatorDescriptor(Str.IND4, get("MA_QUICK_IND"), defaults.getRed(), null, false, true, true));    tab=sd.addTab(get("GUIDES"));    var guides=tab.addGroup(get("RSI_SLOW_GUIDES"));    var topDesc=new GuideDescriptor(Str.TOP_GUIDE1, get("TOP_GUIDE"), 61, 0, 999.1, .1, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    var mg=new GuideDescriptor(Str.MID_GUIDE1, get("MIDDLE_GUIDE"), 50, 0, 999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var bottomDesc=new GuideDescriptor(Str.BOTT_GUIDE1, get("BOTTOM_GUIDE"), 39, 0, 999.1, .1, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    guides=tab.addGroup(get("RSI_QUICK_GUIDES"));    topDesc=new GuideDescriptor(Str.TOP_GUIDE2, get("TOP_GUIDE"), 61, 0, 999.1, .1, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    mg=new GuideDescriptor(Str.MID_GUIDE2, get("MIDDLE_GUIDE"), 50, 0, 999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    bottomDesc=new GuideDescriptor(Str.BOTT_GUIDE2, get("BOTTOM_GUIDE"), 39, 0, 999.1, .1, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    tab=sd.addTab(get("SHADING"));    var shades=tab.addGroup(get("RSI_SLOW_SHADING"));    shades.addRow(new ShadeDescriptor(Str.TOP_FILL1, get("TOP_FILL"), Str.MID_GUIDE1, Str.PATH1, Enums.ShadeType.ABOVE,        defaults.getTopFillColor(), true, true));    shades.addRow(new ShadeDescriptor(Str.BOTT_FILL1, get("BOTTOM_FILL"), Str.MID_GUIDE1, Str.PATH1,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    shades=tab.addGroup(get("RSI_QUICK_SHADING"));    shades.addRow(new ShadeDescriptor(Str.TOP_FILL2, get("TOP_FILL"), Str.MID_GUIDE2, Str.PATH2, Enums.ShadeType.ABOVE,        defaults.getTopFillColor(), true, true));    shades.addRow(new ShadeDescriptor(Str.BOTT_FILL2, get("BOTTOM_FILL"), Str.MID_GUIDE2, Str.PATH2,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    tab=sd.addTab(get("MARKERS"));    var markers=tab.addGroup("Markers");    markers.addRow(new MarkerDescriptor(Str.ENTER_LONG_MARK1, get("ENTER_LONG_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Str.EXIT_LONG_MARK1, get("EXIT_LONG_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Str.ACTIVE1, get("ACTIVE"), Enums.MarkerType.CIRCLE, Enums.Size.MEDIUM,        defaults.getGreen(), defaults.getLineColor(), true, true));    var desc=createRD();    desc.exportValue(new ValueDescriptor(Values.RSI_SLOW, get("RSI_SLOW"), new String[] { Str.INPUT1, Str.PERIOD1 }));    desc.exportValue(new ValueDescriptor(Values.RSI_QUICK, get("RSI_QUICK"), new String[] { Str.INPUT1, Str.PERIOD2 }));    desc.exportValue(new ValueDescriptor(Values.MA_SLOW, get("MA_SLOW"), new String[] { Str.INPUT1, Str.METHOD2, Str.PERIOD3 }));    desc.exportValue(new ValueDescriptor(Values.MA_QUICK, get("MA_QUICK"), new String[] { Str.INPUT1, Str.METHOD2, Str.PERIOD4 }));    desc.declareSignal(Signal.BUY, get("BUY"));    desc.declareSignal(Signal.SELL, get("SELL"));    // Price plot (moving average)    desc.getPricePlot().setLabelSettings(Str.METHOD2, Str.PERIOD3, Str.PERIOD4);    desc.getPricePlot().setLabelPrefix(get("MA"));    desc.getPricePlot().declarePath(Values.MA_SLOW, Str.PATH3);    desc.getPricePlot().declarePath(Values.MA_QUICK, Str.PATH4);    desc.getPricePlot().declareIndicator(Values.MA_SLOW, Str.IND3);    desc.getPricePlot().declareIndicator(Values.MA_QUICK, Str.IND4);    desc.getPricePlot().setRangeKeys(Values.MA_QUICK, Values.MA_SLOW);    // Default Plot (RSI_SLOW)    desc.setLabelSettings(Str.METHOD1, Str.PERIOD1);    desc.setLabelPrefix(get("RSI_SLOW"));    desc.setTabName(get("RSI_SLOW"));    desc.declarePath(Values.RSI_SLOW, Str.PATH1);    desc.declareIndicator(Values.RSI_SLOW, Str.PATH1);    desc.setRangeKeys(Values.RSI_SLOW);    // RSI_QUICK Plot    Plot rsiqPlot=new Plot();    desc.addPlot(RSI_QUICK_PLOT, rsiqPlot);    rsiqPlot.setLabelSettings(Str.METHOD1, Str.PERIOD2);    rsiqPlot.setLabelPrefix(get("RSI_QUICK"));    rsiqPlot.setTabName(get("RSI_QUICK"));    rsiqPlot.declarePath(Values.RSI_QUICK, Str.PATH2);    rsiqPlot.declareIndicator(Values.RSI_QUICK, Str.PATH2);    rsiqPlot.setRangeKeys(Values.RSI_QUICK);    rsiqPlot.declareGuide(Str.TOP_GUIDE2);    rsiqPlot.declareGuide(Str.MID_GUIDE2);    rsiqPlot.declareGuide(Str.BOTT_GUIDE2);    rsiqPlot.setMaxBottomValue(15);    rsiqPlot.setMinTopValue(85);    rsiqPlot.setMinTick(0.1);  }  @Override  public void onDeactivate(OrderContext ctx)  {    activationTime=0;    accSlow.close(ctx);    accQuick.close(ctx);    // setState(Enums.StrategyState.INACTIVE);    super.onDeactivate(ctx);    removeFigure(activeMarker);    DataContext dctx=ctx.getDataContext();    DataSeries series=dctx.getDataSeries();    int lastIndex=series.size() - 1;    // call calculate to display hypothetical past signals    for (int i=0; i < lastIndex; i++) {      calculate(i, dctx);    }  }  @Override  public void onActivate(OrderContext ctx)  {    DataSeries series=ctx.getDataContext().getDataSeries();    int ind=Utility.iif(series.isLastBarComplete(), series.size() - 1, series.size() - 2);    activationTime=series.getStartTime(ind);    accSlow.close(ctx);    accQuick.close(ctx);    double value=series.getDouble(ind, Values.RSI_SLOW, 0);    Coordinate c=new Coordinate(series.getStartTime(ind), value);    showActiveMarker(c);    super.onActivate(ctx);  }  @Override  public void onSignal(OrderContext ctx, Object signal)  {    Instrument instr=ctx.getInstrument();    float qty=(getSettings().getTradeLots() * instr.getDefaultQuantityAsFloat());    if (slowSig) accSlow.processSignal(ctx, (Signal) signal, qty, price);    if (quickSig) accQuick.processSignal(ctx, (Signal) signal, qty, price);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Str.PERIOD1);    int p2=getSettings().getInteger(Str.PERIOD2);    int p3=getSettings().getInteger(Str.PERIOD3);    int p4=getSettings().getInteger(Str.PERIOD4);    setMinBars(Utility.max(p1, p2, p3, p4) + 1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    if (index < 1) { return; // not enough data    }    DataSeries series=ctx.getDataSeries();    if (series.getStartTime(index) < activationTime) return; // see onActivate above    int rsiSlowP=getSettings().getInteger(Str.PERIOD1);    int rsiQuickP=getSettings().getInteger(Str.PERIOD2);    int maSlowP=getSettings().getInteger(Str.PERIOD3);    int maQuickP=getSettings().getInteger(Str.PERIOD4);    if (index <= Utility.max(rsiSlowP, rsiQuickP, maSlowP, maQuickP) + 1) return;    Object key=getSettings().getInput(Str.INPUT2);    // Calculate Rsi    price=series.getDouble(index, key, 0);    double diff=price - series.getDouble(index - 1, key);    double up=0, down=0;    if (diff > 0) up=diff;    else down=diff;    series.setDouble(index, Values.UP, up);    series.setDouble(index, Values.DOWN, Math.abs(down));    Enums.MAMethod method1=getSettings().getMAMethod(Str.METHOD1);    Enums.MAMethod method2=getSettings().getMAMethod(Str.METHOD2);    Double avgUpS=series.ma(method1, index, rsiSlowP, Values.UP);    Double avgDownS=series.ma(method1, index, rsiSlowP, Values.DOWN);    if (avgUpS == null || avgDownS == null) return;    double rsS=avgUpS / avgDownS;    double rsiSlow=100.0 - (100.0 / (1.0 + rsS));    series.setDouble(index, Values.RSI_SLOW, rsiSlow);    Double avgUpQ=series.ma(method1, index, rsiQuickP, Values.UP);    Double avgDownQ=series.ma(method1, index, rsiQuickP, Values.DOWN);    if (avgUpQ == null || avgDownQ == null) return;    double rsQ=avgUpQ / avgDownQ;    double rsiQuick=100.0 - (100.0 / (1.0 + rsQ));    series.setDouble(index, Values.RSI_QUICK, rsiQuick);    double maSlow=series.ma(method2, index, maSlowP, key);    double maQuick=series.ma(method2, index, maQuickP, key);    series.setDouble(index, Values.MA_SLOW, maSlow);    series.setDouble(index, Values.MA_QUICK, maQuick);    double prevRsiSlow=series.getDouble(index - 1, Values.RSI_SLOW, rsiSlow);    double prevRsiQuick=series.getDouble(index - 1, Values.RSI_QUICK, rsiQuick);    // Signals    GuideInfo topGuide=getSettings().getGuide(Str.TOP_GUIDE1);    double rsiSlowTopG=topGuide.getValue();    GuideInfo bottomGuide=getSettings().getGuide(Str.BOTT_GUIDE1);    double rsiSlowBottG=bottomGuide.getValue();    topGuide=getSettings().getGuide(Str.TOP_GUIDE2);    double rsiQuickTopG=topGuide.getValue();    bottomGuide=getSettings().getGuide(Str.BOTT_GUIDE2);    double rsiQuickBottG=bottomGuide.getValue();    boolean buyS=(prevRsiSlow < rsiSlowTopG) && (rsiSlow > rsiSlowTopG) && (price > maSlow);    boolean buyQ=prevRsiQuick < rsiQuickTopG && rsiQuick > rsiQuickTopG && price > maQuick;    boolean sellS=(prevRsiSlow > rsiSlowBottG) && (rsiSlow < rsiSlowBottG) && (price < maSlow);    boolean sellQ=prevRsiQuick > rsiQuickBottG && rsiQuick < rsiQuickBottG && price < maQuick;    slowSig=buyS || sellS;    quickSig=buyQ || sellQ;    if (buyS || buyQ) {      // info("buy");      Marker marker=new Marker(new Coordinate(series.getStartTime(index), rsiSlow), Enums.Position.BOTTOM,          getSettings().getMarker(Str.ENTER_LONG_MARK1));      marker.setTextValue(get("BUY"));      marker.setTextPosition(Enums.Position.BOTTOM);      addFigure(marker);      ctx.signal(index, Signal.BUY, get("BUY_PRICE") + Util.round(price, 3), price);      series.setComplete(index);      return;    }    if (sellS || sellQ) {      // info("sell");      Marker marker=new Marker(new Coordinate(series.getStartTime(index), rsiSlow), Enums.Position.TOP,          getSettings().getMarker(Str.EXIT_LONG_MARK1));      marker.setTextValue(get("SELL"));      marker.setTextPosition(Enums.Position.TOP);      addFigure(marker);      ctx.signal(index, Signal.SELL, get("SELL_PRICE") + Util.round(price, 3), price);      series.setComplete(index);      return;    }    series.setComplete(index);  }  public void showActiveMarker(Coordinate c)  {    MarkerInfo markerInfo=getSettings().getMarker(Str.ACTIVE1);    activeMarker=new Marker(c, Enums.Position.BOTTOM, markerInfo);    activeMarker.setTextValue(get("ACTIVE"));    activeMarker.setTextPosition(Enums.Position.BOTTOM);    addFigure(activeMarker);  }}