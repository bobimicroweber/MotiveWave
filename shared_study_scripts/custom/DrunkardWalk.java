package com.motivewave.platform.study.custom;import java.awt.Color;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.ColorDescriptor;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;import com.motivewave.platform.study.general.Utility;/** Drunkard's Walk 182 */@StudyHeader(  namespace="com.motivewave",  id="ID_DRUNKARD_WALK",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_DWALK",  name="NAME_DRUNKARD_WALK",  desc="DESC_DWALK",  helpLink="http://www.motivewave.com/studies/drunkard_walk.htm",  signals=false,  overlay=false,  studyOverlay=true)public class DrunkardWalk extends Study{  final static String STD_DEV="StdDev";  final static String IND3="Ind3";  final static String UP_ABOVE="UpAbove", DN_ABOVE="DnAbove", UP_BELOW="UpBelow", DN_BELOW="DnBelow";  final static String UP_NEUTRAL="UpNeutral", DN_NEUTRAL="DnNeutral";  enum Values { UPWALK, DNWALK, PCB }  @Override  public void initialize(Defaults defaults)  {    var sd = createSD();    var tab = sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 80, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("PERCENTB_PERIOD"), 14, 1, 999, 1));    inputs.addRow(new DoubleDescriptor(STD_DEV, get("STD_DEV"), 2, .1, 999.1, .1));    var settings=tab.addGroup(get("COLORS"));    settings.addRow(new ColorDescriptor(UP_NEUTRAL, get("UPWALK_NEUTRAL"), defaults.getRed()));    settings.addRow(new ColorDescriptor(DN_NEUTRAL, get("DNWALK_NEUTRAL"), defaults.getGreen()));    settings.addRow(new ColorDescriptor(UP_BELOW, get("UPWALK_BELOW_BB"), defaults.getBlue()));    settings.addRow(new ColorDescriptor(DN_BELOW, get("DNWALK_BELOW_BB"), defaults.getYellow()));    settings.addRow(new ColorDescriptor(UP_ABOVE, get("UPWALK_ABOVE_BB"), defaults.getPurple()));    settings.addRow(new ColorDescriptor(DN_ABOVE, get("DNWALK_ABOVE_BB"), defaults.getGrey()));    settings.addRow(new PathDescriptor(Inputs.PATH, get("PERCENTB"), defaults.getBlue(), 1.0f, null, true, false, true));    tab=sd.addTab(get("TAB_DISPLAY"));    settings=tab.addGroup(get("INDICATOR"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("UP_WALK"), defaults.getRed(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("DOWN_WALK"), defaults.getGreen(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(IND3, get("PERCENTB"), defaults.getBlue(), null, false, true, true));    var guides=tab.addGroup(get("GUIDE"));    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, 0, 999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 80, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("PERCENTB_PERIOD"), 14, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(STD_DEV);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2, STD_DEV);    desc.exportValue(new ValueDescriptor(Values.UPWALK, get("UP_WALK"), new String[] { Inputs.PERIOD }));    desc.exportValue(new ValueDescriptor(Values.DNWALK, get("DOWN_WALK"), new String[] { Inputs.PERIOD }));    desc.declarePath(Values.PCB, Inputs.PATH);    desc.declareBars(Values.UPWALK, null);    desc.declareBars(Values.DNWALK, null);    desc.declareIndicator(Values.UPWALK, Inputs.IND);    desc.declareIndicator(Values.DNWALK, Inputs.IND2);    desc.declareIndicator(Values.PCB, IND3);    desc.setRangeKeys(Values.DNWALK, Values.UPWALK, Values.PCB);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars(p1 + p2);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period=getSettings().getInteger(Inputs.PERIOD);    int pbPeriod=getSettings().getInteger(Inputs.PERIOD2);    if (index <= period) return;    double std=getSettings().getDouble(STD_DEV);    Object key=getSettings().getInput(Inputs.INPUT);    Color nUpC=getSettings().getColor(UP_NEUTRAL);    Color nDnC=getSettings().getColor(DN_NEUTRAL);    Color upBelowC=getSettings().getColor(UP_BELOW);    Color dnBelowC=getSettings().getColor(DN_BELOW);    Color upAboveC=getSettings().getColor(UP_ABOVE);    Color dnAboveC=getSettings().getColor(DN_ABOVE);    var series=ctx.getDataSeries();    double low=series.getDouble(index, Enums.BarInput.LOW, 0);    double high=series.getDouble(index, Enums.BarInput.HIGH, 0);    double lowArr[]=Utility.lowestBar(series, index, period, Enums.BarInput.LOW); // returns price and index    double highArr[]=Utility.highestBar(series, index, period, Enums.BarInput.HIGH);    double lowest=lowArr[0]; // lowest low for the period    double highest=highArr[0]; // highest high for the period    int maxBar=(int) highArr[1]; // index for highest high    int minBar=(int) lowArr[1]; // index for lowest low    int dnRun=index - maxBar;    int upRun=index - minBar;    double atrUp=series.atr(index, upRun);    double atrDn=series.atr(index, dnRun);    double den=0, upWalk=0, dnWalk=0;    if (dnRun > 0 && upRun > 0) {      den=1;      if (atrUp > 0) {        den=atrUp;      }      upWalk=(high - lowest) / (Math.sqrt(upRun) * den);      den=1;      if (atrDn > 0) {        den=atrDn;      }      dnWalk=(highest - low) / (Math.sqrt(dnRun) * den);    }    double pcb=Utility.perCentB(series, pbPeriod, index, std, key);    series.setDouble(index, Values.UPWALK, upWalk);    series.setDouble(index, Values.DNWALK, dnWalk);    series.setDouble(index, Values.PCB, pcb);    if (index <= period + pbPeriod) return;    double bbUp[]=Utility.bollingerBands(series, index, pbPeriod, std, std, Values.UPWALK);    double bbDn[]=Utility.bollingerBands(series, index, pbPeriod, std, std, Values.DNWALK);    series.setBarColor(index, Values.UPWALK, nUpC);    series.setBarColor(index, Values.DNWALK, nDnC);    // bbUp[0], bbUp[1] 0 is for top band 1 is for bottom band    if (upWalk <= bbUp[1]) {      series.setBarColor(index, Values.UPWALK, upBelowC);    }    if (dnWalk <= bbDn[1]) {      series.setBarColor(index, Values.DNWALK, dnBelowC);    }    if (upWalk >= bbUp[0]) {      series.setBarColor(index, Values.UPWALK, upAboveC);    }    if (dnWalk >= bbUp[0]) {      series.setBarColor(index, Values.DNWALK, dnAboveC);    }    series.setComplete(index);  }}