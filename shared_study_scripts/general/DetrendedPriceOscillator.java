package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.DataSeries;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.GuideInfo;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.MarkerInfo;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Detrended Price Oscillator DPO 013 */@StudyHeader(  namespace="com.motivewave",  id="ID_DPO",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_DETRENDED_PRICE_OSCILLATOR",  label="LBL_DPO",  desc="DESC_DPO",  helpLink="http://www.motivewave.com/studies/detrended_price_oscillator.htm",  overlay=false,  signals=true,  studyOverlay=true)public class DetrendedPriceOscillator extends Study{  enum Values { DPO };  protected enum Signals { BUY, SELL };  double highSell=Double.NEGATIVE_INFINITY;  double lowBuy=Double.MAX_VALUE;  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.SMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 20, 1, 999, 1));    var lines=tab.addGroup(get("PATH_INDICATOR"));    lines.addRow(new PathDescriptor(Inputs.PATH, get("LBL_DPO"), defaults.getLineColor(), 1.0f, null, true, true, true));    lines.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var guides=tab.addGroup(get("GUIDES"));    var topDesc=new GuideDescriptor(Inputs.TOP_GUIDE, get("TOP_GUIDE"), .01, 0, 9999.001, .001, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -999.001, 999.001, .001, false);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var bottomDesc=new GuideDescriptor(Inputs.BOTTOM_GUIDE, get("BOTTOM_GUIDE"), -.01, -9999.001, 0, .001, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    lines=tab.addGroup(get("SHADING"));    lines.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH, Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    lines.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH, Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 20, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD);    desc.exportValue(new ValueDescriptor(Values.DPO, get("LBL_DPO"), new String[] { Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.DPO, Inputs.PATH);    desc.declareIndicator(Values.DPO, Inputs.IND);    desc.setRangeKeys(Values.DPO);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1 + ((p1 / 2) + 1));  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period=getSettings().getInteger(Inputs.PERIOD);    int disp=(period / 2) + 1;    if (index < period + disp) return;    Enums.MAMethod method=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.SMA);    Object input=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    DataSeries series=ctx.getDataSeries();    double price=series.getDouble(index, input, 0); // close unless changed by user    Double dispSma=series.ma(method, index - disp, period, input);    if (dispSma == null) return;    double dpo=price - dispSma;    series.setDouble(index, Values.DPO, dpo);    // Check for signal events    GuideInfo topGuide=getSettings().getGuide(Inputs.TOP_GUIDE);    double topG=topGuide.getValue();    GuideInfo bottomGuide=getSettings().getGuide(Inputs.BOTTOM_GUIDE);    double bottG=bottomGuide.getValue();    double prevDpo=series.getDouble(index - 1, Values.DPO, 0.0);    boolean sell=(dpo > topG) && (prevDpo > dpo) && (dpo > highSell); // peaked above topG    boolean buy=(dpo < bottG && prevDpo < dpo) && (dpo < lowBuy); // trough below bottG    boolean wasBuy = index == series.size()-1 && series.getBoolean(index, Signals.BUY, false);    boolean wasSell = index == series.size()-1 && series.getBoolean(index, Signals.SELL, false);    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      highSell=dpo;      lowBuy=Double.MAX_VALUE;      Coordinate c=new Coordinate(series.getStartTime(index), dpo);      MarkerInfo marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_DETRENDED_PRICE_OSCILLATOR_PRICE_DPO", Util.round(price, 2), Util.round(dpo, 3));       if (!wasSell && marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, price);    }    if (buy) {      lowBuy=dpo;      highSell=Double.NEGATIVE_INFINITY;      Coordinate c=new Coordinate(series.getStartTime(index), dpo);      MarkerInfo marker=getSettings().getMarker(Inputs.UP_MARKER);      if (!wasBuy && marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker));      ctx.signal(index, Signals.BUY,          get("BUY_DETRENDED_PRICE_OSCILLATOR_PRICE_DPO", Util.round(price, 2), Util.round(dpo, 3)), price);    }    series.setComplete(index);  }}