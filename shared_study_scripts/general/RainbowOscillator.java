package com.motivewave.platform.study.general;import java.awt.Color;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.DataSeries;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.ColorDescriptor;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Rainbow Oscillator 056 Mel Winder */@StudyHeader(  namespace="com.motivewave",  id="ID_RO",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_RAINBOW_OSCILLATOR",  label="LBL_RO",  desc="DESC_RO",  helpLink="http://www.motivewave.com/studies/rainbow_oscillator.htm",  signals=false,  overlay=false,  studyOverlay=true)public class RainbowOscillator extends Study{  final static String IND3="Ind3";  enum Values { RO, RBW_PLUS, RBW_MINUS };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 10, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("LEVELS"), 2, 1, 999, 1));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("RBW_PLUS"), defaults.getRed(), 1.0f, null));    settings.addRow(new ColorDescriptor(Inputs.UP_COLOR, get("RO_UP_COLOR"), defaults.getBlue()));    settings.addRow(new ColorDescriptor(Inputs.DOWN_COLOR, get("RO_DOWN_COLOR"), defaults.getBlue()));    settings.addRow(new PathDescriptor(Inputs.PATH3, get("RBW_MINUS"), defaults.getGreen(), 1.0f, null));    tab=sd.addTab(get("TAB_DISPLAY"));    var lines=tab.addGroup(get("INDICATORS"));    lines=tab.addGroup(get("INDICATORS"));    lines.addRow(new IndicatorDescriptor(Inputs.IND2, get("RBW_PLUS"), defaults.getRed(), null, false, true, true));    lines.addRow(new IndicatorDescriptor(Inputs.IND, get("RO"), defaults.getLineColor(), null, false, true, true));    lines.addRow(new IndicatorDescriptor(IND3, get("RBW_MINUS"), defaults.getGreen(), null, false, true, true));    var guides=tab.addGroup(get("GUIDE"));    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -999.1, 999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("LBL_PERIOD"), 10, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("LEVELS"), 2, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH2, Inputs.PATH3);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2);    desc.exportValue(new ValueDescriptor(Values.RO, get("LBL_RO"), new String[] { Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2 }));    desc.declareBars(Values.RO);    desc.declarePath(Values.RBW_PLUS, Inputs.PATH2);    desc.declarePath(Values.RBW_MINUS, Inputs.PATH3);    desc.declareIndicator(Values.RO, Inputs.IND);    desc.declareIndicator(Values.RBW_PLUS, Inputs.IND2);    desc.declareIndicator(Values.RBW_MINUS, IND3);    desc.setRangeKeys(Values.RBW_PLUS, Values.RBW_MINUS);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    Object input=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    int period=getSettings().getInteger(Inputs.PERIOD);    int levels=getSettings().getInteger(Inputs.PERIOD2);    if (index < period) return;    var series=ctx.getDataSeries();    double rbw=rainbowBw(series, index, period, levels, input);    series.setDouble(index, Values.RBW_PLUS, rbw);    series.setDouble(index, Values.RBW_MINUS, -rbw);    double ro=rainbowOsc(series, index, period, levels, input);    series.setDouble(index, Values.RO, ro);    var midGuide=getSettings().getGuide(Inputs.MIDDLE_GUIDE);    double midG=midGuide.getValue();    Color upC=getSettings().getColor(Inputs.UP_COLOR);    Color dnC=getSettings().getColor(Inputs.DOWN_COLOR);    if (ro > midG) series.setBarColor(index, Values.RO, upC);    else series.setBarColor(index, Values.RO, dnC);    series.setComplete(index);  }  protected double rainbowOsc(DataSeries series, int index, int period, int totLevels, Object key)  {    double[] av=new double[totLevels * period];    int counter=0;    for (int level=0; level < totLevels; level++) {      counter=0;      for (int i=index; i < index + period; i++) {        int pnt=(level * period) + counter;        if (level == 0) av[pnt]=series.sma(i, period, key);        if (level > 0) av[pnt]=average(av, pnt - 1, period);        counter++;      }    }    double highest=series.highest(index, period, key);    double lowest=series.lowest(index, period, key);    if (highest - lowest == 0.0) return 0.0;    double value=series.getDouble(index, key, 0.0);    double avAv=average(av, (totLevels - 1) * period, period); // average last calculated averages    double rbo=100 * ((value - avAv) / (highest - lowest));    return rbo;  }  protected double rainbowBw(DataSeries series, int index, int period, int totLevels, Object key)  {    int size=totLevels * period;    double[] av=new double[size];    int counter=0;    for (int level=0; level < totLevels; level++) {      counter=0;      for (int i=index; i < index + period; i++) {        int pnt=(level * period) + counter;        if (level == 0) av[pnt]=series.sma(i, period, key);        if (level > 0) av[pnt]=average(av, pnt - 1, period);        counter++;      }    }    double highest=series.highest(index, period, key);    double lowest=series.lowest(index, period, key);    if (highest - lowest == 0.0) return 0.0;    double value=series.getDouble(index, key, 0.0);    double hiAv=maxValue(av, (totLevels - 1) * period, period);    double lowAv=minValue(av, (totLevels - 1) * period, period);    if (value > hiAv) hiAv=value;    if (value < lowAv) lowAv=value;    double rbBw=100 * ((hiAv - lowAv) / (highest - lowest));    return rbBw;  }  protected double average(double[] av, int index, int period)  {    double total=0.0;    for (int i=index; i > index - period; i--) {      total=total + av[i];    }    double average=total / period;    return average;  }  protected double maxValue(double[] av, int index, int period)  {    double max=0.0;    for (int i=index; i > index - period; i--) {      if (av[i] > max) max=av[i];    }    return max;  }  protected double minValue(double[] av, int index, int period)  {    double min=av[index];    for (int i=index; i > index - period; i--) {      if (av[i] < min) min=av[i];    }    return min;  }}