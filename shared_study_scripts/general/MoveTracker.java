package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.LineInfo;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Move Tracker 088 */@StudyHeader(  namespace="com.motivewave",  id="ID_MVTR",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_MOVE_TRACKER",  desc="DESC_MVTR",  label="LBL_MVTR",  helpLink="http://www.motivewave.com/studies/move_tracker.htm",  signals=false,  overlay=false,  studyOverlay=true)public class MoveTracker extends Study{  enum Values { MT, SIG };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    var grp=tab.addGroup(get("PATHS"));    grp.addRow(new PathDescriptor(Inputs.PATH, get("LBL_MVTR"), defaults.getLineColor(), 1.0f, null, true, false, true));    grp.addRow(new PathDescriptor(Inputs.PATH2, get("SIGNAL"), defaults.getRed(), 1.0f, null, true, false, true));    grp=tab.addGroup(get("INDICATORS"));    grp.addRow(new IndicatorDescriptor(Inputs.IND, get("LBL_MVTR"), defaults.getLineColor(), null, false, true, true));    grp.addRow(new IndicatorDescriptor(Inputs.IND2, get("SIGNAL"), defaults.getRed(), null, false, true, true));    grp=tab.addGroup(get("SHADING"));    grp.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.PATH, 0, Enums.ShadeType.ABOVE,        defaults.getTopFillColor(), true, true));    grp.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.PATH, 0, Enums.ShadeType.BELOW,        defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.PATH, Inputs.PATH2);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT);    desc.exportValue(new ValueDescriptor(Values.MT, get("LBL_MVTR"), new String[] { Inputs.INPUT }));    desc.declarePath(Values.MT, Inputs.PATH);    desc.declarePath(Values.SIG, Inputs.PATH2);    desc.declareIndicator(Values.MT, Inputs.IND);    desc.declareIndicator(Values.SIG, Inputs.IND2);    desc.setRangeKeys(Values.MT, Values.SIG);    desc.addHorizontalLine(new LineInfo(0, null, 1.0f, new float[] { 3f, 3f }));  }  @Override  public void onLoad(Defaults defaults)  {    setMinBars(20);  }  @Override  protected void calculate(int index, DataContext ctx)  {    if (index < 1) return;    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var series=ctx.getDataSeries();    double price=series.getDouble(index, key);    double prevP=series.getDouble(index - 1, key);    double mt=price - prevP;    series.setDouble(index, Values.MT, mt);    if (index < 2) return;    double prevMt=series.getDouble(index - 1, Values.MT, 0);    double sig=mt - prevMt;    series.setDouble(index, Values.SIG, sig);    series.setComplete(index);  }}