package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Twiggs Money Flow 021 */@StudyHeader(  namespace="com.motivewave",  id="ID_TMF",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_TWIGGS_MONEY_FLOW",  label="LBL_TMF",  desc="DESC_TMF",  menu="MENU_OSCILLATORS",  helpLink="http://www.motivewave.com/studies/twiggs_money_flow.htm",  overlay=false,  signals=true,  requiresVolume=true,  studyOverlay=true)public class TwiggsMoneyFlow extends Study{  enum Values { AD, VOLUME, TMF }  protected enum Signals { BUY, SELL }  double highSell=Double.NEGATIVE_INFINITY;  double lowBuy=Double.MAX_VALUE;  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.EMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 21, 1, 500, 1));    var settings=tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_TMF"), defaults.getLineColor(), 1.0f, null, true, false, false));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), null, null, false, true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var guides=tab.addGroup(get("GUIDES"));    var topDesc=new GuideDescriptor(Inputs.TOP_GUIDE, get("TOP_GUIDE"), .2, 0, 3.001, .001, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -3.001, 3.001, .001, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var bottomDesc=new GuideDescriptor(Inputs.BOTTOM_GUIDE, get("BOTTOM_GUIDE"), -.2, -3.001, 0, .001, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    var shade=tab.addGroup(get("SHADING"));    shade.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    shade.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 21, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);    var desc=createRD();    desc.setLabelSettings(Inputs.METHOD, Inputs.PERIOD);    desc.exportValue(new ValueDescriptor(Values.TMF, get("TMF"), new String[] { Inputs.METHOD, Inputs.PERIOD }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.TMF, Inputs.PATH);    desc.declareIndicator(Values.TMF, Inputs.IND);    desc.setRangeKeys(Values.TMF);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1 + 1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    if (index < 1) return;    var method=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.EMA);    int period=getSettings().getInteger(Inputs.PERIOD);    var series=ctx.getDataSeries();    double ad=0.0;    double volume=series.getVolume(index);    double close=series.getClose(index);    double high=series.getHigh(index);    double low=series.getLow(index);    double lastClose=series.getClose(index - 1);    double trh=Math.max(high, lastClose);    double trl=Math.min(low, lastClose);    if (trl == trh) ad=0;    else ad=((close - trl) - (trh - close)) / (trh - trl) * volume;    series.setDouble(index, Values.AD, ad);    if (index < period + 1) return;    Double smoothAd=series.ma(method, index, period, Values.AD);    Double smthVol=series.ma(method, index, period, Enums.BarInput.VOLUME);    if (smoothAd == null || smthVol == null) return;    if (smthVol == 0) return;    double tmf=smoothAd / smthVol;    series.setDouble(index, Values.TMF, tmf);    // Check for signal events    var topGuide=getSettings().getGuide(Inputs.TOP_GUIDE);    double topG=topGuide.getValue();    var bottomGuide=getSettings().getGuide(Inputs.BOTTOM_GUIDE);    double bottG=bottomGuide.getValue();    double prevTmf=series.getDouble(index - 1, Values.TMF, 0.0);    boolean sell=(tmf > topG) && (prevTmf > tmf) && (tmf > highSell); // peaked above topG    boolean buy=(tmf < bottG && prevTmf < tmf) && (tmf < lowBuy); // trough below bottG    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      lowBuy=Double.MAX_VALUE;      highSell=tmf;      var c=new Coordinate(series.getStartTime(index), tmf);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_CLOSE_TWIGGS_MONEY_FLOW", Util.round(close, 2), Util.round(tmf, 3));       if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, close);    }    if (buy) {      highSell=Double.NEGATIVE_INFINITY;      lowBuy=tmf;      var c=new Coordinate(series.getStartTime(index), tmf);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_CLOSE_TWIGGS_MONEY_FLOW", Util.round(close, 2), Util.round(tmf, 3));       if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, close);    }    series.setComplete(index);  }}