package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Projection Bandwidth Mel Winder 049 */@StudyHeader(  namespace="com.motivewave",  id="ID_PBW",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_PROJECTION_BANDWIDTH",  label="LBL_PBW",  desc="DESC_PBW",  helpLink="http://www.motivewave.com/studies/projection_bandwidth.htm",  signals=false,  overlay=false,  studyOverlay=true)public class ProgBandwidth extends Study{  enum Values { PBW, V_HIGH, V_LOW };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 14, 1, 999, 1));    var colors=tab.addGroup(get("PATH_INDICATOR"));    colors.addRow(new PathDescriptor(Inputs.PATH, get("LBL_PBW"), defaults.getLineColor(), 1.0f, null, true, true, true));    colors.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    var guides=tab.addGroup(get("GUIDE"));    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, 0, 999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 14, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH);    var desc=createRD();    desc.setLabelSettings(Inputs.PERIOD);    desc.exportValue(new ValueDescriptor(Values.PBW, get("LBL_PBW"), new String[] { Inputs.PERIOD }));    desc.declarePath(Values.PBW, Inputs.PATH);    desc.declareIndicator(Values.PBW, Inputs.IND);    desc.setRangeKeys(Values.PBW);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period=getSettings().getInteger(Inputs.PERIOD);    if (index < period) return;    var series=ctx.getDataSeries();    double mHigh=Utility.linRegLine(series, index, period, Enums.BarInput.HIGH, 0)[1];    double mLow=Utility.linRegLine(series, index, period, Enums.BarInput.LOW, 0)[1];    int count=0;    double pbw=0, pu=0, pl=Double.MAX_VALUE;    for (int i=(index - period + 1); i <= index; i++) // move back 1 period    {      double prevHigh=series.getDouble(i - 1, Enums.BarInput.HIGH, 0.0);      double prevLow=series.getDouble(i - 1, Enums.BarInput.LOW, 0.0);      double vHigh=prevHigh + (mHigh * (count));      double vLow=prevLow + (mLow * (count));      if (vHigh > pu) pu=vHigh;      if (vLow < pl) pl=vLow;      count++;    }    pbw=200 * (pu - pl) / (pu + pl);    series.setDouble(index, Values.PBW, pbw);    series.setComplete(index);  }}