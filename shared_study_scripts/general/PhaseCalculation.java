package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.LineInfo;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Phase Calculation John F. Elders 081 */@StudyHeader(  namespace="com.motivewave",  id="ID_PHCL",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_PHASE_CALCULATION",  label="LBL_PHCL",  desc="DESC_PHCL",  helpLink="http://www.motivewave.com/studies/phase_calculation.htm",  signals=false,  overlay=false,  studyOverlay=true)public class PhaseCalculation extends Study{  enum Values { PHASE };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 15, 1, 999, 1));    var colors=tab.addGroup(get("PATH_INDICATOR"));    colors.addRow(new PathDescriptor(Inputs.PATH, get("LBL_PHCL"), defaults.getLineColor(), 1.0f, null, true, true, true));    colors.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), null, null, false, true, true));    var lines=tab.addGroup(get("SHADING"));    lines.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.PATH, 0, Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("LBL_PERIOD"), 15, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH);    var desc=createRD();    desc.setLabelSettings(Inputs.PERIOD);    desc.exportValue(new ValueDescriptor(Values.PHASE, get("LBL_PHCL"), new String[] { Inputs.PERIOD }));    desc.declarePath(Values.PHASE, Inputs.PATH);    desc.declareIndicator(Values.PHASE, Inputs.IND);    desc.setRangeKeys(Values.PHASE);    desc.addHorizontalLine(new LineInfo(0, null, 1.0f, new float[] { 3f, 3f }));  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period=getSettings().getInteger(Inputs.PERIOD);    if (index < period) return;    Object input=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var series=ctx.getDataSeries();    double weight=0.0;    double realP=0.0;    double imagP=0.0;    int j=0;    double radians=0.0;    double phase=0.0;    for (int i=index - period + 1; i <= index; i++) {      weight=series.getDouble(i, input, 0);      radians=Math.toRadians(360 * j / period);      realP=realP + Math.cos(radians) * weight;      imagP=imagP + Math.sin(radians) * weight;      j++;    }    if (Math.abs(realP) > .001) {      phase=Math.toDegrees(Math.atan(imagP / realP));    }    else {      phase=90.0 * Math.toDegrees(Math.asin(imagP));    }    if (realP < 0.0) phase=phase + 180;    phase=phase + 90;    if (phase < 0.0) phase=phase + 360;    if (phase > 360) phase=phase - 360;    series.setDouble(index, Values.PHASE, phase);    series.setComplete(index);  }}