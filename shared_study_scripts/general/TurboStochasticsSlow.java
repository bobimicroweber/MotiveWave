package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Turbo Stochastic Slow 102 */@StudyHeader(  namespace="com.motivewave",  id="ID_TBSTS",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_TBSTS",  name="NAME_TURBO_STOCHASTICS_SLOW",  desc="DESC_TBSTS",  helpLink="http://www.motivewave.com/studies/turbo_stochastics_slow.htm",  signals=true,  overlay=false,  studyOverlay=true)public class TurboStochasticsSlow extends Study{  enum Signals { SELL, BUY };  enum Values { TSSK, TSSD, SLOWK, SLOWD, FK, SKDV };  double highSell=Double.NEGATIVE_INFINITY;  double lowBuy=Double.MAX_VALUE;  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("SLOW_K_PERIOD"), 20, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("SLOW_D_PERIOD"), 20, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD3, get("REGRESS"), 10, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD4, get("TURBO"), 2, -999, 999, 1));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("SLOW_K"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("SLOW_D"), defaults.getRed(), 1.0f, null, true, false, true));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("SLOW_K"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("SLOW_D"), defaults.getRed(), null, false, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var guides=tab.addGroup(get("GUIDES"));    var topDesc=new GuideDescriptor(Inputs.TOP_GUIDE, get("TOP_GUIDE"), 70, 0, 9999.1, .1, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 50, 0, 9999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var bottomDesc=new GuideDescriptor(Inputs.BOTTOM_GUIDE, get("BOTTOM_GUIDE"), 30, 0, 9999.1, .1, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("SLOW_K_PERIOD"), 20, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("SLOW_D_PERIOD"), 20, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD3, get("REGRESS"), 10, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD4, get("TURBO"), 2, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.PATH2);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3, Inputs.PERIOD4);    desc.exportValue(new ValueDescriptor(Values.SLOWK, get("LBL_TBSTS"), new String[] { Inputs.INPUT, Inputs.PERIOD,        Inputs.PERIOD2, Inputs.PERIOD3, Inputs.PERIOD4 }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.TSSK, Inputs.PATH);    desc.declarePath(Values.TSSD, Inputs.PATH2);    desc.declareIndicator(Values.TSSK, Inputs.IND);    desc.declareIndicator(Values.TSSD, Inputs.IND);    desc.setRangeKeys(Values.TSSK, Values.TSSD);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    int p3=getSettings().getInteger(Inputs.PERIOD3);    setMinBars((p1 * 2) + p2 + p3);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int kPeriod=getSettings().getInteger(Inputs.PERIOD);    int dPeriod=getSettings().getInteger(Inputs.PERIOD2);    if (index < kPeriod) return;    int regress=getSettings().getInteger(Inputs.PERIOD3);    int turbo=getSettings().getInteger(Inputs.PERIOD4);    Object input=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var series=ctx.getDataSeries();    double price=series.getDouble(index, input, 0);    double fastK=Utility.stochK(series, index, kPeriod, input);    series.setDouble(index, Values.FK, fastK);    if (index < kPeriod * 2) return;    double slowK=series.sma(index, kPeriod, Values.FK); // same as fastD    series.setDouble(index, Values.SLOWK, slowK);    if (index < kPeriod * 2 + dPeriod) return;    double slowD=series.sma(index, dPeriod, Values.SLOWK); // slowK == fastD    series.setDouble(index, Values.SLOWD, slowD);    if (index < (kPeriod * 2) + dPeriod + regress) return;    if (turbo < 0) turbo=Math.max(turbo, -regress);    if (turbo > 0) turbo=Math.min(turbo, regress);    double[] tssK=Utility.linRegLine(series, index, regress, Values.SLOWK, regress + turbo);    double[] tssD=Utility.linRegLine(series, index, regress, Values.SLOWD, regress + turbo);    series.setDouble(index, Values.TSSK, tssK[0]);    series.setDouble(index, Values.TSSD, tssD[0]);    // Check for signal events    var topGuide=getSettings().getGuide(Inputs.TOP_GUIDE);    double topG=topGuide.getValue();    var bottomGuide=getSettings().getGuide(Inputs.BOTTOM_GUIDE);    double bottG=bottomGuide.getValue();    boolean sell=crossedBelow(series, index, Values.TSSK, Values.TSSD) && tssK[0] > topG && (tssK[0] > highSell);    boolean buy=crossedAbove(series, index, Values.TSSK, Values.TSSD) && tssK[0] < bottG && (tssK[0] < lowBuy);    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);        if (sell) {      lowBuy=Double.MAX_VALUE;      highSell=tssK[0];      var c=new Coordinate(series.getStartTime(index), tssK[0]);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_PRICE_TBSTS", Util.round(price, 2), Util.round(tssK[0], 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, price);    }    if (buy) {      highSell=Double.NEGATIVE_INFINITY;      lowBuy=tssK[0];      var c=new Coordinate(series.getStartTime(index), tssK[0]);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_PRICE_TBSTS", Util.round(price, 2), Util.round(tssK[0], 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, price);    }    series.setComplete(index);  }}