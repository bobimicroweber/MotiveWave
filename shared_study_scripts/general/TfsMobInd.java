package com.motivewave.platform.study.general;import java.awt.Color;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.ColorDescriptor;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** TFS MOB Indicator Bryan Strain 063 */@StudyHeader(  namespace="com.motivewave",  id="ID_TFSMOB",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_TFS_MOB_INDICATOR",  label="LBL_TFSMOB",  desc="DESC_TFSMOB",  helpLink="http://www.motivewave.com/studies/tfs_mob_indicator.htm",  signals=false,  overlay=false,  studyOverlay=true)public class TfsMobInd extends Study{  enum Values {TFSMOB };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.SMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("FAST_PERIOD"), 25, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("SLOW_PERIOD"), 200, 1, 999, 1));    var settings=tab.addGroup(get("COLORS"));    settings.addRow(new ColorDescriptor(Inputs.UP_COLOR, get("LBL_UP_COLOR"), defaults.getGreen()));    settings.addRow(new ColorDescriptor(Inputs.DOWN_COLOR, get("LBL_DOWN_COLOR"), defaults.getRed()));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    var guides=tab.addGroup(get("GUIDE"));    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -999.1, 999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("FAST_PERIOD"), 25, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("SLOW_PERIOD"), 200, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.UP_COLOR, Inputs.DOWN_COLOR);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2);    desc.exportValue(new ValueDescriptor(Values.TFSMOB, get("LBL_TFSMOB"), new String[] { Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2 }));    desc.declareBars(Values.TFSMOB);    desc.declareIndicator(Values.TFSMOB, Inputs.IND);    desc.setRangeKeys(Values.TFSMOB);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars(p1 + p2);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int fastPeriod=getSettings().getInteger(Inputs.PERIOD);    int slowPeriod=getSettings().getInteger(Inputs.PERIOD2);    if (index < fastPeriod + slowPeriod) return;    Object input=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var method=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.SMA);    var series=ctx.getDataSeries();    Double mob1=series.ma(method, index, fastPeriod, input);    Double mob2=series.ma(method, index, slowPeriod, input);    if (mob1 == null || mob2 == null) return;    double tfsMob=mob1 - mob2;    series.setDouble(index, Values.TFSMOB, tfsMob);    var midGuide=getSettings().getGuide(Inputs.MIDDLE_GUIDE);    double midG=midGuide.getValue();    Color upC=getSettings().getColor(Inputs.UP_COLOR);    Color dnC=getSettings().getColor(Inputs.DOWN_COLOR);    if (tfsMob > midG) series.setBarColor(index, Values.TFSMOB, upC);    else series.setBarColor(index, Values.TFSMOB, dnC);    series.setComplete(index);  }}