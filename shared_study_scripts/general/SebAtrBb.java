package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Standard Error Bands Average True Range Jon Anderson Bollinger Bands 054 */@StudyHeader(  namespace="com.motivewave",  id="ID_SAB",  rb="com.motivewave.platform.study.nls.strings2",  desc="DESC_SAB",  label="LBL_SAB",  name="NAME_BOLLINGER_BANDS_ATR",  helpLink="http://www.motivewave.com/studies/standerror_avtruerange_bb.htm",  overlay=false,  studyOverlay=true)public class SebAtrBb extends Study{  final static String STD_DEV="StdDev";  enum Values { BB, ART_DEV };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("BB_PERIOD"), 21, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("ATR_PERIOD"), 55, 1, 999, 1));    inputs.addRow(new DoubleDescriptor(STD_DEV, get("STD_DEV"), 2, .1, 999.1, .1));    var settings=tab.addGroup(get("PATH"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_SAB"), defaults.getLineColor(), 1.0f, null, true, false, true));    tab=sd.addTab(get("TAB_DISPLAY"));    settings=tab.addGroup(get("INDICATOR"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), null, null, false, true, true));    var guides=tab.addGroup(get("GUIDE"));    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -999.1, 999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.PATH, 0, Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("BB_PERIOD"), 21, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("ATR_PERIOD"), 55, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(STD_DEV, Inputs.PATH);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2, STD_DEV);    desc.exportValue(new ValueDescriptor(Values.ART_DEV, get("ART_STD_DEV"), new String[] { Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2, STD_DEV }));    desc.declarePath(Values.ART_DEV, Inputs.PATH);    desc.declareIndicator(Values.ART_DEV, Inputs.IND);    desc.setRangeKeys(Values.ART_DEV);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars(Math.max(p1, p2));  }  @Override  protected synchronized void calculate(int index, DataContext ctx)  {    int bPeriod=getSettings().getInteger(Inputs.PERIOD);    int artPeriod=getSettings().getInteger(Inputs.PERIOD2);    double noStd=getSettings().getDouble(STD_DEV);    Object input=getSettings().getInput(Inputs.INPUT);    var series=ctx.getDataSeries();    if (index < Math.max(artPeriod, bPeriod)) return;    double art=series.atr(index, artPeriod);    double[] bb=Utility.bollingerBands(series, index, bPeriod, noStd, noStd, input);    double bbDiff=bb[0] - bb[1]; // top= bb[0],bottom=bb[1]    double artDev=art / bbDiff;    series.setDouble(index, Values.ART_DEV, artDev);    series.setComplete(index);  }}