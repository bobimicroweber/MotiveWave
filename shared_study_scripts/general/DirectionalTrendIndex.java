package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Directional Trend Index 036 */@StudyHeader(  namespace="com.motivewave",  id="ID_WBDTI",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_DIRECTIONAL_TREND_INDEX",  desc="DESC_WBDTI",  menu="MENU_WILLIAM_BLAU",  helpLink="http://www.motivewave.com/studies/directional_trend_index.htm",  label="LBL_WBDTI",  signals=true,  overlay=false,  studyOverlay=true)public class DirectionalTrendIndex extends Study{  enum Values { HMU_LMD, ABS_HMU_LMD, MA1, MA2, ABS_MA1, ABS_MA2, DTI };  protected enum Signals { BUY, SELL };  double highSell=Double.NEGATIVE_INFINITY;  double lowBuy=Double.MAX_VALUE;  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.EMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD_R"), 14, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("PERIOD_S"), 10, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD3, get("PERIOD_U"), 5, 1, 999, 1));    var settings=tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_WBDTI"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), null, null, false, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var guides=tab.addGroup(get("GUIDES"));    var topDesc=new GuideDescriptor(Inputs.TOP_GUIDE, get("TOP_GUIDE"), 25, 0, 100.1, .1, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -100.1, 100.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var bottomDesc=new GuideDescriptor(Inputs.BOTTOM_GUIDE, get("BOTTOM_GUIDE"), -25, -100.1, 0, .1, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD_R"), 14, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("PERIOD_S"), 10, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD3, get("PERIOD_U"), 5, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);    var desc=createRD();    desc.setLabelSettings(Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3);    desc.exportValue(new ValueDescriptor(Values.DTI, get("LBL_WBDTI"), new String[] { Inputs.METHOD, Inputs.PERIOD,        Inputs.PERIOD2, Inputs.PERIOD3 }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.DTI, Inputs.PATH);    desc.declareIndicator(Values.DTI, Inputs.IND);    desc.setRangeKeys(Values.DTI);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    int p3=getSettings().getInteger(Inputs.PERIOD3);    setMinBars(p1 + p2 + p3 + 1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    // need at least 1 record    if (index < 1) return;    int rPeriod=getSettings().getInteger(Inputs.PERIOD);    int sPeriod=getSettings().getInteger(Inputs.PERIOD2);    int uPeriod=getSettings().getInteger(Inputs.PERIOD3);    var method=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.EMA);    var series=ctx.getDataSeries();    double high=series.getHigh(index);    double prevHigh=series.getHigh(index - 1);    double low=series.getLow(index);    double prevLow=series.getLow(index - 1);    double hmu=0.0;    if (high - prevHigh > 0) hmu=high - prevHigh;    double lmd=0.0;    if (low - prevLow < 0) lmd=-(low - prevLow);    series.setDouble(index, Values.HMU_LMD, hmu - lmd);    series.setDouble(index, Values.ABS_HMU_LMD, Math.abs(hmu - lmd));    if (index < rPeriod + 1) return;    Double ma1=series.ma(method, index, rPeriod, Values.HMU_LMD);    Double aMa1=series.ma(method, index, rPeriod, Values.ABS_HMU_LMD);    series.setDouble(index, Values.MA1, ma1);    series.setDouble(index, Values.ABS_MA1, aMa1);    if (index < rPeriod + sPeriod + 1) return;    Double ma2=series.ma(method, index, sPeriod, Values.MA1);    Double aMa2=series.ma(method, index, sPeriod, Values.ABS_MA1);    series.setDouble(index, Values.MA2, ma2);    series.setDouble(index, Values.ABS_MA2, aMa2);    if (index < rPeriod + sPeriod + uPeriod + 1) return;    Double ma3=series.ma(method, index, uPeriod, Values.MA2);    Double aMa3=series.ma(method, index, uPeriod, Values.ABS_MA2);    if (ma3 == null || aMa3 == null) return;    double dti=100 * ma3 / aMa3;    series.setDouble(index, Values.DTI, dti);    series.setComplete(index);    // Check for signal events    var topGuide=getSettings().getGuide(Inputs.TOP_GUIDE);    double topG=topGuide.getValue();    var bottomGuide=getSettings().getGuide(Inputs.BOTTOM_GUIDE);    double bottG=bottomGuide.getValue();    double prevDti=series.getDouble(index - 1, Values.DTI, 0.0);    boolean sell=(dti > topG) && (prevDti > dti) && (dti > highSell); // peaked above topG    boolean buy=(dti < bottG && prevDti < dti) && (dti < lowBuy); // trough below bottG    boolean wasBuy = index == series.size()-1 && series.getBoolean(index, Signals.BUY, false);    boolean wasSell = index == series.size()-1 && series.getBoolean(index, Signals.SELL, false);    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      lowBuy=Double.MAX_VALUE;      highSell=dti;      var c=new Coordinate(series.getStartTime(index), dti);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_HIGH_DTI", Util.round(high, 2), Util.round(dti, 3));      if (!wasSell && marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, high);    }    if (buy) {      highSell=Double.NEGATIVE_INFINITY;      lowBuy=dti;      var c=new Coordinate(series.getStartTime(index), dti);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_LOW_DTI", Util.round(low, 2), Util.round(dti, 3));      if (!wasBuy && marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, low);    }  }}