package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Bressert Double Smooth Stochastic*/@StudyHeader(  namespace="com.motivewave",  id="DSS_BRESSERT",  rb="com.motivewave.platform.study.nls.strings",  label="LBL_BRESSERT_DSS",  name="LBL_BRESSERT_DSS",  desc="DESC_BRESSERT_DSS",  menu="MENU_GENERAL",  signals=true,  overlay=false,  studyOverlay=true)public class DSSBressert extends Study{  enum Values { S1, S2, SS, DSS, TRIGGER };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("LBL_INPUTS"));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("LBL_K_PERIOD"), 10, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("LBL_EMA_PERIOD"), 9, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD3, get("LBL_TRIGGER_PERIOD"), 5, 1, 999, 1));    var settings=tab.addGroup(get("LBL_PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_BDSS"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("LBL_BDSS_TRIGGER"), defaults.getRed(), 1.0f, null, true, false, true));    settings=tab.addGroup(get("LBL_INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("LBL_BDSS"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("LBL_BDSS_TRIGGER"), defaults.getRed(), null, false, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var guides=tab.addGroup(get("LBL_GUIDES"));    var topDesc=new GuideDescriptor(Inputs.TOP_GUIDE, get("LBL_TOP_GUIDE"), 80, 0, 999, .1, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("LBL_MIDDLE_GUIDE"), 50, 0, 999, .1, true);    mg.setDash(new float[] { 3, 3 });    mg.setEnabled(false);    guides.addRow(mg);    var bottomDesc=new GuideDescriptor(Inputs.BOTTOM_GUIDE, get("LBL_BOTTOM_GUIDE"), 20, 0, 999, .1, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    settings=tab.addGroup(get("LBL_SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("LBL_TOP_FILL"), Inputs.TOP_GUIDE, Inputs.PATH, Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("LBL_BOTTOM_FILL"), Inputs.BOTTOM_GUIDE, Inputs.PATH, Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("LBL_K_PERIOD"), 10, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("LBL_EMA_PERIOD"), 9, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD3, get("LBL_TRIGGER_PERIOD"), 5, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.PATH2);    var desc=createRD();    desc.setLabelSettings(Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3);    desc.exportValue(new ValueDescriptor(Values.DSS, get("LBL_BDSS"), new String[] { Inputs.PERIOD, Inputs.PERIOD2 }));    desc.exportValue(new ValueDescriptor(Values.TRIGGER, get("LBL_BDSS_TRIGGER"), new String[] { Inputs.PERIOD3, }));    desc.declarePath(Values.DSS, Inputs.PATH);    desc.declarePath(Values.TRIGGER, Inputs.PATH2);    desc.declareIndicator(Values.DSS, Inputs.IND);    desc.declareIndicator(Values.TRIGGER, Inputs.IND2);    desc.setRangeKeys(Values.DSS, Values.TRIGGER);    desc.setMinTick(0.01);  }  @Override  public void onLoad(Defaults defaults)  {    int k=getSettings().getInteger(Inputs.PERIOD);    int ema=getSettings().getInteger(Inputs.PERIOD2);    int trigger=getSettings().getInteger(Inputs.PERIOD3);    setMinBars(k*2+ema*4 + trigger*2);  }    @Override  protected void calculate(int index, DataContext ctx)  {    int k=getSettings().getInteger(Inputs.PERIOD);    if (index < k) return;    int emaLen=getSettings().getInteger(Inputs.PERIOD2);    int triggerLen=getSettings().getInteger(Inputs.PERIOD3);    var series = ctx.getDataSeries();    Double s1 = series.stochasticK(index, k);    if (s1 == null) return;    series.setDouble(index, Values.S1, s1); // Stochastic    Double ss = series.ema(index, emaLen, Values.S1); // Smoothed Stochastic    if (ss == null) return;    series.setDouble(index, Values.SS, ss);    Double s2 = series.stochasticK(index, k, Values.SS); // Compute stochastic of the smoothed stochastic    if (s2 == null) return;    series.setDouble(index, Values.S2, s2);    Double dss = series.ema(index, emaLen, Values.S2); // Double smoothed stochastic    if (dss == null) return;    series.setDouble(index, Values.DSS, dss);    Double trigger = series.ema(index, triggerLen, Values.DSS); // Trigger     if (trigger == null) return;    series.setDouble(index, Values.TRIGGER, trigger);    series.setComplete(index, series.isBarComplete(index));  }}