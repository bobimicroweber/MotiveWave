package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Rate of Change From Start 096 */@StudyHeader(  namespace="com.motivewave",  id="ID_ROCFS",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_RATE_OF_CHANGE_FROM_START",  label="LBL_ROCFS",  desc="DESC_ROCFS",  helpLink="http://www.motivewave.com/studies/rate_of_change_from_start.htm",  signals=false,  overlay=false,  studyOverlay=true)public class RateOfChangeFromStart extends Study{  enum Values { ROCFS };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUT"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    var settings=tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_ROCFS"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    var guides=tab.addGroup(get("GUIDE"));    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -999.1, 999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.PATH);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT);    desc.exportValue(new ValueDescriptor(Values.ROCFS, get("LBL_ROCFS"), new String[] { Inputs.INPUT }));    desc.declarePath(Values.ROCFS, Inputs.PATH);    desc.declareIndicator(Values.ROCFS, Inputs.IND);    desc.setRangeKeys(Values.ROCFS);  }  @Override  public void onLoad(Defaults defaults)  {    setMinBars(20);  }  @Override  protected void calculate(int index, DataContext ctx)  {    if (index < 1) return;    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var series=ctx.getDataSeries();    double firstP=series.getDouble(0, key, 0);    double price=series.getDouble(index, key, 0);    double rocfs=(price * 100.0) / firstP - 100.0;    series.setDouble(index, Values.ROCFS, rocfs);    series.setComplete(index);  }}