package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.DataSeries;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.BooleanDescriptor;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Conditional Accumulator 035 */@StudyHeader(  namespace="com.motivewave",  id="ID_CONDACC",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_CONDITIONAL_ACCUMULATOR",  label="LBL_CA",  desc="DESC_CONDACC",  helpLink="http://www.motivewave.com/studies/conditional_accumulator.htm",  overlay=false,  signals=false,  studyOverlay=true)public class CondAcc extends Study{  protected final static String LOW_PHIGH="LowPHigh";  protected final static String INCREMENT="Increment";  protected final static String START_VAL="StartVal";  enum Values { COND_ACC };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new BooleanDescriptor(LOW_PHIGH, get("LOW_PREV_HIGH"), true));    inputs.addRow(new DoubleDescriptor(INCREMENT, get("INCREMENT"), 1, 1, 10.0, .1));    inputs.addRow(new DoubleDescriptor(START_VAL, get("START_VAL"), 0.0, 0, 5.0, 1));    var lines=tab.addGroup(get("PATH_INDICATOR"));    lines.addRow(new PathDescriptor(Inputs.PATH, get("PATH"), defaults.getLineColor(), 1.0f, null, true, true, true));    lines.addRow(new IndicatorDescriptor(Inputs.IND, get("INDICATOR"), defaults.getLineColor(), null, false, true, true));    lines=tab.addGroup(get("SHADING"));    lines.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.PATH, 0, Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    lines.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.PATH, 0, Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(LOW_PHIGH, INCREMENT, START_VAL, Inputs.PATH);    var desc=createRD();    desc.setLabelSettings(LOW_PHIGH, INCREMENT, START_VAL);    desc.exportValue(new ValueDescriptor(Values.COND_ACC, get("LBL_CA"), new String[] { LOW_PHIGH, INCREMENT, START_VAL }));    desc.declarePath(Values.COND_ACC, Inputs.PATH);    desc.declareIndicator(Values.COND_ACC, Inputs.IND);    desc.setRangeKeys(Values.COND_ACC);  }  @Override  public void onLoad(Defaults defaults)  {    setMinBars(20);  }  @Override  protected void calculateValues(DataContext ctx)  {    boolean trendUp=getSettings().getBoolean(LOW_PHIGH);    double increment=getSettings().getDouble(INCREMENT);    double startValue=getSettings().getDouble(START_VAL);    DataSeries series=ctx.getDataSeries();    int index=0, endIndex=0;    endIndex=series.getEndIndex() - 1;    double low=0, prevHigh=0, high=0, prevLow=0;    double value=startValue;    for (int i=1; i <= endIndex; i++) {      if (trendUp) {        prevHigh=series.getHigh(i - 1);        low=series.getLow(i);        if (low >= prevHigh) value=value + increment;      }      else {        prevLow=series.getLow(i - 1);        high=series.getHigh(i);        if (high <= prevLow) value=value - increment;      }      series.setDouble(i, Values.COND_ACC, value);      series.setComplete(index);    }  }}