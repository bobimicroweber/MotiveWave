package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Ergodic TSI2 086 */@StudyHeader(  namespace="com.motivewave",  id="ID_ETSI2",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_ERGODIC_TSI2",  desc="DESC_ETSI2",  menu="MENU_WILLIAM_BLAU",  label="LBL_ETSI2",  helpLink="http://www.motivewave.com/studies/ergodic_tsi2.htm",  signals=false,  overlay=false,  studyOverlay=true)public class ErgodicTsiTwo extends Study{  final static String PERIOD5="Period5";  final static String PERIOD6="Period6";  final static String PERIOD7="Period7";  final static String IND3="Ind3";  enum Values { PRICE_D, ABS_PRICE_D, MA1, AMA1, MA2, AMA2, MA4, AMA4, MA5, AMA5, ETSI, ETSI2, SIG };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD1"), 21, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("PERIOD2"), 9, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD3, get("PERIOD3"), 9, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD4, get("PERIOD4"), 17, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(PERIOD5, get("PERIOD5"), 6, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(PERIOD6, get("PERIOD6"), 2, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(PERIOD7, get("SMOOTH_PERIOD"), 2, 1, 999, 1));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.EMA));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_ETSI2"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("LBL_ETSI"), defaults.getGreen(), 1.0f, null, true, false, true));    settings.addRow(new PathDescriptor(Inputs.PATH3, get("SIGNAL"), defaults.getRed(), 1.0f, null, true, false, true));    tab=sd.addTab(get("TAB_DISPLAY"));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("LBL_ETSI2"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("LBL_ETSI"), defaults.getGreen(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(IND3, get("SIGNAL"), defaults.getRed(), null, false, true, true));    var guides=tab.addGroup(get("GUIDES"));    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -999.1, 999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD1"), 21, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("PERIOD2"), 9, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD3, get("PERIOD3"), 9, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD4, get("PERIOD4"), 17, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(PERIOD5, get("PERIOD5"), 6, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(PERIOD6, get("PERIOD6"), 2, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(PERIOD7, get("SMOOTH_PERIOD"), 2, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.METHOD, Inputs.PATH, Inputs.PATH2, Inputs.PATH3, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3, Inputs.PERIOD4, PERIOD5,        PERIOD6, PERIOD7, Inputs.METHOD);    desc.exportValue(new ValueDescriptor(Values.ETSI2, get("LBL_ETSI2"), new String[] { Inputs.INPUT, Inputs.PERIOD,        Inputs.PERIOD2, Inputs.PERIOD3, Inputs.PERIOD4, PERIOD5, PERIOD6, PERIOD7, Inputs.METHOD }));    desc.declarePath(Values.ETSI2, Inputs.PATH);    desc.declarePath(Values.ETSI, Inputs.PATH2);    desc.declarePath(Values.SIG, Inputs.PATH3);    desc.declareIndicator(Values.ETSI2, Inputs.IND);    desc.declareIndicator(Values.ETSI, Inputs.IND2);    desc.declareIndicator(Values.SIG, IND3);    desc.setRangeKeys(Values.ETSI2, Values.ETSI, Values.SIG);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    int p3=getSettings().getInteger(Inputs.PERIOD3);    int p4=getSettings().getInteger(Inputs.PERIOD4);    int p5=getSettings().getInteger(PERIOD5);    int p6=getSettings().getInteger(PERIOD6);    int p7=getSettings().getInteger(PERIOD7);    int pp1=Math.max(p1, p4);    int pp2=Math.max(p2, p5);    int pp3=Math.max(p3, p6);    setMinBars(pp1 + pp2 + pp3 + p7 + 1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    if (index < 1) return;    int period1=getSettings().getInteger(Inputs.PERIOD);    int period2=getSettings().getInteger(Inputs.PERIOD2);    int period3=getSettings().getInteger(Inputs.PERIOD3);    int period4=getSettings().getInteger(Inputs.PERIOD4);    int period5=getSettings().getInteger(PERIOD5);    int period6=getSettings().getInteger(PERIOD6);    int sPeriod=getSettings().getInteger(PERIOD7);    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var method=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.EMA);    var series=ctx.getDataSeries();    int p1=Math.max(period1, period4);    int p2=Math.max(period2, period5);    int p3=Math.max(period3, period6);    Double etsi=0.0;    Double etsi2=0.0;    double price=series.getDouble(index, key, 0);    double prevP=series.getDouble(index - 1, key, 0);    double priceD=price - prevP;    double absPriceD=Math.abs(price - prevP);    series.setDouble(index, Values.PRICE_D, priceD);    series.setDouble(index, Values.ABS_PRICE_D, absPriceD);    if (index < p1 + 1) return;    Double ma1=series.ma(method, index, period1, Values.PRICE_D);    Double aMa1=series.ma(method, index, period1, Values.ABS_PRICE_D);    Double ma4=series.ma(method, index, period4, Values.PRICE_D);    Double aMa4=series.ma(method, index, period4, Values.ABS_PRICE_D);    series.setDouble(index, Values.MA1, ma1);    series.setDouble(index, Values.AMA1, aMa1);    series.setDouble(index, Values.MA4, ma4);    series.setDouble(index, Values.AMA4, aMa4);    if (index < p1 + p2 + 1) return;    Double ma2=series.ma(method, index, period2, Values.MA1);    Double aMa2=series.ma(method, index, period2, Values.AMA1);    Double ma5=series.ma(method, index, period5, Values.MA4);    Double aMa5=series.ma(method, index, period5, Values.AMA4);    series.setDouble(index, Values.MA2, ma2);    series.setDouble(index, Values.AMA2, aMa2);    series.setDouble(index, Values.MA5, ma5);    series.setDouble(index, Values.AMA5, aMa5);    if (index < p1 + p2 + p3 + 1) return;    Double ma3=series.ma(method, index, period3, Values.MA2);    Double aMa3=series.ma(method, index, period3, Values.AMA2);    Double ma6=series.ma(method, index, period6, Values.MA5);    Double aMa6=series.ma(method, index, period6, Values.AMA5);    if (ma3 == null || aMa3 == null || ma6 == null || aMa6 == null) return;    if (aMa3 != 0) {      etsi=(100 * ma3) / aMa3;      series.setDouble(index, Values.ETSI, etsi); // path2    }    if (aMa6 != 0) {      etsi2=(100 * ma6) / aMa6;      series.setDouble(index, Values.ETSI2, etsi2); // path    }    if (index < p1 + p2 + p3 + sPeriod + 1) return;    Double sig=series.ma(method, index, sPeriod, Values.ETSI); // path3    series.setDouble(index, Values.SIG, sig);    series.setComplete(index);  }}