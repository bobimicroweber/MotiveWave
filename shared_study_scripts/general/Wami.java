package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** WAMI Anthony Warren 095 */@StudyHeader(  namespace="com.motivewave",  id="ID_WAMI",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_WAMI",  label="LBL_WAMI",  desc="DESC_WAMI",  menu="MENU_OSCILLATORS",  helpLink="http://www.motivewave.com/studies/wami.htm",  overlay=false,  signals=false,  studyOverlay=true)public class Wami extends Study{  enum Values { DIFF, MA1, MA2, WAMI }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD1"), Enums.MAMethod.WMA));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD2, get("METHOD2"), Enums.MAMethod.EMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD1"), 4, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("PERIOD2"), 13, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD3, get("PERIOD3"), 13, 1, 999, 1));    tab=sd.addTab(get("TAB_DISPLAY"));    var lines=tab.addGroup(get("PATH_INDICATOR"));    lines.addRow(new PathDescriptor(Inputs.PATH, get("LBL_WAMI"), defaults.getLineColor(), 1.0f, null, true, true, true));    lines.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    var guides=tab.addGroup(get("GUIDE"));    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -999.1, 999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD, Inputs.METHOD2);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD1"), 4, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("PERIOD2"), 13, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD3, get("PERIOD3"), 13, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.METHOD2, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3);    desc.exportValue(new ValueDescriptor(Values.WAMI, get("LBL_WAMI"), new String[] { Inputs.INPUT, Inputs.METHOD, Inputs.METHOD2, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3 }));    desc.declarePath(Values.WAMI, Inputs.PATH);    desc.declareIndicator(Values.WAMI, Inputs.IND);    desc.setRangeKeys(Values.WAMI);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    int p3=getSettings().getInteger(Inputs.PERIOD3);    setMinBars(p1 + p2 + p3 + 1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    if (index < 1) return;    int period1=getSettings().getInteger(Inputs.PERIOD);    int period2=getSettings().getInteger(Inputs.PERIOD2);    int period3=getSettings().getInteger(Inputs.PERIOD3);    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var method1=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.WMA);    var method2=getSettings().getMAMethod(Inputs.METHOD2, Enums.MAMethod.EMA);    var series=ctx.getDataSeries();    double price=series.getDouble(index, key, 0);    double prevP=series.getDouble(index - 1, key, 0);    series.setDouble(index, Values.DIFF, price - prevP);    if (index < period1 + 1) return;    Double ma1=series.ma(method1, index, period1, Values.DIFF);    series.setDouble(index, Values.MA1, ma1);    if (index < period1 + period2 + 1) return;    Double ma2=series.ma(method2, index, period2, Values.MA1);    series.setDouble(index, Values.MA2, ma2);    if (index < period1 + period2 + period3 + 1) return;    Double wami=series.ma(method2, index, period3, Values.MA2);    series.setDouble(index, Values.WAMI, wami);    series.setComplete(index);  }}