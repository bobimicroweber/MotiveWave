package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Projection Oscillator Mel Winder 050 */@StudyHeader(  namespace="com.motivewave",  id="ID_PBO",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_PROJECTION_OSCILLATOR",  label="LBL_PBO",  desc="DESC_PBO",  // menu="MENU_MEL_WIDNER",  helpLink="http://www.motivewave.com/studies/projection_oscillator.htm",  signals=true,  overlay=false,  studyOverlay=true)public class ProjectionOscillator extends Study{  enum Values { PBO, SIG };  enum Signals { SELL, BUY };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.EMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PBO_PERIOD"), 14, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("SIGNAL_PERIOD"), 3, 1, 999, 1));    var colors=tab.addGroup(get("PATHS"));    colors.addRow(new PathDescriptor(Inputs.PATH, get("LBL_PBO"), defaults.getLineColor(), 1.0f, null, true, true, true));    colors.addRow(new PathDescriptor(Inputs.PATH2, get("SIGNAL"), defaults.getRed(), 1.0f, null, true, true, true));    colors=tab.addGroup(get("INDICATORS"));    colors.addRow(new IndicatorDescriptor(Inputs.IND, get("LBL_PBO"), null, null, false, true, true));    colors.addRow(new IndicatorDescriptor(Inputs.IND2, get("SIGNAL"), defaults.getRed(), null, false, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    var guides=tab.addGroup(get("GUIDE"));    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 5, -999.01, 999.01, .01, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PBO_PERIOD"), 14, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("SIGNAL_PERIOD"), 3, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.PATH2);    var desc=createRD();    desc.setLabelSettings(Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2);    desc.exportValue(new ValueDescriptor(Values.PBO, get("PL"), new String[] { Inputs.METHOD, Inputs.PERIOD }));    desc.exportValue(new ValueDescriptor(Values.SIG, get("PU"), new String[] { Inputs.METHOD, Inputs.PERIOD2 }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.PBO, Inputs.PATH);    desc.declarePath(Values.SIG, Inputs.PATH2);    desc.declareIndicator(Values.PBO, Inputs.IND);    desc.declareIndicator(Values.SIG, Inputs.IND2);    desc.setRangeKeys(Values.PBO);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars(p1 + p2);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int pboPeriod=getSettings().getInteger(Inputs.PERIOD);    if (index < pboPeriod) return;    int sigPeriod=getSettings().getInteger(Inputs.PERIOD2);    var method=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.EMA);    var series=ctx.getDataSeries();    int count=0;    double high=0, low=0, vHigh=0, vLow=0, pu=0, pl=Double.MAX_VALUE;    double mHigh=Utility.linRegLine(series, index, pboPeriod, Enums.BarInput.HIGH, 0)[1];    double mLow=Utility.linRegLine(series, index, pboPeriod, Enums.BarInput.LOW, 0)[1];    for (int i=(index - pboPeriod + 1); i <= index; i++) // move back 1 period    {      high=series.getDouble(i, Enums.BarInput.HIGH);      low=series.getDouble(i, Enums.BarInput.LOW);      vHigh=high + (mHigh * count); // y = a + mx      vLow=low + (mLow * count);      count++;      if (vHigh > pu) pu=vHigh; // highest high      if (vLow < pl) pl=vLow; // lowest low    }    double price=series.getDouble(index, Enums.BarInput.CLOSE);    double pbo=100 * (price - pl) / (pu - pl);    series.setDouble(index, Values.PBO, pbo);    if (index < pboPeriod + sigPeriod) return;    Double sig=series.ma(method, index, sigPeriod, Values.PBO);    series.setDouble(index, Values.SIG, sig);    // Check for signal events    boolean buy=crossedAbove(series, index, Values.PBO, Values.SIG);    boolean sell=crossedBelow(series, index, Values.PBO, Values.SIG);    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      var c=new Coordinate(series.getStartTime(index), pbo);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_PRICE_PBO", Util.round(price, 2), Util.round(pbo, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, price);    }    if (buy) {      var c=new Coordinate(series.getStartTime(index), pbo);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_PRICE_PBO", Util.round(price, 2), Util.round(pbo, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, price);    }    series.setComplete(index);  }}