package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.LineInfo;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** SlowK Divergence 098 */@StudyHeader(  namespace="com.motivewave",  id="ID_SKDV",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_SKDV",  name="NAME_SLOWK_DIVERGENCE",  desc="DESC_SKDV",  menu="MENU_OSCILLATORS",  helpLink="http://www.motivewave.com/studies/slowk_divergence.htm",  signals=false,  overlay=false,  studyOverlay=true)public class SlowKDivergence extends Study{  enum Values { FK, SK, SKDV };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD1"), 9, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("PERIOD2"), 3, 1, 999, 1));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.SMA));    tab=sd.addTab(get("TAB_DISPLAY"));    var settings=tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_SKDV"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.PATH, 0, Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD1"), 9, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("PERIOD2"), 3, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.METHOD, Inputs.PATH, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2, Inputs.METHOD);    desc.exportValue(new ValueDescriptor(Values.SKDV, get("LBL_SKDV"), new String[] { Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2, Inputs.METHOD }));    desc.declarePath(Values.SKDV, Inputs.PATH);    desc.declareIndicator(Values.SKDV, Inputs.IND);    desc.setRangeKeys(Values.SKDV);    desc.addHorizontalLine(new LineInfo(0, null, 1.0f, new float[] { 3f, 3f }));  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars((p1 * 2) + p2);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period1=getSettings().getInteger(Inputs.PERIOD);    if (index < period1) return;    int period2=getSettings().getInteger(Inputs.PERIOD2);    var method=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.WMA);    Object input=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var series=ctx.getDataSeries();    double fastK=Utility.stochK(series, index, period1, input);    series.setDouble(index, Values.FK, fastK);    if (index < period1 * 2) return;    Double sk=series.ma(method, index, period1, Values.FK);    series.setDouble(index, Values.SK, sk);    if (index < (period1 * 2) + period2) return;    Double skdv=series.ma(method, index, period2, Values.SK);    series.setDouble(index, Values.SKDV, skdv);    series.setComplete(index);  }}