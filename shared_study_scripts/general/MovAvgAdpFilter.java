package com.motivewave.platform.study.general;import java.awt.Color;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.ColorDescriptor;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Moving Average Adaptive Filter Perry Kaufman 071 */@StudyHeader(  namespace="com.motivewave",  id="ID_MAAF",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_MOVING_AVG_ADAPTIVE_FILTER",  label="LBL_MAAF",  desc="DESC_MAAF",  helpLink="http://www.motivewave.com/studies/moving_avg_adaptive_filter.htm",  requiresVolume=false,  signals=true,  overlay=false,  studyOverlay=true)public class MovAvgAdpFilter extends Study{  final static String FILTER="Filter";  enum Values { DIFF, AMA_DIFF, AMA, AMAF };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 10, 1, 999, 1));    inputs.addRow(new DoubleDescriptor(FILTER, get("FILTER"), .15, 0, 9.01, .01));    var settings=tab.addGroup(get("COLORS"));    settings.addRow(new ColorDescriptor(Inputs.UP_COLOR, get("LBL_UP_COLOR"), defaults.getGreen()));    settings.addRow(new ColorDescriptor(Inputs.DOWN_COLOR, get("LBL_DOWN_COLOR"), defaults.getRed()));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var guides=tab.addGroup(get("GUIDE"));    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, 0, 2.001, .001, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);        // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("LBL_PERIOD"), 10, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(FILTER, Inputs.UP_COLOR, Inputs.DOWN_COLOR);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD, FILTER);    desc.exportValue(new ValueDescriptor(Values.AMAF, get("LBL_MAAF"), new String[] { Inputs.INPUT, Inputs.PERIOD }));    desc.declareBars(Values.AMAF);    desc.declareIndicator(Values.AMAF, Inputs.IND);    desc.setRangeKeys(Values.AMAF);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars((p1 * 2) + 1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period=getSettings().getInteger(Inputs.PERIOD);    if (index < 1) return;    Object input=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    double filter=getSettings().getDouble(FILTER);    var series=ctx.getDataSeries();    double fastest=0.6667;    double slowest=0.0645;    double price=series.getDouble(index, input, 0);    double prevP=series.getDouble(index - 1, input, 0);    double diff=Math.abs(price - prevP);    series.setDouble(index, Values.DIFF, diff);    if (index < period + 1) return;    double priorP=series.getDouble(index - period, input, price);    double signal=Math.abs(price - priorP); // could be 0    double noise=series.sum(index, period, Values.DIFF);    if (noise == 0) return;    double ratio=signal / noise;    double sm=Math.pow(ratio * (fastest - slowest) + slowest, 2);    double prevAma=series.getDouble(index - 1, Values.AMA, price); // returns price on first try.    double ama=prevAma + sm * (price - prevAma);    series.setDouble(index, Values.AMA, ama);    double amaDiff=ama - prevAma;    series.setDouble(index, Values.AMA_DIFF, amaDiff);    if (index < (period * 2) + 1) return;    double amaF=series.std(index, period, Values.AMA_DIFF) * filter;    series.setDouble(index, Values.AMAF, amaF);    var midGuide=getSettings().getGuide(Inputs.MIDDLE_GUIDE);    double midG=midGuide.getValue();    Color upC=getSettings().getColor(Inputs.UP_COLOR);    Color dnC=getSettings().getColor(Inputs.DOWN_COLOR);    if (amaF > midG) series.setBarColor(index, Values.AMAF, upC);    else series.setBarColor(index, Values.AMAF, dnC);    series.setComplete(index);  }}