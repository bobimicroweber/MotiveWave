package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.GuideInfo;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** D Three Ten Oscillator Bill Mars 047 */@StudyHeader(  namespace="com.motivewave",  id="ID_D3TO",  rb="com.motivewave.platform.study.nls.strings2",  desc="DESC_D3TO",  name="NAME_D_THREE_TEN_OSC",  label="LBL_D3TO",  menu="MENU_BILL_MARS",  helpLink="http://www.motivewave.com/studies/d_three_ten_oscillator.htm",  signals=true,  overlay=false,  studyOverlay=true)public class DThreeTenOsc extends Study{  final static String FILTER="Filter";  enum Values { MA3DAY, MA10DAY, MA16DAY, V1, V2 };  protected enum Signals { SELL, BUY };  double highSell=Double.NEGATIVE_INFINITY;  double lowBuy=Double.MAX_VALUE;  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.MIDPOINT));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.EMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD1"), 3, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("PERIOD2"), 10, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD3, get("PERIOD3"), 16, 1, 999, 1));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("FAST"), defaults.getLineColor(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("SLOW"), defaults.getRed(), 1.0f, null, true, true, true));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("FAST"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("SLOW"), defaults.getRed(), null, false, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var guides=tab.addGroup(get("GUIDES"));    var topDesc=new GuideDescriptor(Inputs.TOP_GUIDE, get("TOP_GUIDE"), .005, 0, 999.001, .001, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -99.001, 99.001, .001, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var bottomDesc=new GuideDescriptor(Inputs.BOTTOM_GUIDE, get("BOTTOM_GUIDE"), -.005, -999.001, 0, .001, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD1"), 3, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("PERIOD2"), 10, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD3, get("PERIOD3"), 16, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.PATH2, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);    var desc=createRD();    desc.setLabelSettings(Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3);    desc.exportValue(new ValueDescriptor(Values.V1, get("V1"), new String[] { Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3 }));    desc.exportValue(new ValueDescriptor(Values.V2, get("V2"), new String[] { Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3 }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.V1, Inputs.PATH);    desc.declarePath(Values.V2, Inputs.PATH2);    desc.declareIndicator(Values.V1, Inputs.IND);    desc.declareIndicator(Values.V2, Inputs.IND2);    desc.setRangeKeys(Values.V1, Values.V2);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    int p3=getSettings().getInteger(Inputs.PERIOD3);    setMinBars(Math.max(Math.max(p1, p2), p3) * 4);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period1=getSettings().getInteger(Inputs.PERIOD);    int period2=getSettings().getInteger(Inputs.PERIOD2);    int period3=getSettings().getInteger(Inputs.PERIOD3);    int longest=Math.max(Math.max(period1, period2), period3);    if (index < longest) return;    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.MIDPOINT);    var method=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.EMA);    var series=ctx.getDataSeries();    double high=series.getDouble(index, Enums.BarInput.HIGH, 0.0);    double low=series.getDouble(index, Enums.BarInput.LOW, 0.0);    Double ma3Day=series.ma(method, index, period1, key);    series.setDouble(index, Values.MA3DAY, ma3Day);    if (index < longest * 2) return;    Double ma10Day=series.ma(method, index, period2, Values.MA3DAY);    series.setDouble(index, Values.MA10DAY, ma10Day);    if (index < longest * 3) return;    if (ma3Day == null || ma10Day == null) return;    double v1=ma3Day - ma10Day;    series.setDouble(index, Values.V1, v1);    if (index < longest * 4) return;    Double v2=series.ma(method, index, period3, Values.V1);    series.setDouble(index, Values.V2, v2);    // Check for signal events    GuideInfo topGuide=getSettings().getGuide(Inputs.TOP_GUIDE);    double topG=topGuide.getValue();    GuideInfo bottomGuide=getSettings().getGuide(Inputs.BOTTOM_GUIDE);    double bottG=bottomGuide.getValue();    boolean sell=crossedBelow(series, index, Values.V1, Values.V2) && (v1 > topG) && (v1 > highSell);    boolean buy=crossedAbove(series, index, Values.V1, Values.V2) && (v1 < bottG) && (v1 < lowBuy);    boolean wasBuy = index == series.size()-1 && series.getBoolean(index, Signals.BUY, false);    boolean wasSell = index == series.size()-1 && series.getBoolean(index, Signals.SELL, false);    series.setBoolean(index, Signals.BUY, buy);    series.setBoolean(index, Signals.SELL, sell);    if (sell) {      lowBuy=Double.MAX_VALUE;      highSell=v1;      var c=new Coordinate(series.getStartTime(index), v1);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_HIGH_D3TO", Util.round(high, 2), Util.round(v1, 3));      if (!wasSell && marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, high);    }    if (buy) {      highSell=Double.NEGATIVE_INFINITY;      lowBuy=v1;      var c=new Coordinate(series.getStartTime(index), v1);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_LOW_D3TO", Util.round(low, 2), Util.round(v1, 3));      if (!wasBuy && marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, low);    }    series.setComplete(index);  }}