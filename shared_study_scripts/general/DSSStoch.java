package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.BooleanDescriptor;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Double Smooth Stochastic 001 */@StudyHeader(  namespace="com.motivewave",  id="ID_DSSTD",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_DSSTD",  name="NAME_DOUBLE_SMOOTH_STOCHASTIC",  desc="DESC_DSSTD",  menu="MENU_WILLIAM_BLAU",  helpLink="http://www.motivewave.com/studies/double_smooth_stochastic.htm",  signals=true,  overlay=false,  studyOverlay=true)public class DSSStoch extends Study{  enum Values { NUM, DEN, SSNUM, SSDEN, SS, DSS, SDSS };  protected enum Signals { SELL, BUY };  final static String HIGH_LOW="HighLow";  double highSell=Double.NEGATIVE_INFINITY;  double lowBuy=Double.MAX_VALUE;  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.EMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("K_PERIOD"), 2, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("SINGLE_SMOOTH_PERIOD"), 3, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD3, get("DOUBLE_SMOOTH_PERIOD"), 15, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD4, get("SMOOTHED_DS_PERIOD"), 3, 1, 999, 1));    inputs.addRow(new BooleanDescriptor(HIGH_LOW, get("HIGH_LOW"), true));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_DSSTD"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("SIGNAL"), defaults.getRed(), 1.0f, null, true, false, true));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("LBL_DSSTD"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("SIGNAL"), defaults.getRed(), null, false, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var guides=tab.addGroup(get("GUIDES"));    var topDesc=new GuideDescriptor(Inputs.TOP_GUIDE, get("TOP_GUIDE"), 70, 0, 999.1, .1, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 50, 0, 999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var bottomDesc=new GuideDescriptor(Inputs.BOTTOM_GUIDE, get("BOTTOM_GUIDE"), 30, 0, 999.1, .1, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));        // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("K_PERIOD"), 2, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("SINGLE_SMOOTH_PERIOD"), 3, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD3, get("DOUBLE_SMOOTH_PERIOD"), 15, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD4, get("SMOOTHED_DS_PERIOD"), 3, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(HIGH_LOW, Inputs.PATH, Inputs.PATH2, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3, Inputs.PERIOD4, HIGH_LOW);    desc.exportValue(new ValueDescriptor(Values.DSS, get("LBL_DSSTD"), new String[] { Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3 }));    desc.exportValue(new ValueDescriptor(Values.SDSS, get("SDSS"), new String[] { Inputs.METHOD, Inputs.PERIOD4, }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.DSS, Inputs.PATH);    desc.declarePath(Values.SDSS, Inputs.PATH2);    desc.declareIndicator(Values.DSS, Inputs.IND);    desc.declareIndicator(Values.SDSS, Inputs.IND2);    desc.setRangeKeys(Values.DSS, Values.SDSS);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    int p3=getSettings().getInteger(Inputs.PERIOD3);    int p4=getSettings().getInteger(Inputs.PERIOD4);    setMinBars(p1 + p2 + p3 + p4);  }    @Override  protected void precalculate(DataContext ctx)  {    super.precalculate(ctx);    highSell=Double.NEGATIVE_INFINITY;    lowBuy=Double.MAX_VALUE;  }  @Override  protected void calculate(int index, DataContext ctx)  {    int kPeriod=getSettings().getInteger(Inputs.PERIOD);    if (index < kPeriod) return;    int ssPeriod=getSettings().getInteger(Inputs.PERIOD2);    int dsPeriod=getSettings().getInteger(Inputs.PERIOD3);    int sdsP=getSettings().getInteger(Inputs.PERIOD4);    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var method=getSettings().getMAMethod(Inputs.METHOD);    boolean hl=getSettings().getBoolean(HIGH_LOW);    var series=ctx.getDataSeries();    double lowest=0.0, highest=0.0;    double price=series.getDouble(index, key, 0);    if (hl) {      lowest=series.lowest(index, kPeriod, Enums.BarInput.LOW);      highest=series.highest(index, kPeriod, Enums.BarInput.HIGH);    }    else {      lowest=series.lowest(index, kPeriod, key);      highest=series.highest(index, kPeriod, key);    }    double num=price - lowest;    double den=highest - lowest; // this version of fast K = 100*num/den cannot use stochK() method    series.setDouble(index, Values.NUM, num);    series.setDouble(index, Values.DEN, den);    if (index < kPeriod + ssPeriod) return;    Double ssNum=series.ma(method, index, ssPeriod, Values.NUM); // single smoothed numerator    Double ssDen=series.ma(method, index, ssPeriod, Values.DEN); // single smooth denominator    series.setDouble(index, Values.SSNUM, ssNum);    series.setDouble(index, Values.SSDEN, ssDen);    if (index < kPeriod + ssPeriod + dsPeriod) return;    Double dsNum=series.ma(method, index, dsPeriod, Values.SSNUM); // double smoothed numerator    Double dsDen=series.ma(method, index, dsPeriod, Values.SSDEN);    if (dsNum == null || dsDen == null) return;    if (dsDen == 0) return;    double dss=100.0 * dsNum / dsDen; // double smoothed stochastic DSS    series.setDouble(index, Values.DSS, dss);    if (index < kPeriod + ssPeriod + dsPeriod + sdsP) return;    Double sdss=series.ma(method, index, sdsP, Values.DSS); // smoothed DSS    series.setDouble(index, Values.SDSS, sdss);    // Check for signal events    var topGuide=getSettings().getGuide(Inputs.TOP_GUIDE);    double topG=topGuide.getValue();    var bottomGuide=getSettings().getGuide(Inputs.BOTTOM_GUIDE);    double bottG=bottomGuide.getValue();    // Should we be using dss-1 here or dss?    // If we just use dss, we can get conditions where a cross appears to happen above top/below bottom where the cross is    // in between the current and previous bar.  Stick with dss until we have further clarification     //double prevDss = series.getDouble(index-1, Values.DSS, 0);    boolean sell=crossedBelow(series, index, Values.DSS, Values.SDSS) && dss > topG && (dss > highSell);    boolean buy=crossedAbove(series, index, Values.DSS, Values.SDSS) && dss < bottG && (dss < lowBuy);    boolean wasBuy = index == series.size()-1 && series.getBoolean(index, Signals.BUY, false);    boolean wasSell = index == series.size()-1 && series.getBoolean(index, Signals.SELL, false);    series.setBoolean(index, Signals.BUY, buy);    series.setBoolean(index, Signals.SELL, sell);    if (sell) {      highSell=dss;      lowBuy=Double.MAX_VALUE;      var c=new Coordinate(series.getStartTime(index), dss);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER); // set default colour to getRed() in initialize      String msg = get("SELL_PRICE_DSSTD", Util.round(price, 2), Util.round(dss, 3));      if (!wasSell && marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, dss);    }    if (buy) {      lowBuy=dss;      highSell=Double.NEGATIVE_INFINITY;      var c=new Coordinate(series.getStartTime(index), dss);      var marker=getSettings().getMarker(Inputs.UP_MARKER); // set default colour to getGreen() in initialize above      String msg = get("BUY_PRICE_DSSTD", Util.round(price, 2), Util.round(dss, 3));      if (!wasBuy && marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, dss);    }        // reset the high sell/ low buy when between the guides    if (dss < topG) highSell = Double.NEGATIVE_INFINITY;    if (dss > bottG) lowBuy = Double.MAX_VALUE;        series.setComplete(index);  }}