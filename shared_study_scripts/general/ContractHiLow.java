package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Contract Hi-Low 084 */@StudyHeader(  namespace="com.motivewave",  id="ID_CTHL",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_CONTRACT_HI_LOW",  label="LBL_CTHL",  desc="DESC_CTHL",  helpLink="http://www.motivewave.com/studies/contract_hi_low.htm",  signals=false,  overlay=false,  studyOverlay=true)public class ContractHiLow extends Study{  enum Values { CONHI, CONLOW };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var colors=tab.addGroup(get("PATHS"));    colors.addRow(new PathDescriptor(Inputs.PATH, get("HIGH"), defaults.getRed(), 1.0f, null, true, true, true));    colors.addRow(new PathDescriptor(Inputs.PATH2, get("LOW"), defaults.getLineColor(), 1.0f, null, true, true, true));    colors=tab.addGroup(get("INDICATORS"));    colors.addRow(new IndicatorDescriptor(Inputs.IND, get("HIGH"), defaults.getRed(), null, false, true, true));    colors.addRow(new IndicatorDescriptor(Inputs.IND2, get("LOW"), null, null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.PATH, Inputs.PATH2);    var desc=createRD();    desc.setLabelSettings();    desc.exportValue(new ValueDescriptor(Values.CONHI, get("HIGH"), new String[] {}));    desc.exportValue(new ValueDescriptor(Values.CONLOW, get("LOW"), new String[] {}));    desc.declarePath(Values.CONHI, Inputs.PATH);    desc.declarePath(Values.CONLOW, Inputs.PATH2);    desc.declareIndicator(Values.CONHI, Inputs.IND);    desc.declareIndicator(Values.CONLOW, Inputs.IND2);    desc.setRangeKeys(Values.CONHI, Values.CONLOW);  }  @Override  public void onLoad(Defaults defaults) { setMinBars(20); }  @Override  protected void calculate(int index, DataContext ctx)  {    if (index < 1) return;    var series=ctx.getDataSeries();    double hi=series.getDouble(index, Enums.BarInput.HIGH, 0.0);    double low=series.getDouble(index, Enums.BarInput.LOW, 0.0);    double conHi=series.getDouble(index - 1, Values.CONHI, hi);    double conLow=series.getDouble(index - 1, Values.CONLOW, low);    if (hi > conHi) conHi=hi;    if (low < conLow) conLow=low;    series.setDouble(index, Values.CONHI, conHi);    series.setDouble(index, Values.CONLOW, conLow);    series.setComplete(index);  }}