package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Fast & Slow ST 091 */@StudyHeader(  namespace="com.motivewave",  id="ID_FSST",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_FAST_SLOW_ST",  desc="DESC_FSST",  label="LBL_FSST",  // menu="MENU_OSCILLATORS",  helpLink="http://www.motivewave.com/studies/fast_and_slow_st.htm",  signals=false,  overlay=false,  studyOverlay=true)public class FastSlowST extends Study{  enum Values { MOM, FSK, V4, FSST, WFSST, FASTK };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD1"), 3, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("PERIOD2"), 6, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD3, get("PERIOD3"), 9, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD4, get("PERIOD4"), 9, 1, 999, 1));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("SIGNAL_METHOD"), Enums.MAMethod.WMA));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_FSST"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("SIGNAL"), defaults.getRed(), 1.0f, null, true, false, true));    tab=sd.addTab(get("TAB_DISPLAY"));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("LBL_FSST"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("SIGNAL"), defaults.getRed(), null, false, true, true));    var guides=tab.addGroup(get("GUIDE"));    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 50, -999.1, 999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD1"), 3, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("PERIOD2"), 6, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD3, get("PERIOD3"), 9, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD4, get("PERIOD4"), 9, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.METHOD, Inputs.PATH, Inputs.PATH2);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3, Inputs.PERIOD4, Inputs.METHOD);    desc.exportValue(new ValueDescriptor(Values.FSST, get("LBL_FSST"), new String[] { Inputs.INPUT, Inputs.PERIOD,        Inputs.PERIOD2, Inputs.PERIOD3, Inputs.PERIOD4, Inputs.METHOD }));    desc.declarePath(Values.FSST, Inputs.PATH);    desc.declarePath(Values.WFSST, Inputs.PATH2);    desc.declareIndicator(Values.FSST, Inputs.IND);    desc.declareIndicator(Values.WFSST, Inputs.IND2);    desc.setRangeKeys(Values.FSST, Values.WFSST);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    int p3=getSettings().getInteger(Inputs.PERIOD3);    int p4=getSettings().getInteger(Inputs.PERIOD4);    setMinBars(p1 + p2 + (p3 * 2) + p4 + 1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period1=getSettings().getInteger(Inputs.PERIOD);    if (index < period1) return;    int period2=getSettings().getInteger(Inputs.PERIOD2);    int period3=getSettings().getInteger(Inputs.PERIOD3);    int period4=getSettings().getInteger(Inputs.PERIOD4);    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var method=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.WMA);    var series=ctx.getDataSeries();    double mom=Utility.momentum(ctx, index, period1, key);    series.setDouble(index, Values.MOM, mom);    if (index < period1 + 1) return;    double prevMom=series.getDouble(index - 1, Values.MOM);    double prevFsk=series.getDouble(index - 1, Values.FSK, 0); // returns 0 on first try    double fsk=(.03 * (mom - prevMom)) + ((1 - .03) * prevFsk);    series.setDouble(index, Values.FSK, fsk);    if (index < period1 + period2 + 1) return;    Double v4=series.ma(method, index, period2, Values.FSK);    series.setDouble(index, Values.V4, v4);    if (index < period1 + period2 + period3 + 1) return;    double fastk=Utility.stochK(series, index, period3, key);    series.setDouble(index, Values.FASTK, fastk);    if (index < period1 + period2 + (period3 * 2) + 1) return;    Double slowk=series.ma(method, index, period3, Values.FASTK);    if (slowk == null) return;    double fsst=500 * v4 + slowk;    series.setDouble(index, Values.FSST, fsst);    if (index < period1 + period2 + (period3 * 2) + period4 + 1) return;    Double wfsst=series.ma(method, index, period4, Values.FSST); // weighted fsst    series.setDouble(index, Values.WFSST, wfsst);    series.setComplete(index);  }}