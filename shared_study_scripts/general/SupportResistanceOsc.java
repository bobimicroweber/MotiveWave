package com.motivewave.platform.study.general;import java.awt.Color;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.ColorDescriptor;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Support and Resistance Oscillator 055 */@StudyHeader(  namespace="com.motivewave",  id="ID_SRO",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_SUPPORT_AND_RESISTANCE_OSC",  label="LBL_SRO",  desc="DESC_SRO",  menu="MENU_OSCILLATORS",  helpLink="http://www.motivewave.com/studies/supportandresistance_oscillator.htm",  overlay=false,  signals=true,  studyOverlay=true)public class SupportResistanceOsc extends Study{  enum Values { SRO };  enum Signals { SELL, BUY };  double highSell=Double.NEGATIVE_INFINITY;  double lowBuy=Double.MAX_VALUE;  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    var settings=tab.addGroup(get("COLORS"));    settings.addRow(new ColorDescriptor(Inputs.UP_COLOR, get("LBL_UP_COLOR"), defaults.getGreen()));    settings.addRow(new ColorDescriptor(Inputs.NEUTRAL_COLOR, get("LBL_NEUTRAL_COLOR"), defaults.getBlue(), true, true));    settings.addRow(new ColorDescriptor(Inputs.DOWN_COLOR, get("LBL_DOWN_COLOR"), defaults.getRed()));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var guides=tab.addGroup(get("GUIDES"));    var topDesc=new GuideDescriptor(Inputs.TOP_GUIDE, get("TOP_GUIDE"), .7, 0, 1.01, .01, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), .5, 0, 1.01, .01, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var bottomDesc=new GuideDescriptor(Inputs.BOTTOM_GUIDE, get("BOTTOM_GUIDE"), .3, 0, 1.01, .01, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.UP_COLOR, Inputs.NEUTRAL_COLOR, Inputs.DOWN_COLOR, Inputs.UP_MARKER, Inputs.DOWN_MARKER);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT);    desc.exportValue(new ValueDescriptor(Values.SRO, get("SRO"), new String[] { Inputs.INPUT }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareBars(Values.SRO);    desc.declareIndicator(Values.SRO, Inputs.IND);    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.setRangeKeys(Values.SRO);  }  @Override  public void onLoad(Defaults defaults)  {    setMinBars(20);  }  @Override  protected void calculate(int index, DataContext ctx)  {    var series=ctx.getDataSeries();    if (index < 1) return;    Object input=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    double sro=0.0;    double rHigh=series.getHigh(index); // getRealHigh(index);    double rLow=series.getLow(index); // getRealLow(index);    double open=series.getOpen(index);    double close=series.getDouble(index, input, 0);    double tRange=series.getTrueRange(index);    if (tRange != 0.0) sro=((rHigh - open) + (close - rLow)) / (2 * tRange);    series.setDouble(index, Values.SRO, sro);    var topGuide=getSettings().getGuide(Inputs.TOP_GUIDE);    double topG=topGuide.getValue();    var bottomGuide=getSettings().getGuide(Inputs.BOTTOM_GUIDE);    double bottG=bottomGuide.getValue();    Color upC=getSettings().getColor(Inputs.UP_COLOR);    Color nC=getSettings().getColor(Inputs.NEUTRAL_COLOR);    Color dnC=getSettings().getColor(Inputs.DOWN_COLOR);    series.setBarColor(index, Values.SRO, nC);    if (sro > topG) series.setBarColor(index, Values.SRO, upC);    if (sro < bottG) series.setBarColor(index, Values.SRO, dnC);    // Check for signal events    boolean sell=(sro > topG) && (sro > highSell); // && (prevSro > sro)    boolean buy=(sro < bottG) && (sro < lowBuy); // && (prevSro < sro)    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);        if (sell) {      lowBuy=Double.MAX_VALUE;      highSell=sro;      var c=new Coordinate(series.getStartTime(index), sro);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_HIGH_SRO", Util.round(rHigh, 2), Util.round(sro, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, rHigh);    }    if (buy) {      highSell=Double.NEGATIVE_INFINITY;      lowBuy=sro;      var c=new Coordinate(series.getStartTime(index), sro);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_LOW_SRO", Util.round(rLow, 2), Util.round(sro, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, rLow);    }    series.setComplete(index);  }}