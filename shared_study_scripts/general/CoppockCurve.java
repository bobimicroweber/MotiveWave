package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.MarkerInfo;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Coppock curve 003 */@StudyHeader(  namespace="com.motivewave",  id="ID_COP_CURVE",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_COPPOCK_CURVE",  desc="DESC_COPPOCK",  label="LBL_COPC",  menu="MENU_OSCILLATORS",  helpLink="http://www.motivewave.com/studies/coppock_curve.htm",  signals=true,  overlay=false,  studyOverlay=true)public class CoppockCurve extends Study{  enum Values { COPPOCK, ROC_SUM }  protected enum Signals { BUY, SELL }  double highSell=Double.NEGATIVE_INFINITY;  double lowBuy=Double.MAX_VALUE;  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    // Set defaults to 14, 11, 10 for monthly time scale; 294, 231, 210 for daily scale.    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD1"), 14, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("PERIOD2"), 11, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD3, get("SMOOTH_PERIOD"), 10, 1, 999, 1));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.WMA));    var settings=tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_COPC"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var guides=tab.addGroup(get("GUIDES"));    var topDesc=new GuideDescriptor(Inputs.TOP_GUIDE, get("TOP_GUIDE"), .001, 0, 2.001, .001, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -1.001, 1.001, .001, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var bottomDesc=new GuideDescriptor(Inputs.BOTTOM_GUIDE, get("BOTTOM_GUIDE"), -.001, -2.001, 0, .001, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    var shade=tab.addGroup(get("SHADING"));    shade.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    shade.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD1"), 14, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("PERIOD2"), 11, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD3, get("SMOOTH_PERIOD"), 10, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3, Inputs.METHOD);    desc.exportValue(new ValueDescriptor(Values.COPPOCK, get("LBL_COPC"), new String[] { Inputs.INPUT, Inputs.PERIOD,        Inputs.PERIOD2, Inputs.PERIOD3, Inputs.METHOD }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.COPPOCK, Inputs.PATH);    desc.declareIndicator(Values.COPPOCK, Inputs.IND);    desc.setRangeKeys(Values.COPPOCK);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    int p3=getSettings().getInteger(Inputs.PERIOD3);    setMinBars(Math.max(p1, p2) + p3);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int periodRoc1=getSettings().getInteger(Inputs.PERIOD);    int periodRoc2=getSettings().getInteger(Inputs.PERIOD2);    double longestPeriod=Math.max(periodRoc1, periodRoc2);    if (index < longestPeriod) return;    var series=ctx.getDataSeries();    // Normally based on close but user may chose.    Object input=getSettings().getInput(Inputs.INPUT);    double price=series.getDouble(index, input, 0);    Double roc1=series.roc(index, periodRoc1, input);    if (roc1 == null) roc1=0.0;    Double roc2=series.roc(index, periodRoc2, input);    if (roc2 == null) roc2=0.0;    series.setDouble(index, Values.ROC_SUM, roc1 + roc2);    int periodSmooth=getSettings().getInteger(Inputs.PERIOD3);    if (index < longestPeriod + periodSmooth) return;    var method=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.WMA);    Double coppock=series.ma(method, index, periodSmooth, Values.ROC_SUM);    if (coppock == null) return;    series.setDouble(index, Values.COPPOCK, coppock);    // Check for signal events    var topGuide=getSettings().getGuide(Inputs.TOP_GUIDE);    double topG=topGuide.getValue();    var bottomGuide=getSettings().getGuide(Inputs.BOTTOM_GUIDE);    double bottG=bottomGuide.getValue();    double prevC=series.getDouble(index - 1, Values.COPPOCK, 0.0);    boolean wasBuy = index == series.size()-1 && series.getBoolean(index, Signals.BUY, false);    boolean wasSell = index == series.size()-1 && series.getBoolean(index, Signals.SELL, false);    boolean sell=(coppock > topG) && (prevC > coppock) && (coppock > highSell); // peaked above topG    boolean buy=(coppock < bottG && prevC < coppock) && (coppock < lowBuy); // trough below bottG    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      lowBuy=Double.MAX_VALUE;      highSell=coppock;      Coordinate c=new Coordinate(series.getStartTime(index), coppock);      MarkerInfo marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_PRICE_COPPOCK", Util.round(price, 2), Util.round(coppock, 3));      if (!wasSell && marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, price);    }    if (buy) {      highSell=Double.NEGATIVE_INFINITY;      lowBuy=coppock;      Coordinate c2=new Coordinate(series.getStartTime(index), coppock);      MarkerInfo marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_PRICE_COPPOCK", Util.round(price, 2), Util.round(coppock, 3));      if (!wasBuy && marker.isEnabled()) addFigure(new Marker(c2, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, price);    }    series.setComplete(index);  }}