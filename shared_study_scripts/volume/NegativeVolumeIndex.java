package com.motivewave.platform.study.volume;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Negative Volume Index 009*/@StudyHeader(    namespace="com.motivewave",     id="ID_NEG_VOL",     rb="com.motivewave.platform.study.nls.strings2",    label="LBL_NVI",    name="NAME_NEGATIVE_VOLUME_INDEX",    tabName="TAB_NEG_VOL",    desc="DESC_NEG_VOL",    menu="MENU_VOLUME_BASED",    helpLink = "http://www.motivewave.com/studies/negative_volume_index.htm",    overlay=false,    requiresVolume=true,    studyOverlay=true)public class NegativeVolumeIndex extends Study{	enum Values { VAL }		@Override	public void initialize(Defaults defaults)	{    var sd = createSD();    var tab = sd.addTab(get("TAB_GENERAL"));        var settings = tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("PATH"), defaults.getLineColor(), 1.0f, null, true, false, false));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    var guides = tab.addGroup(get("GUIDE"));    var mg = new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -999.001, 999.001, .001, true);    mg.setDash(new float[] {3, 3});    guides.addRow(mg);     settings = tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.PATH, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);    var desc = createRD();    desc.exportValue(new ValueDescriptor(Values.VAL, get("LBL_NVI"), new String[] {}));    desc.declarePath(Values.VAL, Inputs.PATH);    desc.declareIndicator(Values.VAL, Inputs.IND);    desc.setRangeKeys(Values.VAL);  }  @Override  public void onLoad(Defaults defaults)  {    setMinBars(20);  }    @Override    protected void calculate(int index, DataContext ctx)  {    if (index < 1) return;    var series = ctx.getDataSeries();        double close = series.getClose(index);    double prevClose = series.getClose(index - 1);     double volume = series.getVolume(index);    double prevVolume = series.getVolume(index - 1);    double prevNvi = series.getDouble(index-1, Values.VAL, 1);        double temp = (close - prevClose) / prevClose;    if (prevVolume < volume) temp = 0;    double nvi = prevNvi + temp;           series.setDouble(index, Values.VAL, nvi);    series.setComplete(index);  }  }