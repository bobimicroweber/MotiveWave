package com.motivewave.platform.study.volume;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SettingTab;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;import com.motivewave.platform.study.general.Utility;/** UpSide DownSide Volume  101 */@StudyHeader(    namespace = "com.motivewave",    id = "ID_USDSV",    rb = "com.motivewave.platform.study.nls.strings2",    name = "NAME_UPSIDE_DOWNSIDE_VOLUME",    label="LBL_USDSV",    desc = "DESC_USDSV",    helpLink = "http://www.motivewave.com/studies/upside_dnside_volume.htm",     requiresVolume = true,    signals = true,    overlay = false,    studyOverlay = true)public class UpSideDownSideVolume extends Study{  enum Values { UDVOL }  enum Signals { SELL, BUY }  @Override  public void initialize(Defaults defaults)   {    var sd = createSD();    SettingTab tab = sd.addTab(get("TAB_GENERAL"));    var inputs = tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 50, 1, 999, 1));     var settings = tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_USDSV"),  defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    var guides = tab.addGroup(get("GUIDE"));    var mg = new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 1, -999.1, 999.1, .1, true);    mg.setDash(new float[] {3, 3});    guides.addRow(mg);        tab = sd.addTab(get("TAB_DISPLAY"));        settings = tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    var markers = tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE, Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 50, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);     var desc = createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD);    desc.exportValue(new ValueDescriptor(Values.UDVOL, get("LBL_USDSV"), new String[] { Inputs.INPUT, Inputs.PERIOD }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.UDVOL, Inputs.PATH);    desc.declareIndicator(Values.UDVOL, Inputs.IND);    desc.setRangeKeys(Values.UDVOL);  }  @Override  public void onLoad(Defaults defaults)  {    int p1 = getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1 + 1);  }    @Override  protected void calculate(int index, DataContext ctx)   {    int period = getSettings().getInteger(Inputs.PERIOD);    if (index < (period + 1)) return;        Object key = getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var series = ctx.getDataSeries();    double price = series.getDouble(index, key, 0);    double udVol = Utility.upDnVol(series, index, period, key);    series.setDouble(index, Values.UDVOL, udVol);    // Check for signal events    var midGuide = getSettings().getGuide(Inputs.MIDDLE_GUIDE);    double midG = midGuide.getValue();    double lastU = series.getDouble(index-1, Values.UDVOL, 0.0);     boolean sell = (udVol > midG) && ( lastU < midG);    boolean buy = (udVol < midG) && ( lastU > midG);        series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {       var c = new Coordinate(series.getStartTime(index), midG);      var marker = getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_PRICE_USDSV", Util.round(price, 2), Util.round(udVol, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, price);    }    if (buy) {      var c = new Coordinate(series.getStartTime(index), midG);      var marker = getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_PRICE_USDSV", Util.round(price, 2), Util.round(udVol, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, price);    }    series.setComplete(index);  }}