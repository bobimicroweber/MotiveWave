package com.motivewave.platform.study.volume;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;import com.motivewave.platform.study.general.Utility;/** Negative Volume Disparity Indicator  067 */@StudyHeader(    namespace="com.motivewave",     id="ID_NVDI",     rb="com.motivewave.platform.study.nls.strings2",    desc="DESC_NVDI",    label="LBL_NVDI",    name="NAME_NEGATIVE_VOLUME_DISPARITY_INDICATOR",     helpLink = "http://www.motivewave.com/studies/negative_volume_disparity_indicator.htm",    requiresVolume=true,    overlay=false,    signals=true,    studyOverlay=true)public class NegVolDisparityInd extends Study{  final static String STD_DEV = "StdDev";    enum Values { NEG_VOL, NVDI, MA }  enum Signals {SELL, BUY }    double highSell = Double.NEGATIVE_INFINITY;  double lowBuy = Double.MAX_VALUE;  @Override  public void initialize(Defaults defaults)  {    var sd = createSD();    var tab = sd.addTab(get("TAB_GENERAL"));    var inputs = tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD1"), 33, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("PERIOD2"), 4, 1, 999, 1));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.SMA));    inputs.addRow(new DoubleDescriptor(STD_DEV, get("STD_DEV"), 2, .1, 99.1, .1));        var colors = tab.addGroup(get("PATHS"));    colors.addRow(new PathDescriptor(Inputs.PATH, get("NVDI"), defaults.getLineColor(), 1.0f, null, true, true, false));    colors.addRow(new PathDescriptor(Inputs.PATH2, get("MA"), defaults.getRed(), 1.0f, null, true, true, false));    colors = tab.addGroup(get("INDICATORS"));    colors.addRow(new IndicatorDescriptor(Inputs.IND, get("NVDI"), defaults.getLineColor(), null, false, true, true));    colors.addRow(new IndicatorDescriptor(Inputs.IND2, get("MA"), defaults.getRed(), null, false, true, true));    tab = sd.addTab(get("TAB_DISPLAY"));    var markers = tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE, Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));        var guides = tab.addGroup(get("GUIDES"));    var topDesc = new GuideDescriptor(Inputs.TOP_GUIDE, get("TOP_GUIDE"), 1.1, 0, 9.001, .001, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);     var mg = new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"),  1, 0, 9.001, .001, true);    mg.setDash(new float[] {3, 3});    guides.addRow(mg);    var bottomDesc = new GuideDescriptor(Inputs.BOTTOM_GUIDE, get("BOTTOM_GUIDE"), .9, 0, 9.001, .001, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);     var settings = tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD1"), 33, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("PERIOD2"), 4, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.METHOD, STD_DEV, Inputs.PATH, Inputs.PATH2);    var desc = createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2, Inputs.METHOD, STD_DEV);    desc.exportValue(new ValueDescriptor(Values.NVDI, get("LBL_NVDI"), new String[] {Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2, Inputs.METHOD, STD_DEV}));    desc.exportValue(new ValueDescriptor(Values.MA, get("MA"), new String[] {Inputs.METHOD, Inputs.PERIOD2}));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));        desc.declarePath(Values.NVDI, Inputs.PATH);    desc.declarePath(Values.MA, Inputs.PATH2);    desc.declareIndicator(Values.NVDI, Inputs.IND);    desc.declareIndicator(Values.MA, Inputs.IND2);    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.setRangeKeys(Values.NVDI, Values.MA);  }  @Override  public void onLoad(Defaults defaults)  {    int p1 = getSettings().getInteger(Inputs.PERIOD);    int p2 = getSettings().getInteger(Inputs.PERIOD2);    setMinBars((p1 * 2) + p2);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period1 = getSettings().getInteger(Inputs.PERIOD);    int period2 = getSettings().getInteger(Inputs.PERIOD2);    if (index < period1) return;    double noStd = getSettings().getDouble(STD_DEV);    Object input = getSettings().getInput(Inputs.INPUT);    var method = getSettings().getMAMethod(Inputs.METHOD);    var series = ctx.getDataSeries();        double price = series.getDouble(index, input, 0.0);    double prevV = series.getDouble(index-1, input, 0.0);    double vol = series.getVolume(index);    double prevVol = series.getVolume(index-1);        double[] bb = Utility.bollingerBands(series, index, period1, noStd, noStd, input);    double bbDiff = bb[0] - bb[1];    double perb = 0.0;    if (bbDiff != 0.0) perb = (price - bb[1])/ (bbDiff);       double negVol = series.getDouble(index -1, Values.NEG_VOL, 100);    if (vol < prevVol) negVol = negVol + ((price - prevV) /(prevV) * 100);    series.setDouble(index, Values.NEG_VOL, negVol);    if (index < period1 * 2) return;        double[] neg = Utility.bollingerBands(series, index, period1, noStd, noStd, Values.NEG_VOL);    double negDiff = neg[0] - neg[1];    double negPerb = 0.0;    if (negDiff != 0.0) negPerb = (negVol - neg[1])/ (negDiff);    double nvdi = (1 + perb) / (1 + negPerb);        series.setDouble(index, Values.NVDI, nvdi);    if (index < (period1 * 2) + period2) return;        Double ma = series.ma(method, index, period2, Values.NVDI);    if (ma == null) return;    series.setDouble(index, Values.MA, ma);       // Check for signal events    var topGuide = getSettings().getGuide(Inputs.TOP_GUIDE);    double topG = topGuide.getValue();    var bottomGuide = getSettings().getGuide(Inputs.BOTTOM_GUIDE);    double bottG = bottomGuide.getValue();        boolean sell =crossedBelow(series, index, Values.NVDI, Values.MA) && ma > topG && (nvdi > highSell) ;     boolean buy = crossedAbove(series, index, Values.NVDI, Values.MA) && ma < bottG && (nvdi < lowBuy);    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      lowBuy = Double.MAX_VALUE;      highSell = nvdi;      var c = new Coordinate(series.getStartTime(index), nvdi);      var marker = getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_PRICE_NVDI", Util.round(price, 2), Util.round(nvdi, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, price);    }    if (buy) {      highSell = Double.NEGATIVE_INFINITY;      lowBuy = nvdi;      var c = new Coordinate(series.getStartTime(index), nvdi);      var marker = getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_PRICE_NVDI", Util.round(price, 2), Util.round(nvdi, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, price);    }    series.setComplete(index);   }    }