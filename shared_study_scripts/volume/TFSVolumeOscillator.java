package com.motivewave.platform.study.volume;import java.awt.Color;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.ColorDescriptor;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** TFS Volume Oscillator 062 */@StudyHeader(    namespace="com.motivewave",     id="ID_TFSVO",     rb="com.motivewave.platform.study.nls.strings2",    name="NAME_TFS_VOLUME_OSCILLATOR",    label="LBL_TFSVO",    desc="DESC_TFSVO",    helpLink = "http://www.motivewave.com/studies/tfs_volume_oscillator.htm",    signals=false,    overlay=false,    requiresVolume=true,    studyOverlay=true)public class TFSVolumeOscillator extends Study{  enum Values {TFSVO }  @Override  public void initialize(Defaults defaults)  {    var sd = createSD();    var tab = sd.addTab(get("TAB_GENERAL"));    var inputs = tab.addGroup(get("INPUT"));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 7, 1, 999, 1));        var settings = tab.addGroup(get("COLORS"));    settings.addRow(new ColorDescriptor(Inputs.UP_COLOR, get("LBL_UP_COLOR"), defaults.getGreen()));    settings.addRow(new ColorDescriptor(Inputs.DOWN_COLOR, get("LBL_DOWN_COLOR"), defaults.getRed()));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    var guides = tab.addGroup(get("GUIDE"));    var mg = new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -9999.1, 9999.1, .1, true);    mg.setDash(new float[] {3, 3});    guides.addRow(mg);    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("LBL_PERIOD"), 7, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.UP_COLOR, Inputs.DOWN_COLOR);     var desc = createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD);    desc.exportValue(new ValueDescriptor(Values.TFSVO, get("LBL_TFSVO"), new String[] {Inputs.PERIOD}));    desc.declareBars(Values.TFSVO);    desc.declareIndicator(Values.TFSVO, Inputs.IND);    desc.setRangeKeys(Values.TFSVO);  }  @Override  public void onLoad(Defaults defaults)  {    setMinBars(getSettings().getInteger(Inputs.PERIOD));  }    @Override    protected void calculate(int index, DataContext ctx)  {    int period = getSettings().getInteger(Inputs.PERIOD);    if (index < period) return;        var series = ctx.getDataSeries();    double close = 0.0;    double open = 0.0;    double vol = 0;    double totV = 0;    for (int i = index - period + 1; i <= index; i++){      close = series.getDouble(i, Enums.BarInput.CLOSE, 0.0);      open = series.getDouble(i, Enums.BarInput.OPEN, 0.0);      vol = series.getVolume(i)/1000000.0; //volume in millions      if (close < open) totV = totV -vol;      if (close > open) totV = totV + vol;          }    double tfsVo = totV / period;     series.setDouble(index, Values.TFSVO, tfsVo);        var midGuide = getSettings().getGuide(Inputs.MIDDLE_GUIDE);    double midG = midGuide.getValue();    Color upC = getSettings().getColor(Inputs.UP_COLOR);    Color dnC = getSettings().getColor(Inputs.DOWN_COLOR);    if (tfsVo > midG) series.setBarColor(index, Values.TFSVO, upC);    else series.setBarColor(index, Values.TFSVO, dnC);    series.setComplete(index);   }}