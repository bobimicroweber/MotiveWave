package com.motivewave.platform.study.volume;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Volume Accumulation Oscillator 135 */@StudyHeader(  namespace = "com.motivewave",  id = "ID_VACOSC",  rb = "com.motivewave.platform.study.nls.strings2",  label ="LBL_VACOSC",  name = "NAME_VOLUME_ACCUMULATION_OSCILLATOR",  desc = "DESC_VACOSC",  menu = "MENU_MARC_CHAIKIN",  helpLink = "http://www.motivewave.com/studies/volume_accumulation_oscillator.htm",  requiresVolume = true,  signals = false,  overlay = false,  studyOverlay=true)public class VolumeAccOscillator extends Study{  enum Values { VACOSC }    @Override  public void initialize(Defaults defaults)  {    var sd = createSD();    var tab = sd.addTab(get("TAB_GENERAL"));      var inputs = tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));       var settings = tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_VACOSC"),  defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("INDICATOR"), defaults.getLineColor(), null, false, true, true));    var guides = tab.addGroup(get("GUIDE"));    var mg = new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -999, 999, 1, true);    mg.setDash(new float[] {3, 3});    guides.addRow(mg);     settings = tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.PATH, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);    var desc = createRD();    desc.setLabelSettings(Inputs.INPUT);    desc.exportValue(new ValueDescriptor(Values.VACOSC, get("LBL_VACOSC"), new String[] { Inputs.INPUT }));    desc.declarePath(Values.VACOSC, Inputs.PATH);    desc.declareIndicator(Values.VACOSC, Inputs.IND);    desc.setRangeKeys(Values.VACOSC);    setMinBars(20);  }  @Override  protected void calculate(int index, DataContext ctx)  {    Object key = getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var series = ctx.getDataSeries();    double price = series.getDouble(index, key, 0);    double high = series.getHigh(index);    double low = series.getLow(index);    double vol = series.getVolume(index);    double vacosc = vol * (price - ((high + low) / 2.0));    series.setDouble(index, Values.VACOSC, vacosc);    series.setComplete(index);    }   }