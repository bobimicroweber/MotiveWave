package com.motivewave.platform.study.general3;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;import com.motivewave.platform.study.general.Utility;/** Linear Regression Curve 185 */@StudyHeader(  namespace="com.motivewave",  id="ID_LINEAR_REG_CURVE",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_LINEAR_REGRESSION_CURVE",  label="LBL_LREGCRV",  desc="DESC_LIN_REG_CURVE",  helpLink="http://www.motivewave.com/studies/linear_regression_curve.htm",  overlay=true,  signals=true,  studyOverlay=true)public class LinearRegCurve extends Study{  final static String PERCENT_ABOVE="PercentA";  final static String PERCENT_BELOW="PercentB";  enum Values { LINREG, PRICE }  protected enum Signals { SELL, BUY }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 9, 1, 999, 1));    inputs.addRow(new DoubleDescriptor(PERCENT_ABOVE, get("PERCENT_ABOVE"), .009, 0, 9.001, .001));    inputs.addRow(new DoubleDescriptor(PERCENT_BELOW, get("PERCENT_BELOW"), .009, 0, 9.001, .001));    var colors=tab.addGroup(get("PATHS"));    colors.addRow(new PathDescriptor(Inputs.PATH, get("LINEAR_REGRESSION"), defaults.getBlue(), 1.0f, null, true, false, true));    colors.addRow(new PathDescriptor(Inputs.PATH2, get("PRICE"), defaults.getLineColor(), 1.0f, null, true, false, true));    colors=tab.addGroup(get("INDICATORS"));    colors.addRow(new IndicatorDescriptor(Inputs.IND, get("LINEAR_REGRESSION"), defaults.getBlue(), null, false, true, true));    colors.addRow(new IndicatorDescriptor(Inputs.IND2, get("PRICE"), defaults.getLineColor(), null, false, true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 9, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(PERCENT_ABOVE, PERCENT_BELOW, Inputs.PATH, Inputs.PATH2);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD, PERCENT_ABOVE, PERCENT_BELOW);    desc.exportValue(new ValueDescriptor(Values.LINREG, get("LBL_LREGCRV"), new String[] { Inputs.INPUT, Inputs.PERIOD, PERCENT_ABOVE, PERCENT_BELOW }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.LINREG, Inputs.PATH);    desc.declarePath(Values.PRICE, Inputs.PATH2);    desc.declareIndicator(Values.LINREG, Inputs.IND);    desc.declareIndicator(Values.PRICE, Inputs.IND2);    desc.setRangeKeys(Values.LINREG, Values.PRICE);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period=getSettings().getInteger(Inputs.PERIOD);    if (index < period) return;    var series=ctx.getDataSeries();    Object input=getSettings().getInput(Inputs.INPUT);    double pcAbove=getSettings().getDouble(PERCENT_ABOVE);    double pcBelow=getSettings().getDouble(PERCENT_BELOW);    double price=series.getDouble(index, input, 0);    double linReg=Utility.linRegLine(series, index, period, input, period)[0]; // end point of line    series.setDouble(index, Values.LINREG, linReg);    series.setDouble(index, Values.PRICE, price);    // signals    pcAbove=1 + pcAbove / 100.0;    pcBelow=1 - pcBelow / 100.0;    boolean sell=price > linReg * pcAbove;    boolean buy=price < linReg * pcBelow;    series.setBoolean(index, Signals.BUY, buy);    series.setBoolean(index, Signals.SELL, sell);    if (sell) {      var c=new Coordinate(series.getStartTime(index), price);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_PRICE_LINREG", Util.round(price, 2), Util.round(linReg, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, price);    }    if (buy) {      var c=new Coordinate(series.getStartTime(index), price);      var marker=getSettings().getMarker(Inputs.UP_MARKER);       String msg = get("BUY_PRICE_LINREG", Util.round(price, 2), Util.round(linReg, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, price);    }    series.setComplete(index);  }}