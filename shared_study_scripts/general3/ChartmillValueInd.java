package com.motivewave.platform.study.general3;import java.awt.Color;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.PriceData;import com.motivewave.platform.sdk.common.X11Colors;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.PriceBarDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Chartmill Value Indicator 196 */@StudyHeader(  namespace="com.motivewave",  id="ID_CHARTMILL_VALUE",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_CMVI",  name="NAME_CHARTMILL_VALUE_INDICATOR",  desc="DESC_CMVI",  helpLink="http://www.motivewave.com/studies/chartmill_value_indicator.htm",  signals=false,  overlay=false,  studyOverlay=true)public class ChartmillValueInd extends Study {  enum Values  { PRICE_BAR, CMVO, CMVH, CMVL, CMVC }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new MAMethodDescriptor(Str.METHOD1, get("METHOD"), Enums.MAMethod.SMA));    inputs.addRow(new IntegerDescriptor(Str.PERIOD1, get("PERIOD"), 5, 1, 999, 1));    inputs.addRow(new PriceBarDescriptor(Inputs.PRICE_BAR, get("LBL_PRICE_BAR"), null, Enums.BarInput.CLOSE, true, false));        var guides=tab.addGroup(get("GUIDES"));    var topDesc=new GuideDescriptor(Str.TOP_GUIDE1, get("TOP_GUIDE"), 2, 0, 99, 1, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    var mg=new GuideDescriptor(Str.MID_GUIDE1, get("MIDDLE_GUIDE"), 0, -99, 99, 1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var bottomDesc=new GuideDescriptor(Str.BOTT_GUIDE1, get("BOTTOM_GUIDE"), -2, -99, 0, 1, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Str.METHOD1);    sd.addQuickSettings(new SliderDescriptor(Str.PERIOD1, get("PERIOD"), 5, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PRICE_BAR);    var desc=createRD();    desc.setLabelSettings(Str.METHOD1, Str.PERIOD1);    desc.exportValue(new ValueDescriptor(Values.CMVO, get("OPEN"), new String[] { Str.METHOD1, Str.PERIOD1 }));    desc.exportValue(new ValueDescriptor(Values.CMVH, get("HIGH"), new String[] { Str.METHOD1, Str.PERIOD1 }));    desc.exportValue(new ValueDescriptor(Values.CMVL, get("LOW"), new String[] { Str.METHOD1, Str.PERIOD1 }));    desc.exportValue(new ValueDescriptor(Values.CMVC, get("CLOSE"), new String[] { Str.METHOD1, Str.PERIOD1 }));    desc.declarePriceBar(Values.PRICE_BAR, Inputs.PRICE_BAR);    desc.setRangeKeys(Values.CMVH, Values.CMVL);  }  @Override  public void onLoad(Defaults defaults)   {    int p1 = getSettings().getInteger(Str.PERIOD1);    setMinBars(p1+1);  }    @Override  protected void calculate(int index, DataContext ctx)   {    int x=getSettings().getInteger(Str.PERIOD1);    if (index < x + 1) return;       var method=getSettings().getMAMethod(Str.METHOD1);    var series=ctx.getDataSeries();    float close = series.getClose(index);    float high = series.getHigh(index);    float low = series.getLow(index);    float open = series.getOpen(index);    Double f = series.ma(method, index, x, Enums.BarInput.MIDPOINT);    Double v = series.ma(method, index, x, Enums.BarInput.TR);    if (f == null || v == null || v == 0) return;        float _v = v.floatValue();    float _f = f.floatValue();        float cmvC = (close - _f) / _v;    float cmvH = (high - _f) / _v;    float cmvL = (low - _f) / _v;    float cmvO = (open - _f) / _v;    series.setFloat(index, Values.CMVO, cmvO);    series.setFloat(index, Values.CMVH, cmvH);    series.setFloat(index, Values.CMVL, cmvL);    series.setFloat(index, Values.CMVC, cmvC);    float prevCmvH = series.getFloat(index-1, Values.CMVH, cmvH);    float prevCmvL = series.getFloat(index-1, Values.CMVL, cmvL);    // Determine the bar color    Color color = null;    if (cmvO > cmvC) color = X11Colors.RED;    if (cmvO < cmvC) color = X11Colors.GREEN;    if (cmvH > prevCmvH && cmvL < prevCmvL) color = X11Colors.BLUE;    if ((cmvH < prevCmvH && cmvL > prevCmvL) || cmvO == cmvC) color = ctx.getDefaults().getLineColor();        series.setValue(index, Values.PRICE_BAR, new PriceData(cmvO, cmvH, cmvL, cmvC, color));        series.setComplete(index, series.isBarComplete(index));  }}