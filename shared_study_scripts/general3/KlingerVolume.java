package com.motivewave.platform.study.general3;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Klinger Volume Oscillator 005 */@StudyHeader(  namespace="com.motivewave",  id="ID_KLINGER_VOLUME",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_KLINGER_VOLUME_OSCILLATOR",  label="LBL_KLVO",  desc="DESC_KLINGER",  menu="MENU_VOLUME_BASED",  helpLink="http://www.motivewave.com/studies/klinger_volume_oscillator.htm",  requiresVolume=true,  signals=true,  overlay=false,  studyOverlay=true)public class KlingerVolume extends Study{  enum Values { CM, VF, TR, KO, KOS, TREND }  protected enum Signals { BUY, SELL }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("FAST_PERIOD"), 34, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("SLOW_PERIOD"), 55, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD3, get("SIGNAL_PERIOD"), 13, 1, 999, 1));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.EMA));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_KLVO"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("SIGNAL"), defaults.getRed(), 1.0f, null, true, false, true));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("LBL_KLVO"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("SIGNAL"), defaults.getRed(), null, false, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    var guides=tab.addGroup(get("GUIDE"));    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -9999.1, 9999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var lines=tab.addGroup(get("SHADING"));    lines.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    lines.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("FAST_PERIOD"), 34, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("SLOW_PERIOD"), 55, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD3, get("SIGNAL_PERIOD"), 13, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.METHOD, Inputs.PATH, Inputs.PATH2, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);    var desc=createRD();    desc.setLabelSettings(Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3, Inputs.METHOD);    desc.exportValue(new ValueDescriptor(Values.KO, get("KO"), new String[] { Inputs.PERIOD, Inputs.PERIOD2, Inputs.METHOD }));    desc.exportValue(new ValueDescriptor(Values.KOS, get("KOS"), new String[] { Inputs.PERIOD3, Inputs.METHOD }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.KO, Inputs.PATH);    desc.declarePath(Values.KOS, Inputs.PATH2);    desc.declareIndicator(Values.KO, Inputs.IND);    desc.declareIndicator(Values.KOS, Inputs.IND2);    desc.setRangeKeys(Values.KO, Values.KOS);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    int p3=getSettings().getInteger(Inputs.PERIOD3);    setMinBars(Math.max(p1, p2) + p3 + 1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    // need at least 1 record    if (index < 1) return;    int fastPeriod=getSettings().getInteger(Inputs.PERIOD);    int slowPeriod=getSettings().getInteger(Inputs.PERIOD2);    int signalPeriod=getSettings().getInteger(Inputs.PERIOD3);    var method=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.EMA);    var series=ctx.getDataSeries();    double high=series.getHigh(index);    double low=series.getLow(index);    double close=series.getClose(index);    double volume=series.getVolume(index);    double lastHigh=series.getHigh(index - 1);    double lastLow=series.getLow(index - 1);    double lastClose=series.getClose(index - 1);    double temp=0;    double cm=0;    double lastCm=series.getDouble(index - 1, Values.CM, 0);    double lastDm=lastHigh - lastLow;    int lastTrend=series.getInt(index - 1, Values.TREND);    int trend=-1;    if ((high + low + close) > (lastHigh + lastLow + lastClose)) trend=1;    double dm=high - low;    if (trend == lastTrend) cm=lastCm + dm;    else cm=lastDm + dm;    series.setDouble(index, Values.CM, cm);    series.setInt(index, Values.TREND, trend);    if (cm == 0) temp=-2;    else temp=Math.abs(2 * (dm / cm - 1));    double vF=volume * temp * trend * 100.0;    series.setDouble(index, Values.VF, vF);    if (index < (Math.max(fastPeriod, slowPeriod) * 2) + 1) return;    Double koFast=series.ma(method, index, fastPeriod, Values.VF);    if (koFast == null) return;    Double koSlow=series.ma(method, index, slowPeriod, Values.VF);    if (koSlow == null) return;    Double ko=koFast - koSlow;    series.setDouble(index, Values.KO, ko);    if (index < (Math.max(fastPeriod, slowPeriod) * 2) + signalPeriod + 1) return;    Double kos=series.ma(method, index, signalPeriod, Values.KO);    if (kos == null) return;    series.setDouble(index, Values.KOS, kos);    // Check for signal events    boolean buy=crossedAbove(series, index, Values.KO, Values.KOS);    boolean sell=crossedBelow(series, index, Values.KO, Values.KOS);    Boolean pSell = series.getBoolean(index, Signals.SELL);    Boolean pBuy = series.getBoolean(index, Signals.BUY);    series.setBoolean(index, Signals.SELL, sell); // used in strategy    series.setBoolean(index, Signals.BUY, buy); // used in strategy    // Hack: if bar updates are on, we don't want to fire the signals more than once.  Check against the previous value for SELL     if (sell && (pSell == null || pSell != sell)) {      var c=new Coordinate(series.getStartTime(index), ko);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_KLINGER_VOLUME_HIGH_KO", Util.round(high, 2), Util.round(ko, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, high);    }    // Hack: if bar updates are on, we don't want to fire the signals more than once.  Check against the previous value for BUY     if (buy && (pBuy == null || pBuy != buy)) {      var c=new Coordinate(series.getStartTime(index), ko);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_KLINGER_VOLUME_LOW_KO", Util.round(low, 2), Util.round(ko, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, low);    }    series.setComplete(index);  }}