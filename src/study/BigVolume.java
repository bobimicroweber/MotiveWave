package study;import com.motivewave.platform.sdk.common.*;import com.motivewave.platform.sdk.common.desc.*;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;@StudyHeader(    namespace = "com.cloudvisionltd",    id = "BIG_VOLUME",    name = "Big Volume",    desc = "Catch BIG Volume",    menu = "A4Crypto Indicators",    label="BIG_VOLUME",    helpLink = "",    requiresVolume = true,    signals = false,    overlay = false,    studyOverlay = true)public class BigVolume extends Study{  enum Values { VLPT }  @Override  public void initialize(Defaults defaults)   {    var sd = createSD();    var tab = sd.addTab(get("TAB_GENERAL"));    var inputs = tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    sd.addQuickSettings(Inputs.INPUT);  }  @Override  protected void calculate(int index, DataContext ctx)   {    if (index < 1) return;    Object input=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var series = ctx.getDataSeries();        double volume =  series.getVolume(index);     double price = series.getDouble(index, input, 0);    double prevP = series.getDouble(index-1, input, 0);    double prevVlpt = series.getDouble(index-1, Values.VLPT, 0); //returns 0 on first try.    double vlpt = prevVlpt + volume * ((price - prevP) / prevP);    series.setDouble(index, Values.VLPT, vlpt);    series.setComplete(index);  }}