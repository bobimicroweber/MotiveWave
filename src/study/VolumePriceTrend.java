package study;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.LineInfo;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Volume Price Trend 72 */@StudyHeader(    namespace = "com.motivewave",    id = "ID_VLPT",    rb = "com.motivewave.platform.study.nls.strings2",    name = "NAME_VOLUME_PRICE_TREND",    label="LBL_VLPT",    desc = "DESC_VLPT",    helpLink = "http://www.motivewave.com/studies/volume_price_trend.htm",    requiresVolume = true,    signals = false,    overlay = false,    studyOverlay = true)public class VolumePriceTrend extends Study{  enum Values { VLPT }  @Override  public void initialize(Defaults defaults)   {    var sd = createSD();    var tab = sd.addTab(get("TAB_GENERAL"));    var inputs = tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    var settings = tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_VLPT"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    settings = tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.PATH, 0.0, Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.PATH, 0.0, Enums.ShadeType.BELOW,    defaults.getBottomFillColor(), true, true));     // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.PATH, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);    var desc = createRD();    desc.setLabelSettings(Inputs.INPUT);    desc.exportValue(new ValueDescriptor(Values.VLPT, get("LBL_VLPT"), new String[] {Inputs.INPUT}));    desc.declarePath(Values.VLPT, Inputs.PATH);    desc.declareIndicator(Values.VLPT, Inputs.IND);    desc.setRangeKeys(Values.VLPT);    desc.addHorizontalLine(new LineInfo(0.0, null, 1.0f, new float[] { 3f, 3f }));    setMinBars(20);  }  @Override  protected void calculate(int index, DataContext ctx)   {    if (index < 1) return;    Object input=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var series = ctx.getDataSeries();        double volume =  series.getVolume(index);     double price = series.getDouble(index, input, 0);    double prevP = series.getDouble(index-1, input, 0);    double prevVlpt = series.getDouble(index-1, Values.VLPT, 0); //returns 0 on first try.    double vlpt = prevVlpt + volume * ((price - prevP) / prevP);    series.setDouble(index, Values.VLPT, vlpt);    series.setComplete(index);  }}