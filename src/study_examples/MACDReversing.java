package study_examples;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Reversing MACD 182 */@StudyHeader(  namespace="com.motivewave",  id="ID_MACDREV",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_MACD",  name="NAME_REVERSING_MACD",  desc="DESC_REVMACD",  menu = "MENU_OVERLAYS",  helpLink="http://www.motivewave.com/studies/reversing_macd.htm",  signals=true,  overlay=false,  studyOverlay=true)public class MACDReversing extends Study{  final static String IND3="Ind3", MACD_PATH="MacdPath", MACD_SIG="MacdSig", MACD_IND="MacdInd", SIGNAL_IND="SignalInd", HIST_IND="HistInd";  enum Values { EMA1, EMA2, MACD, PMACDEQ, PMACDLEVEL, MACD_SIGNAL, RMACD_SIGNAL, HIST }  protected enum Signals { BUY, SELL}    @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.EMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD1"), 12, 1, 9999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("PERIOD2"), 26, 1, 9999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD3, get("SIGNAL_PERIOD"), 9, 1, 9999, 1));    var pth1=tab.addGroup(get("REVERSING_MACD_PATHS"));    pth1.addRow(new PathDescriptor(Inputs.PATH, get("MACD_EQUALS_ZERO"),defaults.getLineColor(),1.0f, null, true,false,true));    pth1.addRow(new PathDescriptor(Inputs.PATH2, get("MACD_EQUALS_PREVIOUS_MACD"), defaults.getBlue(), 1.0f, null, true, false, true));    pth1.addRow(new PathDescriptor(Inputs.PATH3, get("REVERSING_MACD_SIGNAL"), defaults.getRed(), 1.0f, null, true, false, true));    var ind1=tab.addGroup(get("REVERSING_MACD_INDICATORS"));    ind1.addRow(new IndicatorDescriptor(Inputs.IND, get("MACD_EQUALS_ZERO"), defaults.getLineColor(), null, false, true, true));    ind1.addRow(new IndicatorDescriptor(Inputs.IND2, get("MACD_EQUALS_PREVIOUS_MACD"), defaults.getBlue(),        defaults.getBackgroundColor(), false, true, true));    ind1.addRow(new IndicatorDescriptor(IND3, get("REVERSING_MACD_SIGNAL"), defaults.getRed(), null, false, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var pth2=tab.addGroup(get("MACD_PATHS"));    pth2.addRow(new PathDescriptor(MACD_PATH, get("MACD"), defaults.getLineColor(), 1.5f, null, true, false, true));    var histogram = new PathDescriptor(Inputs.BAR, get("BAR_COLOR"), defaults.getBarColor(), 1.0f, null, true, false, true);    histogram.setShowAsBars(true);    histogram.setSupportsShowAsBars(true);    histogram.setColorPolicies(Enums.ColorPolicy.values());    pth2.addRow(histogram);    //pth2.addRow(new BarDescriptor(Inputs.BAR, get("BAR_COLOR"), defaults.getBarColor(), true, true));    pth2.addRow(new PathDescriptor(MACD_SIG, get("MACD_SIGNAL"), defaults.getRed(), 1.0f, null, true, false, true));        var ind2=tab.addGroup(get("MACD_INDICATORS"));    ind2.addRow(new IndicatorDescriptor(MACD_IND, get("MACD"), defaults.getLineColor(), null, false, true, true));    ind2.addRow(new IndicatorDescriptor(HIST_IND, get("MACD_HIST"), defaults.getBarColor(), null, false, true, true));    ind2.addRow(new IndicatorDescriptor(SIGNAL_IND, get("MACD_SIGNAL"), defaults.getRed(), null, false, true, true));        var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));     var desc=createRD();    desc.exportValue(new ValueDescriptor(Values.PMACDEQ, get("PMACDEQ"), new String[] { Inputs.INPUT, Inputs.METHOD,        Inputs.PERIOD, Inputs.PERIOD2 }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declareSignal(Signals.SELL, get("SELL"));       desc.getPricePlot().setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3);    desc.getPricePlot().setLabelPrefix("RMACD");    desc.getPricePlot().declarePath(Values.PMACDEQ, Inputs.PATH);    desc.getPricePlot().declarePath(Values.PMACDLEVEL, Inputs.PATH2);    desc.getPricePlot().declarePath(Values.RMACD_SIGNAL, Inputs.PATH3);    desc.getPricePlot().declareIndicator(Values.PMACDEQ, Inputs.IND);    desc.getPricePlot().declareIndicator(Values.PMACDLEVEL, Inputs.IND2);    desc.getPricePlot().declareIndicator(Values.RMACD_SIGNAL, IND3);    desc.getPricePlot().setRangeKeys(Values.PMACDEQ, Values.PMACDLEVEL, Values.RMACD_SIGNAL);           desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3);    desc.setLabelPrefix("MACD");    desc.declarePath(Values.MACD, MACD_PATH);    desc.declarePath(Values.MACD_SIGNAL, MACD_SIG);    desc.declarePath(Values.HIST, Inputs.BAR);         desc.declareIndicator(Values.MACD, MACD_IND);    desc.declareIndicator(Values.MACD_SIGNAL, SIGNAL_IND);    desc.declareIndicator(Values.HIST, HIST_IND);    desc.setRangeKeys(Values.MACD, Values.HIST, Values.MACD_SIGNAL);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    int p3=getSettings().getInteger(Inputs.PERIOD3);    setMinBars(p1 + p2 + p3);  }  @Override  protected void calculate(int index, DataContext ctx)  {    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var method=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.EMA);    int period1=getSettings().getInteger(Inputs.PERIOD);    int period2=getSettings().getInteger(Inputs.PERIOD2);    int sigPeriod=getSettings().getInteger(Inputs.PERIOD3);    int maxP = Math.max(period1, period2);    if (index < maxP) return;    var series=ctx.getDataSeries();    double price = series.getDouble(index, key, 0);    double alphaX=2.0 / (1 + period1);    double alphaY=2.0 / (1 + period2);    // double price = series.getDouble(index, key, 0);    Double ema1=series.ma(method, index, period1, key);    if (ema1 == null) return;    series.setDouble(index, Values.EMA1, ema1);    Double ema2=series.ma(method, index, period2, key);    if (ema2 == null) return;    series.setDouble(index, Values.EMA2, ema2);    double macd=ema1 - ema2;    series.setDouble(index, Values.MACD, macd);    if (index < maxP + sigPeriod) return;    Double macdSignal=series.ma(method, index, sigPeriod, Values.MACD);    if (macdSignal == null) return;    series.setDouble(index, Values.MACD_SIGNAL, macdSignal);    if (index < maxP * 2 + 1) return;        double hist = macd - macdSignal;    series.setDouble(index, Values.HIST, hist);       double prevEma1=series.getDouble(index - 1, Values.EMA1, 0);    double prevEma2=series.getDouble(index - 1, Values.EMA2, 0);    double prevMacd=series.getDouble(index - 1, Values.MACD, 0);    // substitute 0 for macd    double macdValue=0;    double pMacdLevel=(macdValue + ((1 - alphaY) * prevEma2) - ((1 - alphaX) * prevEma1)) / (alphaX - alphaY);    series.setDouble(index, Values.PMACDLEVEL, pMacdLevel);    macdValue=prevMacd;    double pMacdEq=(macdValue + ((1 - alphaY) * prevEma2) - ((1 - alphaX) * prevEma1)) / (alphaX - alphaY);    series.setDouble(index, Values.PMACDEQ, pMacdEq);    if (index < (maxP * 2) + (sigPeriod * 2) + 1) return;    Double rmacdSignal=series.ma(method, index, sigPeriod, Values.PMACDEQ);    if (rmacdSignal == null) return;    series.setDouble(index, Values.RMACD_SIGNAL, rmacdSignal);        // Check for signal events    boolean sell=crossedBelow(series, index, Values.MACD, Values.MACD_SIGNAL);    boolean buy=crossedAbove(series, index, Values.MACD, Values.MACD_SIGNAL);    boolean wasBuy = index == series.size()-1 && series.getBoolean(index, Signals.BUY, false);    boolean wasSell = index == series.size()-1 && series.getBoolean(index, Signals.SELL, false);    series.setBoolean(index, Signals.BUY, buy);    series.setBoolean(index, Signals.SELL, sell);    if (sell) {      var c=new Coordinate(series.getStartTime(index), macd);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER); // set default colour to getRed() in initialize      String msg = get("SELL_PRICE_MACD2", Util.round(price, 2), Util.round(macd, 3));      if (!wasSell && marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, price);    }    if (buy) {      var c=new Coordinate(series.getStartTime(index), macd);      var marker=getSettings().getMarker(Inputs.UP_MARKER); // set default colour to getGreen() in initialize      String msg = get("BUY_PRICE_MACD2", Util.round(price, 2), Util.round(macd, 3));      if (!wasBuy && marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, price);    }     series.setComplete(index);  }}