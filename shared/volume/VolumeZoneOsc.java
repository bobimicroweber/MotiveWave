package com.motivewave.platform.study.volume;import java.awt.Color;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.DataSeries;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.MarkerInfo;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.BooleanDescriptor;import com.motivewave.platform.sdk.common.desc.ColorDescriptor;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Plot;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;import com.motivewave.platform.study.general.Utility;import com.motivewave.platform.study.general3.Str;/** Volume Zone Oscillator 198 */@StudyHeader(  namespace="com.motivewave",  id="ID_VOL_ZONE_OSC",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_VZOSC",  name="NAME_VOLUME_ZONE_OSCILLATOR",  desc="DESC_VZOSC",  helpLink="http://www.motivewave.com/studies/volume_zone_oscillator.htm",  requiresVolume=true,  signals=false,  overlay=false,  studyOverlay=true)public class VolumeZoneOsc extends Study{  final static String REDUCE_WS="ReduceWS";  enum Values { R, VZO, MA, PDM, NDM, TR, DX, PDI, NDI, ADX }  protected enum Signals { ENTER_LONG, EXIT_LONG, ENTER_SHORT, EXIT_SHORT }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("DISPLAY1"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Str.INPUT1, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Str.METHOD1, get("METHOD"), Enums.MAMethod.EMA));    inputs.addRow(new IntegerDescriptor(Str.PERIOD1, get("PERIOD"), 14, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Str.PERIOD2, get("MA_PERIOD"), 60, 1, 999, 1));    inputs.addRow(new BooleanDescriptor(REDUCE_WS, get("REDUCE_WHIPSAWS"), true));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Str.PATH1, get("VZO"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new PathDescriptor(Str.PATH2, get("MA"), defaults.getRed(), 1.0f, null, true, false, true));    settings.addRow(new PathDescriptor(Str.PATH3, get("ADX_PATH"), defaults.getBlue(), 1.0f, null, true, false, true));    settings.addRow(new ColorDescriptor(Str.UP_COLOR, get("ADX_UP_COLOR"), defaults.getBlue()));    settings.addRow(new ColorDescriptor(Str.DN_COLOR, get("ADX_DOWN_COLOR"), defaults.getRed()));    tab=sd.addTab(get("DISPLAY2"));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Str.IND1, get("VZO"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Str.IND2, get("MA"), defaults.getRed(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Str.IND3, get("ADX"), defaults.getBlue(), null, false, true, true));    var guides=tab.addGroup(get("VZO_GUIDES"));    var topDesc1=new GuideDescriptor(Str.TOP_GUIDE1, get("TOP_GUIDE1"), 60, 0, 99, 1, true);    topDesc1.setLineColor(defaults.getRed());    guides.addRow(topDesc1);    var topDesc2=new GuideDescriptor(Str.TOP_GUIDE2, get("TOP_GUIDE2"), 40, 0, 99, 1, true);    topDesc2.setLineColor(defaults.getRed());    guides.addRow(topDesc2);    var topDesc3=new GuideDescriptor(Str.TOP_GUIDE3, get("TOP_GUIDE3"), 15, 0, 99, 1, true);    topDesc3.setLineColor(defaults.getRed());    guides.addRow(topDesc3);    var mg=new GuideDescriptor(Str.MID_GUIDE1, get("MIDDLE_GUIDE"), 0, -99, 99, 1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var bottomDesc1=new GuideDescriptor(Str.BOTT_GUIDE1, get("BOTTOM_GUIDE1"), -60, -99, 0, 1, true);    bottomDesc1.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc1);    var bottomDesc2=new GuideDescriptor(Str.BOTT_GUIDE2, get("BOTTOM_GUIDE2"), -40, -99, 0, 1, true);    bottomDesc2.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc2);    var bottomDesc3=new GuideDescriptor(Str.BOTT_GUIDE3, get("BOTTOM_GUIDE3"), -5, -99, 0, 1, true);    bottomDesc3.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc3);    tab=sd.addTab(get("DISPLAY3"));    var guides2=tab.addGroup(get("ADX_GUIDES"));    var topDesc4=new GuideDescriptor(Str.TOP_GUIDE4, get("TOP_GUIDE"), 26, 0, 99, 1, true);    topDesc4.setLineColor(defaults.getRed());    guides2.addRow(topDesc4);    var mg4=new GuideDescriptor(Str.MID_GUIDE4, get("MIDDLE_GUIDE"), 18, 0, 99, 1, true);    mg4.setDash(new float[] { 3, 3 });    guides2.addRow(mg4);    var bottomDesc4=new GuideDescriptor(Str.BOTT_GUIDE4, get("BOTTOM_GUIDE"), 0, 0, 99, 1, true);    bottomDesc4.setLineColor(defaults.getGreen());    guides2.addRow(bottomDesc4);    settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Str.TOP_FILL1, get("TOP_FILL"), Str.MID_GUIDE1, Str.PATH1,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Str.BOTT_FILL1, get("BOTTOM_FILL"), Str.MID_GUIDE1, Str.PATH1,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Str.UP_MARKER1, get("ENTER_LONG"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Str.DN_MARKER1, get("EXIT_LONG"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Str.UP_MARKER2, get("EXIT_SHORT"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getBlue(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Str.DN_MARKER2, get("ENTER_SHORT"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getYellow(), defaults.getLineColor(), true, true));    var desc=createRD();    desc.exportValue(new ValueDescriptor(Values.VZO, get("LBL_VZOSC"), new String[] { Str.INPUT1, Str.METHOD1, Str.PERIOD1 }));    desc.exportValue(new ValueDescriptor(Signals.ENTER_LONG, Enums.ValueType.BOOLEAN, get("ENTER_LONG"), null));    desc.exportValue(new ValueDescriptor(Signals.EXIT_LONG, Enums.ValueType.BOOLEAN, get("EXIT_LONG"), null));    desc.exportValue(new ValueDescriptor(Signals.ENTER_SHORT, Enums.ValueType.BOOLEAN, get("ENTER_SHORT"), null));    desc.exportValue(new ValueDescriptor(Signals.EXIT_SHORT, Enums.ValueType.BOOLEAN, get("EXIT_SHORT"), null));    // Price plot (moving average)    desc.getPricePlot().setLabelSettings(Str.INPUT1, Str.PERIOD2);    desc.getPricePlot().setLabelPrefix("MA");    desc.getPricePlot().declarePath(Values.MA, Str.PATH2);    desc.getPricePlot().declareIndicator(Values.MA, Str.IND2);    // default plot    desc.setLabelSettings(Str.INPUT1, Str.METHOD1, Str.PERIOD1);    desc.declarePath(Values.VZO, Str.PATH1);    desc.declareIndicator(Values.VZO, Str.IND1);    desc.setRangeKeys(Values.VZO);    // ADX Plot    Plot adxPlot=new Plot();    desc.addPlot(Str.PLOT1, adxPlot);    adxPlot.setLabelSettings(Str.INPUT1, Str.PERIOD1);    adxPlot.setLabelPrefix("ADX");    adxPlot.setTabName("ADX");    adxPlot.declarePath(Values.ADX, Str.PATH3);    adxPlot.declareBars(Values.ADX, Str.PATH3);    adxPlot.declareIndicator(Values.ADX, Str.IND3);    adxPlot.declareGuide(Str.TOP_GUIDE4);    adxPlot.declareGuide(Str.MID_GUIDE4);    adxPlot.declareGuide(Str.BOTT_GUIDE4);    adxPlot.setRangeKeys(Values.ADX);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Str.PERIOD1);    int p2=getSettings().getInteger(Str.PERIOD2);    setMinBars(p1 + p2);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period=getSettings().getInteger(Str.PERIOD1);    int maPeriod=getSettings().getInteger(Str.PERIOD2);    if (index < Math.max(period, maPeriod)) return;    Object key=getSettings().getInput(Str.INPUT1, Enums.BarInput.CLOSE);    Enums.MAMethod method=getSettings().getMAMethod(Str.METHOD1);    boolean reduceWS=getSettings().getBoolean(REDUCE_WS);    Color upC=getSettings().getColor(Str.UP_COLOR);    Color downC=getSettings().getColor(Str.DN_COLOR);    DataSeries series=ctx.getDataSeries();    double price=series.getDouble(index, key, 0);    double prevPrice=series.getDouble(index - 1, key, 0);    long vol=series.getVolume(index);    double r=Utility.sign(price, prevPrice) * vol;    series.setDouble(index, Values.R, r);    Double ma=series.ma(method, index, maPeriod, key);    Double vp=series.ma(method, index, period, Values.R);    Double tv=series.ma(method, index, period, Enums.BarInput.VOLUME);    if (ma == null || vp == null || tv == null) return;    Double vzo=null;    if (tv != 0) vzo=100.0 * vp / tv;    series.setDouble(index, Values.MA, ma);    series.setDouble(index, Values.VZO, vzo);    if (vzo == null) return;    double prevVzo=series.getDouble(index - 1, Values.VZO, 0);    // ADX    // Calculate the +DM, -DM and TR    Float pdm=series.getPositiveDM(index);    Float ndm=series.getNegativeDM(index);    Float tr=series.getTrueRange(index);    series.setFloat(index, Values.PDM, pdm);    series.setFloat(index, Values.NDM, ndm);    series.setFloat(index, Values.TR, tr);    if (index <= period) return; // not enough data to calculate the first set of averages    // Calculate the Average +DM, -DM and TR    Double pdma=series.smma(index, period, Values.PDM);    Double ndma=series.smma(index, period, Values.NDM);    Double tra=series.smma(index, period, Values.TR);    if (pdma == null || ndma == null || tra == null) return;    // Determine the +DI, -DI and DX    double pdi=pdma / tra * 100;    double ndi=ndma / tra * 100;    double dx=Math.abs((pdma - ndma)) / (pdma + ndma) * 100;    series.setDouble(index, Values.DX, dx);    series.setDouble(index, Values.PDI, pdi);    series.setDouble(index, Values.NDI, ndi);    // Calculate the Average DX    Double adx=series.smma(index, period, Values.DX);    if (adx == null) return;    series.setDouble(index, Values.ADX, adx);    double adxMidG=getSettings().getGuide(Str.MID_GUIDE4).getValue(); // default = 18    if (adx > adxMidG) series.setBarColor(index, Values.ADX, upC);    else series.setBarColor(index, Values.ADX, downC);    // Check for signal events    double topG60=getSettings().getGuide(Str.TOP_GUIDE1).getValue();    double topG40=getSettings().getGuide(Str.TOP_GUIDE2).getValue();    double topG15=getSettings().getGuide(Str.TOP_GUIDE3).getValue();    double midG=getSettings().getGuide(Str.MID_GUIDE1).getValue(); // default = 0    double bottG60=getSettings().getGuide(Str.BOTT_GUIDE1).getValue();    double bottG40=getSettings().getGuide(Str.BOTT_GUIDE2).getValue();    double bottG5=getSettings().getGuide(Str.BOTT_GUIDE3).getValue();    boolean enterLong=false, exitLong=false, enterShort=false, exitShort=false;    // uptrend    if (price > ma && adx > adxMidG) {      if (reduceWS) enterLong=(prevVzo < bottG40 && vzo > bottG40) || (prevVzo < topG15 && vzo > topG15);      if (!reduceWS) enterLong=(prevVzo < bottG40 && vzo > bottG40) || (prevVzo < midG && vzo > midG);      exitLong=((prevVzo > topG60 && vzo < prevVzo) || (prevVzo > topG40 && vzo < topG40)          || (price < ma && vzo < midG));    }    // down trend    if (price < ma && adx > adxMidG) {      if (reduceWS) enterShort=(prevVzo > topG40 && vzo < topG40) || (prevVzo > bottG5 && vzo < bottG5);      if (!reduceWS) enterShort=(prevVzo > topG40 && vzo < topG40) || (prevVzo > midG && vzo < midG);      exitShort=(vzo < bottG60 && vzo > prevVzo) || (prevVzo < bottG40 && vzo > bottG40)          || (price > ma && prevVzo < midG && vzo > midG);    }    // non trending    if (adx < adxMidG) {      enterLong=(prevVzo < bottG40 && vzo > bottG40) || (prevVzo < topG15 && vzo > topG15);      exitLong=((prevVzo < topG40 && vzo > topG40) && exitLong) || (prevVzo > bottG5 && vzo < bottG5);      enterShort=(prevVzo > topG40 && vzo < topG40) || (prevVzo > bottG5 && vzo < bottG5);      if ((prevVzo > bottG40 && vzo < bottG40)) {        if (reduceWS) exitShort=(prevVzo < bottG40 && vzo > bottG40) || (prevVzo < topG15 && vzo > topG15);        if (!reduceWS) exitShort=(prevVzo < bottG40 && vzo > bottG40) || (prevVzo < midG && vzo > midG);      }      if (vzo > bottG40) exitShort=(prevVzo < topG15 && vzo > topG15);    }    if (enterLong) {      Coordinate c=new Coordinate(series.getStartTime(index), vzo);      MarkerInfo markerInfo=getSettings().getMarker(Str.UP_MARKER1); // set default colour to getGreen() in initialize      Marker marker=new Marker(c, Enums.Position.BOTTOM, markerInfo);      marker.setTextValue(get("ENTER_LONG"));      marker.setTextPosition(Enums.Position.BOTTOM);      if (markerInfo.isEnabled()) addFigure(marker);      ctx.signal(index, Signals.ENTER_LONG, get("ENTER_LONG_PRICE_VZO", Util.round(price, 3), Util.round(vzo, 3)), price);    }    if (exitLong) {      Coordinate c=new Coordinate(series.getStartTime(index), vzo);      MarkerInfo markerInfo=getSettings().getMarker(Str.DN_MARKER1); // set default colour to getRed() in initialize      Marker marker=new Marker(c, Enums.Position.TOP, markerInfo);      marker.setTextValue(get("EXIT_LONG"));      marker.setTextPosition(Enums.Position.TOP);      if (markerInfo.isEnabled()) addFigure(marker);      ctx.signal(index, Signals.EXIT_LONG, get("EXIT_LONG_PRICE_VZO", Util.round(price, 3), Util.round(vzo, 3)), price);    }    if (enterShort) {      Coordinate c=new Coordinate(series.getStartTime(index), vzo);      MarkerInfo markerInfo=getSettings().getMarker(Str.DN_MARKER2); // set default colour to getRed() in initialize      Marker marker=new Marker(c, Enums.Position.TOP, markerInfo);      marker.setTextValue(get("ENTER_SHORT"));      marker.setTextPosition(Enums.Position.TOP);      if (markerInfo.isEnabled()) addFigure(marker);      ctx.signal(index, Signals.ENTER_SHORT, get("ENTER_SHORT_PRICE_VZO", Util.round(price, 3), Util.round(vzo, 3)), price);    }    if (exitShort) {      Coordinate c=new Coordinate(series.getStartTime(index), vzo);      MarkerInfo markerInfo=getSettings().getMarker(Str.UP_MARKER2); // set default colour to getGreen() in initialize      Marker marker=new Marker(c, Enums.Position.BOTTOM, markerInfo);      marker.setTextValue(get("EXIT_SHORT"));      marker.setTextPosition(Enums.Position.BOTTOM);      if (markerInfo.isEnabled()) addFigure(marker);      ctx.signal(index, Signals.EXIT_SHORT, get("EXIT_SHORT_PRICE_VZO", Util.round(price, 3), Util.round(vzo, 3)), price);    }    series.setComplete(index);  }}