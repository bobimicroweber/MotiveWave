package com.motivewave.platform.study.volume;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Elastic  Volume Weighted Moving Average 014 */@StudyHeader(  namespace="com.motivewave",  id="ID_EVWMA",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_ELASTIC_VOLUME_WEIGHTED_MA",  label="LBL_EVWMA",  desc="DESC_EVWMA",  menu="MENU_VOLUME_BASED",  helpLink = "http://www.motivewave.com/studies/elastic_volume_weighted_moving_average.htm",  requiresVolume=true,  signals=false,  overlay=true,  studyOverlay=true)public class ElasticVolumeWeightedMovingAverage extends Study{  final static String MULT = "Mult";  enum Values { EVWMA, VOLUME }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.SMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 40, 1, 999, 1));    inputs.addRow(new DoubleDescriptor(MULT, get("MULTIPLER"), 20, 1, 999.9, 0.1));    var settings=tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_EVWMA"), defaults.getLineColor(), 1.0f, null, true, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("LBL_PERIOD"), 40, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(MULT, Inputs.PATH);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, MULT);    desc.exportValue(new ValueDescriptor(Values.EVWMA, get("LBL_EVWMA"), new String[] { Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, MULT}));    desc.declarePath(Values.EVWMA, Inputs.PATH);    desc.declareIndicator(Values.EVWMA, Inputs.IND);    desc.setRangeKeys(Values.EVWMA);  }  @Override  public void onLoad(Defaults defaults)  {    int p1 = getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1);  }    @Override  protected void calculate(int index, DataContext ctx)  {    var series = ctx.getDataSeries();    int volPeriod = getSettings().getInteger(Inputs.PERIOD);    double vol = series.getVolume(index);    series.setDouble(index, Values.VOLUME, vol);    if (index <= volPeriod) return;    Object input = getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var method = getSettings().getMAMethod(Inputs.METHOD);    double mult = getSettings().getDouble(MULT);    double price = series.getDouble(index, input, 0); // close unless changed by user    Double avVol = series.ma(method, index, volPeriod, Values.VOLUME);    if (avVol == null) return;        double n = avVol * mult;    if (n == 0) return;        double prevE = series.getDouble(index - 1, Values.EVWMA, price);    double evwma = ((n - vol) * prevE + vol * price) / n;    series.setDouble(index, Values.EVWMA, evwma);    series.setComplete(index);  }}