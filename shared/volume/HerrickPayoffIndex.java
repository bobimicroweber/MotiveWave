package com.motivewave.platform.study.volume;import java.awt.Color;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.ColorDescriptor;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** HERRICK PAYOFF INDEX 038 */@StudyHeader(    namespace="com.motivewave",     id="ID_HPI",     rb="com.motivewave.platform.study.nls.strings2",    label="LBL_HPI",    name="NAME_HERRICK_PAYOFF_INDEX",    desc="DESC_HPI",    menu="MENU_VOLUME_BASED",    helpLink = "http://www.motivewave.com/studies/herrick_payoff_index.htm",    requiresVolume=true,    signals=false,    overlay=false,    studyOverlay=true)public class HerrickPayoffIndex extends Study{  enum Values { K, HPIC }      @Override  public void initialize(Defaults defaults)  {    var sd = createSD();    var tab = sd.addTab(get("TAB_GENERAL"));    var inputs = tab.addGroup(get("INPUTS"));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("POINT_VALUE"), 100, 1, 9999, 1));    var settings = tab.addGroup(get("COLORS"));    settings.addRow(new ColorDescriptor(Inputs.UP_COLOR, get("LBL_UP_COLOR"), defaults.getGreen()));    settings.addRow(new ColorDescriptor(Inputs.DOWN_COLOR, get("LBL_DOWN_COLOR"), defaults.getRed()));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    var guides = tab.addGroup(get("GUIDE"));    var mg = new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -999.1, 999.1, .1, true);    mg.setDash(new float[] {3, 3});    guides.addRow(mg);    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("POINT_VALUE"), 100, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.UP_COLOR, Inputs.DOWN_COLOR);    var desc = createRD();    desc.setLabelSettings(Inputs.PERIOD);    desc.exportValue(new ValueDescriptor(Values.HPIC, get("HPIC"), new String[] { Inputs.PERIOD }));    desc.declareBars(Values.HPIC);    desc.declareIndicator(Values.HPIC, Inputs.IND);    desc.setRangeKeys(Values.HPIC);    setMinBars(20);  }  @Override    protected void calculate(int index, DataContext ctx)  {    if (index < 1) return;    int pointValue = getSettings().getInteger(Inputs.PERIOD);            var series = ctx.getDataSeries();    double open = series.getOpen(index);    double prevOpen = series.getOpen(index-1);    double high = series.getHigh(index);    double low = series.getLow(index);              double close = series.getClose(index);       long volume = series.getVolume(index);      double prevHigh = series.getHigh(index-1);    double prevLow = series.getLow(index-1);              double prevClose = series.getClose(index-1);    double median = (high + low) / 2;    double prevMedian = (prevHigh + prevLow) / 2;    double i = Math.abs(close - prevClose);    double g = Math.min(open, prevOpen);    double k = (median-prevMedian) * pointValue * volume;    double temp = 1 + ((i/2) / g);    if (median < prevMedian) temp = 1 - ((i/2) / g);    k = k * temp;    series.setDouble(index, Values.K, k);    if (index < 2) return;          double prevK = series.getDouble(index-1, Values.K, 0.0);     double hpic = prevK + (k - prevK);  //looks wrong JL?    series.setDouble(index, Values.HPIC, hpic);        var midGuide = getSettings().getGuide(Inputs.MIDDLE_GUIDE);    double midG = midGuide.getValue();    Color upC = getSettings().getColor(Inputs.UP_COLOR);    Color dnC = getSettings().getColor(Inputs.DOWN_COLOR);    if (hpic > midG) series.setBarColor(index, Values.HPIC, upC);    else series.setBarColor(index, Values.HPIC, dnC);      series.setComplete(index);  }}