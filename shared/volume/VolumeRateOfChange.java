package com.motivewave.platform.study.volume;import java.awt.Color;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.ColorDescriptor;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Volume Rate of Change  066 */@StudyHeader(    namespace = "com.motivewave",    id = "ID_VOL_ROC",    rb = "com.motivewave.platform.study.nls.strings2",    name = "NAME_VOLUME_RATE_OF_CHANGE",    label="LBL_VOL_ROC",    desc = "DESC_VOL_ROC",    helpLink = "http://www.motivewave.com/studies/volume_rate_of_change.htm",    requiresVolume = true,    signals = true,    overlay = false,    studyOverlay = true)public class VolumeRateOfChange extends Study{  enum Values { VOL_ROC }  enum Signals { SELL, BUY }  @Override  public void initialize(Defaults defaults)   {    var sd = createSD();    var tab = sd.addTab(get("TAB_GENERAL"));        var inputs = tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 14, 1, 999, 1));    var settings = tab.addGroup(get("COLORS"));    settings.addRow(new ColorDescriptor(Inputs.UP_COLOR, get("LBL_UP_COLOR"), defaults.getGreen()));    settings.addRow(new ColorDescriptor(Inputs.DOWN_COLOR, get("LBL_DOWN_COLOR"), defaults.getRed()));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    tab = sd.addTab(get("TAB_DISPLAY"));        var guides = tab.addGroup(get("GUIDE"));    var mg = new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -9999.1, 9999.1, .1, true);    mg.setDash(new float[] {3, 3});    guides.addRow(mg);     var markers = tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE, Enums.Size.VERY_SMALL, defaults            .getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 14, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.UP_COLOR, Inputs.DOWN_COLOR);    var desc = createRD();    desc.setLabelSettings(Inputs.PERIOD);    desc.exportValue(new ValueDescriptor(Values.VOL_ROC, get("LBL_VOL_ROC"), new String[] { Inputs.INPUT, Inputs.PERIOD }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declareBars(Values.VOL_ROC);    desc.declareIndicator(Values.VOL_ROC, Inputs.IND);    desc.setRangeKeys(Values.VOL_ROC);  }  @Override  public void onLoad(Defaults defaults)  {    setMinBars(getSettings().getInteger(Inputs.PERIOD));  }    @Override  protected void calculate(int index, DataContext ctx)   {    int period = getSettings().getInteger(Inputs.PERIOD);    if (index < period) return;    var series = ctx.getDataSeries();    Object input = getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    double close = series.getDouble(index, input, 0);    double v = series.getVolume(index);    double priorV = series.getVolume(index-period);    double volRoc = 0.0;    if ((priorV != 0.0) && (v != 0.0)) volRoc = 100 * (v - priorV) /(v + priorV);    series.setDouble(index, Values.VOL_ROC, volRoc);    // Check for signal events    var midGuide = getSettings().getGuide(Inputs.MIDDLE_GUIDE);    double midG = midGuide.getValue();    Color upC = getSettings().getColor(Inputs.UP_COLOR);    Color dnC = getSettings().getColor(Inputs.DOWN_COLOR);    if (volRoc > midG) series.setBarColor(index, Values.VOL_ROC, upC);    else series.setBarColor(index, Values.VOL_ROC, dnC);       double lastVr = series.getDouble(index-1, Values.VOL_ROC, 0.0);        boolean sell = (volRoc > 0.0) && ( lastVr < 0.0);    boolean buy = (volRoc < 0.0) && ( lastVr > 0.0);    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      var c = new Coordinate(series.getStartTime(index), volRoc);      var marker = getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_CLOSE_VOL_ROC", Util.round(close, 2), Util.round(volRoc, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, close);    }    if (buy) {       var c = new Coordinate(series.getStartTime(index), volRoc);      var marker = getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_CLOSE_VOL_ROC", Util.round(close, 2), Util.round(volRoc, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, close);    }    series.setComplete(index);  }}