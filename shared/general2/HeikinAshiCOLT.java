package com.motivewave.platform.study.general2;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.DataSeries;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.MarkerInfo;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Heikin-Ashi Candles Oscillator Long Term 179 */@StudyHeader(  namespace="com.motivewave",  id="ID_HACOLT",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_HACOLT",  name="NAME_HEIKIN_ASHI_CANDLES_OSCILLATOR_LT",  desc="DESC_HACOLT",  helpLink="http://www.motivewave.com/studies/heikin_ashi_candles_oscillator_lt.htm",  signals=true,  overlay=false,  studyOverlay=true)public class HeikinAshiCOLT extends Study{  final static String CANDLE="Candle";  enum Values { HACTP, HAOP, HACL, HAT1, HAT2, TPT1, TPT2, KEEPING, KEEPALL, UTR, KEEPING2, KEEPALL2, DTR, RESULT, LTRESULT, HACOLT }  protected enum Signals { SELL, BUY };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.WP));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD1"), Enums.MAMethod.TEMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("TEMA_PERIOD"), 55, 1, 999, 1));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD2, get("METHOD2"), Enums.MAMethod.EMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("EMA_PERIOD"), 60, 1, 999, 1));    inputs.addRow(new DoubleDescriptor(CANDLE, get("CANDLE_SIZE_FACTOR"), 1.1, .01, 5, .01));    var settings=tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("PATH"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("INDICATOR"), defaults.getLineColor(), null, false, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var guides=tab.addGroup(get("GUIDES"));    var topDesc=new GuideDescriptor(Inputs.TOP_GUIDE, get("TOP_GUIDE"), 100, 0, 999.1, .1, true);    topDesc.setLineColor(defaults.getLineColor());    guides.addRow(topDesc);    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 50, 0, 999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var bottomDesc=new GuideDescriptor(Inputs.BOTTOM_GUIDE, get("BOTTOM_GUIDE"), 0, 0, 999.1, .1, true);    bottomDesc.setLineColor(defaults.getLineColor());    guides.addRow(bottomDesc);    settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("TEMA_PERIOD"), 55, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.METHOD2);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("EMA_PERIOD"), 60, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(CANDLE, Inputs.PATH, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.METHOD2, Inputs.PERIOD2, CANDLE);    desc.exportValue(new ValueDescriptor(Values.HACOLT, get("LBL_HACOLT"), new String[] { Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3 }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.HACOLT, Inputs.PATH);    desc.declareIndicator(Values.HACOLT, Inputs.IND);    desc.setRangeKeys(Values.HACOLT);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    // We are creating TEMAs on top of TEMAs, so we need lots of data    int minBars = (p1*9) + p2*2 + 1;    setMinBars(minBars);  }  @Override  protected void calculate(int index, DataContext ctx)  {    if (index < 1) return;    int temaP=getSettings().getInteger(Inputs.PERIOD);    int emaP=getSettings().getInteger(Inputs.PERIOD2);    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.WP);    Enums.MAMethod temaM=getSettings().getMAMethod(Inputs.METHOD);    Enums.MAMethod emaM=getSettings().getMAMethod(Inputs.METHOD2);    double candleSize=getSettings().getDouble(CANDLE);    DataSeries series=ctx.getDataSeries();    double open=series.getDouble(index, Enums.BarInput.OPEN, 0);    double high=series.getDouble(index, Enums.BarInput.HIGH, 0);    double prevHigh=series.getDouble(index - 1, Enums.BarInput.HIGH, 0);    double low=series.getDouble(index, Enums.BarInput.LOW, 0);    double prevLow=series.getDouble(index - 1, Enums.BarInput.LOW, 0);    double close=series.getDouble(index, Enums.BarInput.CLOSE, 0);    double prevClose=series.getDouble(index - 1, Enums.BarInput.CLOSE, 0);    double haCTP=series.getDouble(index, key, 0); // Enums.BarInput.WP = (open + high + low + close) / 4    double prevHaCTP=series.getDouble(index - 1, key);    double prevHaOp=series.getDouble(index - 1, Values.HAOP, open);    double haOp=(prevHaCTP + prevHaOp) / 2.0;    series.setDouble(index, Values.HAOP, haOp);    double haH=Math.max(high, Math.max(haOp, haCTP));    double haL=Math.min(low, Math.min(haOp, haCTP));    double haCL=(haCTP + haOp + haH + haL) / 4.0;    series.setDouble(index, Values.HACL, haCL);        Double tpT1=series.ma(temaM, index, temaP, Enums.BarInput.TP);    series.setDouble(index, Values.TPT1, tpT1);    Double haT1=series.ma(temaM, index, temaP, Values.HACL);    series.setDouble(index, Values.HAT1, haT1);    Double tpT2=series.ma(temaM, index, temaP, Values.TPT1);    Double haT2=series.ma(temaM, index, temaP, Values.HAT1);    if (haT2 == null || haT1 == null || tpT2 == null) {      return;    }    double diff1=haT1 - haT2;    double zLagHA=haT1 - diff1;    double diff2=tpT1 - tpT2;    double zLagTP=tpT1 - diff2;    double prevHaCL=series.getDouble(index - 1, Values.HACL, close);    boolean keep1=false, keep2=false, keep3=false, keeping=false;    if ((haCL >= haOp || prevHaCL >= prevHaOp || close >= haCL)) keep1=true;    if (!(haCL >= haOp || prevHaCL >= prevHaOp || close >= haCL) && (high > prevHigh || low > prevLow)) keep1=true;    keep2=(zLagHA - zLagTP) >= 0;    keep3=(Math.abs(close - open) < (high - low) * candleSize) && (high >= prevLow);    keeping=keep1 || keep2;    series.setBoolean(index, Values.KEEPING, keeping);    Boolean prevKeeping=series.getBoolean(index - 1, Values.KEEPING);    if (prevKeeping == null) return;    boolean keepAll=keeping || (prevKeeping && (close >= open || keep3));    series.setBoolean(index, Values.KEEPALL, keepAll);    Boolean prevKeepAll=series.getBoolean(index - 1, Values.KEEPALL);    if (prevKeepAll == null) return;    boolean utr=keepAll || (prevKeepAll && keep3);    series.setBoolean(index, Values.UTR, utr);    Boolean prevUtr=series.getBoolean(index - 1, Values.UTR);    if (prevUtr == null) return;    boolean keep4=haCL < haOp || prevHaCL < prevHaOp;    boolean keep5=(zLagTP - zLagHA) < 0;    boolean keep6=Math.abs(close - open) < ((high - low) * candleSize) && (low < prevHigh);    boolean keeping2=keep4 || keep5;    series.setBoolean(index, Values.KEEPING2, keeping2);    Boolean prevKeeping2=series.getBoolean(index - 1, Values.KEEPING2);    if (prevKeeping2 == null) return;    boolean keepAll2=keeping2 || (prevKeeping2 && (close < open || close < prevClose));    series.setBoolean(index, Values.KEEPALL2, keepAll2);    Boolean prevKeepAll2=series.getBoolean(index - 1, Values.KEEPALL2);    if (prevKeepAll2 == null) return;    boolean dtr=keepAll2 || (prevKeepAll2 && keep6);    series.setBoolean(index, Values.DTR, dtr);    Boolean prevDtr=series.getBoolean(index - 1, Values.DTR);    if (prevDtr == null) return;    boolean upw=(!dtr && prevDtr && utr);    boolean dnw=(!utr && prevUtr && dtr);    Boolean prevResult=series.getBoolean(index - 1, Values.RESULT, false);    boolean result=false; // (upw || dnw || !prevResult);    if (upw) result=true;    if (!upw && dnw) result=false;    if ((!upw && !dnw)) result=prevResult;    series.setBoolean(index, Values.RESULT, result);    Double xAvg=series.ma(emaM, index, emaP, Enums.BarInput.CLOSE);    boolean ltSell=close < xAvg;    Boolean prevLtResult=series.getBoolean(index - 1, Values.LTRESULT, false);    boolean ltResult=false;    if (result) ltResult=true;    if (!result && ltSell) ltResult=false;    if ((!result && !ltSell)) ltResult=prevLtResult;    series.setBoolean(index, Values.LTRESULT, ltResult);    double prevHacolt=series.getDouble(index - 1, Values.HACOLT, 0);    double hacolt=0.0;    if (result) hacolt=100.0;    if (!result && ltResult) hacolt=50.0;    if ((!result && !ltResult)) hacolt=0.0;    series.setDouble(index, Values.HACOLT, hacolt);    // Check for signal events    boolean sell=(prevHacolt != 50.0 && hacolt == 50.0) || (prevHacolt != 0.0 && hacolt == 0.0);    boolean buy=prevHacolt != 100.0 && hacolt == 100.0;    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      Coordinate c=new Coordinate(series.getStartTime(index), hacolt);      MarkerInfo marker=getSettings().getMarker(Inputs.DOWN_MARKER);       String msg = get("SELL_CLOSE_HACOLT", Util.round(close, 2), Util.round(hacolt, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, close);    }    if (buy) {      Coordinate c=new Coordinate(series.getStartTime(index), hacolt);      MarkerInfo marker=getSettings().getMarker(Inputs.UP_MARKER);       String msg = get("BUY_CLOSE_HACOLT", Util.round(close, 2), Util.round(hacolt, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, close);    }    series.setComplete(index);  }}