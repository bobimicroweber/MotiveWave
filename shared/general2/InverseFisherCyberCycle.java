package com.motivewave.platform.study.general2;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Inverse Fisher Cyber Cycle John Ehlers 146 */@StudyHeader(  namespace="com.motivewave",  id="ID_IFISHCC",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_INVERSE_FISHER_CYBER_CYCLE",  label="LBL_IFISHCC",  desc="DESC_IFISHCC",  menu="MENU_JOHN_EHLERS",  helpLink="http://www.motivewave.com/studies/inverse_fisher_cyber_cycle.htm",  signals=true,  overlay=false,  studyOverlay=true)public class InverseFisherCyberCycle extends Study{  final static String ALPHA="Alpha";  enum Values { SMTH, CYCLE, ICYCLE }  protected enum Signals { BUY, SELL }  double highSell=Double.NEGATIVE_INFINITY;  double lowBuy=Double.MAX_VALUE;  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.MIDPOINT));    inputs.addRow(new DoubleDescriptor(ALPHA, get("ALPHA"), .07, 0, 1.001, .001));    var settings=tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_IFISHCC"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var guides=tab.addGroup(get("GUIDES"));    var topDesc=new GuideDescriptor(Inputs.TOP_GUIDE, get("TOP_GUIDE"), 1, 0, 9999.01, .01, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -999.01, 999.01, .01, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var bottomDesc=new GuideDescriptor(Inputs.BOTTOM_GUIDE, get("BOTTOM_GUIDE"), -1, -9999.01, 0, .01, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    var shade=tab.addGroup(get("SHADING"));    shade.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    shade.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, ALPHA, Inputs.PATH, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, ALPHA);    desc.exportValue(new ValueDescriptor(Values.ICYCLE, get("LBL_IFISHCC"), new String[] { Inputs.INPUT, ALPHA }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.ICYCLE, Inputs.PATH);    desc.declareIndicator(Values.ICYCLE, Inputs.IND);    desc.setRangeKeys(Values.ICYCLE);    setMinBars(20);  }  @Override  protected void calculate(int index, DataContext ctx)  {    if (index < 3) return;    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.MIDPOINT);    double alpha=getSettings().getDouble(ALPHA);    var series=ctx.getDataSeries();    double cycle=0;    double price=series.getDouble(index, key, 0);    double prevP1=series.getDouble(index - 1, key, 0);    double prevP2=series.getDouble(index - 2, key, 0);    double prevP3=series.getDouble(index - 3, key, 0);    double smth=(price + 2 * prevP1 + 2 * prevP2 + prevP3) / 6.0;    series.setDouble(index, Values.SMTH, smth);    if (index < 5) {      cycle=(price - 2 * prevP1 + prevP2) / 4.0;      series.setDouble(index, Values.CYCLE, cycle); // default value      return;    }    double prevS1=series.getDouble(index - 1, Values.SMTH, 0);    double prevS2=series.getDouble(index - 2, Values.SMTH, 0);    double prevC1=series.getDouble(index - 1, Values.CYCLE, 0);    double prevC2=series.getDouble(index - 2, Values.CYCLE, 0);    cycle=(1 - .5 * alpha) * (1 - .5 * alpha) * (smth - 2 * prevS1 + prevS2) + 2 * (1 - alpha) * prevC1 - (1 - alpha)        * (1 - alpha) * prevC2;    series.setDouble(index, Values.CYCLE, cycle);    double icycle=100 * (Math.exp(2 * cycle) - 1) / (Math.exp(2 * cycle) + 1);    series.setDouble(index, Values.ICYCLE, icycle);    // Check for signal events    var topGuide=getSettings().getGuide(Inputs.TOP_GUIDE);    double topG=topGuide.getValue();    var bottomGuide=getSettings().getGuide(Inputs.BOTTOM_GUIDE);    double bottG=bottomGuide.getValue();    double prevI=series.getDouble(index - 1, Values.ICYCLE, 0.0);    boolean sell=icycle > topG && prevI > icycle && (icycle > highSell); // peaked above topG    boolean buy=icycle < bottG && prevI < icycle && (icycle < lowBuy); // trough below bottG    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      lowBuy=Double.MAX_VALUE;      highSell=icycle;      var c=new Coordinate(series.getStartTime(index), icycle);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_INVERSE_FISHER_CYBER_PRICE_ICYCLE", Util.round(price, 2), Util.round(icycle, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, price);    }    if (buy) {      highSell=Double.NEGATIVE_INFINITY;      lowBuy=icycle;      var c=new Coordinate(series.getStartTime(index), icycle);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_INVERSE_FISHER_CYBER_PRICE_ICYCLE", Util.round(price, 2), Util.round(icycle, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, price);    }    series.setComplete(index);  }}