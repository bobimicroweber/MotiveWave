package com.motivewave.platform.study.general2;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Signal to Noise Ratio John F. Ehlers 173 */@StudyHeader(  namespace="com.motivewave",  id="ID_SIGNAL_NOISE_RATIO",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_STNR",  name="NAME_SIGNAL_TO_NOISE_RATIO",  desc="DESC_STNR",  menu="MENU_JOHN_EHLERS",  helpLink="http://www.motivewave.com/studies/signal_to_noise_ratio.htm",  signals=false,  overlay=false,  studyOverlay=true)public class SignalToNoiseRatio extends Study{  final static double iMult=.635;  final static double qMult=.338;  enum Values { V1, INPHASE, QUAD, RANGE, V2, AMP }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.MIDPOINT));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("HILBERT_TRANSFORM_PERIOD"), 7, 7, 9999, 1));    var settings=tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("AMPLITUDE"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("INDICATOR"), defaults.getLineColor(), null, false, true, true));    var guides=tab.addGroup(get("GUIDE"));    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 6, -999.01, 999.01, .01, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("HILBERT_TRANSFORM_PERIOD"), 7, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD);    desc.exportValue(new ValueDescriptor(Values.INPHASE, get("INPHASE"), new String[] { Inputs.INPUT, Inputs.PERIOD }));    desc.declarePath(Values.AMP, Inputs.PATH);    desc.declareIndicator(Values.AMP, Inputs.IND);    desc.setRangeKeys(Values.AMP);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1 + 4);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    if (index < p1) return;    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.MIDPOINT);    var series=ctx.getDataSeries();    double amp=0.0;    double price=series.getDouble(index, key, 0);    double priorP=series.getDouble(index - p1, key, 0);    // v1 = detrend price    double v1=price - priorP;    double high=series.getHigh(index);    double low=series.getLow(index);    double prevRange=series.getDouble(index - 1, Values.RANGE, 0);    double range=(.2 * (high - low)) + (.8 * prevRange);    series.setDouble(index, Values.RANGE, range);    series.setDouble(index, Values.V1, v1);    if (index < p1 + 4) return;    double vMinus2=series.getDouble(index - 2, Values.V1, 0);    double vMinus4=series.getDouble(index - 4, Values.V1, 0);    double inPhase3=series.getDouble(index - 3, Values.INPHASE, 0);    double quad2=series.getDouble(index - 2, Values.QUAD, 0);    // Hilbert Transform values inPhase(real part), quadrature(imaginary part)    double inPhase=1.25 * (vMinus4 - (iMult * vMinus2) + (iMult * inPhase3));    double quad=vMinus2 - (qMult * v1) + (qMult * quad2);    series.setDouble(index, Values.INPHASE, inPhase);    series.setDouble(index, Values.QUAD, quad);    double prevV2=series.getDouble(index - 1, Values.V2, 0);    // smoothed signal amplitude    double v2=.2 * (inPhase * inPhase + quad * quad) + .8 * prevV2;    series.setDouble(index, Values.V2, v2);    double prevAmp=series.getDouble(index - 1, Values.AMP, 0);    // smoothed SNR in decibels    if (v2 < .001) v2=.001;    if (range > 0) {      amp=.25 * (10 * Math.log(v2 / (range * range)) / Math.log(10) + 1.9) + .75 * prevAmp;    }    series.setDouble(index, Values.AMP, amp);    series.setComplete(index);  }}