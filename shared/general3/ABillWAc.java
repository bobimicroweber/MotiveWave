package com.motivewave.platform.study.general3;import java.awt.Color;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.ColorDescriptor;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** ABillW_Ac 041 */@StudyHeader(  namespace="com.motivewave",  rb="com.motivewave.platform.study.nls.strings2",  id="ID_ACC_DEC_OSCILLATOR",  name="NAME_ACCELERATOR_DECELERATOR_OSCILLATOR",  desc="DESC_ABW_AC",  label="LBL_BWAC",  menu="MENU_BILL_WILLIAMS",  helpLink="http://www.motivewave.com/studies/accelerator_decelerator_oscillator.htm",  signals=true,  overlay=false,  studyOverlay=true)public class ABillWAc extends Study{  final static String PERIOD1="Period1", PERIOD2="Period2", PERIOD3="Period3";  enum Values { AO, AC }  protected enum Signals { SELL, BUY }  double highSell=Double.NEGATIVE_INFINITY;  double lowBuy=Double.MAX_VALUE;  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.MIDPOINT));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.SMA));    inputs.addRow(new IntegerDescriptor(PERIOD1, get("PERIOD1"), 5, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(PERIOD2, get("PERIOD2"), 34, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(PERIOD3, get("PERIOD3"), 5, 1, 999, 1));    var settings=tab.addGroup(get("COLORS"));    settings.addRow(new ColorDescriptor(Inputs.UP_COLOR, get("LBL_UP_COLOR"), defaults.getGreen()));    settings.addRow(new ColorDescriptor(Inputs.DOWN_COLOR, get("LBL_DOWN_COLOR"), defaults.getRed()));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var guides=tab.addGroup(get("GUIDES"));    var topDesc=new GuideDescriptor(Inputs.TOP_GUIDE, get("TOP_GUIDE"), 1.5, 0, 100.001, .001, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -10.001, 10.001, .001, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var bottomDesc=new GuideDescriptor(Inputs.BOTTOM_GUIDE, get("BOTTOM_GUIDE"), -1.5, -100.001, 0, .001, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(PERIOD1, get("PERIOD1"), 5, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(PERIOD2, get("PERIOD2"), 34, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(PERIOD3, get("PERIOD3"), 5, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.UP_COLOR, Inputs.DOWN_COLOR);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, PERIOD1, PERIOD2, PERIOD3);    desc.exportValue(new ValueDescriptor(Values.AC, get("ABWL1"), new String[] { Inputs.INPUT, Inputs.METHOD, PERIOD1, PERIOD2, PERIOD3 }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declareBars(Values.AC);    desc.declareIndicator(Values.AC, Inputs.IND);    desc.setRangeKeys(Values.AC);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(PERIOD1);    int p2=getSettings().getInteger(PERIOD2);    int p3=getSettings().getInteger(PERIOD3);    setMinBars(Math.max(p1, p2) + p3 + 1);  }  @Override  public void calculate(int index, DataContext ctx)  {    int period1=getSettings().getInteger(PERIOD1);    int period2=getSettings().getInteger(PERIOD2);    int period3=getSettings().getInteger(PERIOD3);    int longPeriod=Math.max(period1, period2);    if (index < longPeriod) return;    var series=ctx.getDataSeries();    Object input=getSettings().getInput(Inputs.INPUT, Enums.BarInput.MIDPOINT);    var method=getSettings().getMAMethod(Inputs.METHOD);    Double ma1=series.ma(method, index, period1, input);    if (ma1 == null) return;    Double ma2=series.ma(method, index, period2, input);    if (ma2 == null) return;    Double ao=ma1 - ma2;    series.setDouble(index, Values.AO, ao);    if (index < longPeriod + period3) return;    Double ac=series.ma(method, index, period3, Values.AO);    if (ac == null) return;    ac=ao - ac;    series.setDouble(index, Values.AC, ac);    if (index < longPeriod + period3 + 1) return;    // Check for signal events    double prevAc=series.getDouble(index - 1, Values.AC, 0.0);    var topGuide=getSettings().getGuide(Inputs.TOP_GUIDE);    double topG=topGuide.getValue();    Color upC=getSettings().getColor(Inputs.UP_COLOR);    Color dnC=getSettings().getColor(Inputs.DOWN_COLOR);    if (ac > prevAc) series.setBarColor(index, Values.AC, upC);    else series.setBarColor(index, Values.AC, dnC);    var bottomGuide=getSettings().getGuide(Inputs.BOTTOM_GUIDE);    double bottG=bottomGuide.getValue();    double low=series.getLow(index);    double high=series.getHigh(index);    boolean sell=(ac > topG) && (prevAc > ac) && (ac > highSell); // peaked above topG    boolean buy=(ac < bottG && prevAc < ac) && (ac < lowBuy); // trough below bottG    series.setBoolean(index, Signals.BUY, buy);    series.setBoolean(index, Signals.SELL, sell);    if (sell) {      lowBuy=Double.MAX_VALUE;      highSell=ac;      var c=new Coordinate(series.getStartTime(index), ac);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_HIGH_BWAC", Util.round(high, 2), Util.round(ac, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, high);    }    if (buy) {      highSell=Double.NEGATIVE_INFINITY;      lowBuy=ac;      var c=new Coordinate(series.getStartTime(index), ac);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_LOW_BWAC", Util.round(low, 2), Util.round(ac, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, low);    }    series.setComplete(index);  }}