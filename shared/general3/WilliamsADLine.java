package com.motivewave.platform.study.general3;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.BooleanDescriptor;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Larry Williams Accumulation Distribution Line 185 */@StudyHeader(  namespace="com.motivewave",  id="WILLIAMS_AD_LINE",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_WILLIAMS_A/D_LINE",  label="LBL_WADL",  desc="DESC_WADL",  helpLink="http://www.motivewave.com/studies/williams_ad_line.htm",  overlay=false,  requiresVolume=true,  studyOverlay=true)public class WilliamsADLine extends Study{  final static String USE_VOL="UseVol";  enum Values { WADL }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup("Inputs");    inputs.addRow(new BooleanDescriptor(USE_VOL, get("USE_VOLUME"), true));    var settings=tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("PATH"), defaults.getLineColor(), 1.0f, null, true, false, false));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("INDICATOR"), null, null, false, true, true));    var guides=tab.addGroup(get("GUIDES"));    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -9999, 9999, 1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(USE_VOL, Inputs.PATH, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);    var desc=createRD();    desc.exportValue(new ValueDescriptor(Values.WADL, get("LBL_WADL"), new String[] {}));    desc.setLabelSettings(USE_VOL);    desc.declarePath(Values.WADL, Inputs.PATH);    desc.declareIndicator(Values.WADL, Inputs.IND);    desc.setRangeKeys(Values.WADL);    setMinBars(21);  }  @Override  protected void calculate(int index, DataContext ctx)  {    if (index < 1) return;    var series=ctx.getDataSeries();    boolean useVol=getSettings().getBoolean(USE_VOL);    double high=series.getHigh(index);    double low=series.getLow(index);    double close=series.getClose(index);    double prevClose=series.getClose(index - 1);    long vol=0;    if (useVol) vol=series.getVolume(index);    double trHigh=Math.max(high, prevClose);    double trLow=Math.min(low, prevClose);    double priceMove=0.0;    if (close > prevClose) {      priceMove=close - trLow;    }    if (close < prevClose) {      priceMove=close - trHigh;    }    if (close == prevClose) {      priceMove=0.0;    }    double prevWadl=series.getDouble(index - 1, Values.WADL, 0);    double wadl=0.0;    wadl=priceMove + prevWadl;    if (useVol) {      wadl=(priceMove * vol) + prevWadl;    }    series.setDouble(index, Values.WADL, wadl);    series.setComplete(index);  }}