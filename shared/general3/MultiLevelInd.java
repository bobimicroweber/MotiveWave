package com.motivewave.platform.study.general3;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** MultiLevel Indicator 192 */@StudyHeader(  namespace="com.motivewave",  id="ID_MULTI_LEVEL",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_MULTI_LEVEL_INDICATOR",  label="LBL_MULTL",  desc="DESC_MULTL",  helpLink="http://www.motivewave.com/studies/multi_level_indicator.htm",  overlay=false,  signals=true)public class MultiLevelInd extends Study{  final static String[] timeFrame= { "05 min", "15 min", "30 min", "60 min" };  enum Values { Z, C }  protected enum Signals { SELL, BUY }  boolean first=true;  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("SIGNAL_LEVEL_TIME_FRAME"), timeFrame, timeFrame[0]));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("FACTOR"), 10000, 1, 99999, 1));    var settings=tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("PATH"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("INDICATOR"), defaults.getLineColor(), null, false, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var guides=tab.addGroup(get("GUIDES"));    var topDesc=new GuideDescriptor(Inputs.TOP_GUIDE, get("TOP_GUIDE"), 10, 0, 999.1, .1, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, 0, 999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var bottomDesc=new GuideDescriptor(Inputs.BOTTOM_GUIDE, get("BOTTOM_GUIDE"), -10, 0, -999.1, .1, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("FACTOR"), 10000, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);    var desc=createRD();    desc.exportValue(new ValueDescriptor(Values.Z, get("LBL_MULTL"), new String[] { Inputs.INPUT, Inputs.PERIOD }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD);    // desc.getPricePlot().declarePath(Values.C, Inputs.PATH2);    desc.declarePath(Values.Z, Inputs.PATH);    desc.declareIndicator(Values.Z, Inputs.IND);    desc.setRangeKeys(Values.Z);    setMinBars(60);  }  @Override  public void onBarClose(DataContext ctx)  {    calculateValues(ctx);  }  @Override  protected void calculateValues(DataContext ctx)  {    var series=ctx.getDataSeries();    var bar1=series.getBarSize();    int barMin1=bar1.getIntervalMinutes();    if (barMin1 != 1) return;    String tFrame=(String) getSettings().getInput(Inputs.INPUT);    int xBarMin=Integer.valueOf(tFrame.substring(0, 2));    int factor=getSettings().getInteger(Inputs.PERIOD);    int size=series.size();    if (size < xBarMin) return;    double close=0, open1=0, openx=0, z=0;    for (int i=xBarMin; i < size; i++) {      close=series.getClose(i);      open1=series.getOpen(i);      openx=series.getOpen(i - xBarMin);      z=((close - open1) - (close - openx)) * factor;      series.setDouble(i, Values.Z, z);      // series.setDouble(i, Values.C, close);      // Check for signal events      var topGuide=getSettings().getGuide(Inputs.TOP_GUIDE);      double topG=topGuide.getValue();      var bottomGuide=getSettings().getGuide(Inputs.BOTTOM_GUIDE);      double bottG=bottomGuide.getValue();      double prevZ=series.getDouble(i - 1, Values.Z, z);      boolean sell=prevZ < topG && z > topG;      boolean buy=prevZ > bottG && z < bottG;      series.setBoolean(i, Signals.BUY, buy);      series.setBoolean(i, Signals.SELL, sell);      if (sell) {        var c=new Coordinate(series.getStartTime(i), z);        var marker=getSettings().getMarker(Inputs.DOWN_MARKER);        String msg=get("SELL_CLOSE_Z", Util.round(close, 2), Util.round(z, 3));        if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));        ctx.signal(i, Signals.SELL, msg, close);      }      if (buy) {        var c=new Coordinate(series.getStartTime(i), z);        var marker=getSettings().getMarker(Inputs.UP_MARKER);        String msg=get("BUY_CLOSE_Z", Util.round(close, 2), Util.round(z, 3));        if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));        ctx.signal(i, Signals.BUY, msg, close);      }      series.setComplete(i);    }  }}