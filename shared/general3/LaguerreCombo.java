package com.motivewave.platform.study.general3;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Laguerre Combo John F. Ehlers 189 */@StudyHeader(  namespace="com.motivewave",  id="ID_LAG_COMBO",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_LAGCOMBO",  name="NAME_LAGUERRE_COMBO",  desc="DESC_LAGCOMBO",  menu="MENU_JOHN_EHLERS",  helpLink="http://www.motivewave.com/studies/laguerre_combo.htm",  signals=false,  overlay=false,  studyOverlay=true)public class LaguerreCombo extends Study {  final static String GAMMA="Gamma", ALPHA="Alpha", IND3="Ind3";  enum Values { RSI, DIFF, MID, R_L0, R_L1, R_L2, R_L3, F_L0, F_L1, F_L2, F_L3, FIR, FILT }  @Override  public void initialize(Defaults defaults)   {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("RSI_INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new DoubleDescriptor(GAMMA, get("RSI_GAMMA"), .5, .1, 1, .01));    inputs.addRow(new InputDescriptor(Inputs.INPUT2, get("FILTER_INPUT"), Enums.BarInput.MIDPOINT));    inputs.addRow(new DoubleDescriptor(ALPHA, get("FILTER_ALPHA"), .2, 0, .99, .01));    var settings=tab.addGroup(get("RSI_PATH_AND_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("RSI_PATH"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("RSI_INDICATOR"), defaults.getLineColor(), null, false, true, true));        settings=tab.addGroup(get("FILTER_PATHS_AND_INDICATORS"));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("FILTER_PATH"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new PathDescriptor(Inputs.PATH3, get("FIR_PATH"), defaults.getRed(), 1.0f, null, true, false, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("FILTER_INDICATOR"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(IND3, get("FIR_INDICATOR"), defaults.getRed(), null, false, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var guides=tab.addGroup(get("GUIDES"));    var topDesc=new GuideDescriptor(Inputs.TOP_GUIDE, get("TOP_GUIDE"), .8, .01, 1, .01, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), .5, .01, 1, .01, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var bottomDesc=new GuideDescriptor(Inputs.BOTTOM_GUIDE, get("BOTTOM_GUIDE"), .2, .01, 1, .01, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, GAMMA, Inputs.INPUT2, ALPHA, Inputs.PATH, Inputs.PATH2, Inputs.PATH3, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, GAMMA);    desc.setLabelPrefix("LAGRSI");    desc.exportValue(new ValueDescriptor(Values.RSI, get("LBL_LRSI"), new String[] { Inputs.INPUT,GAMMA }));    // Price plot (moving average)    desc.getPricePlot().setLabelSettings(Inputs.INPUT2, ALPHA);    desc.getPricePlot().setLabelPrefix("LAGFILT");    desc.getPricePlot().declarePath(Values.FILT, Inputs.PATH2);    desc.getPricePlot().declarePath(Values.FIR, Inputs.PATH3);    desc.getPricePlot().declareIndicator(Values.FILT, Inputs.IND2);    desc.getPricePlot().declareIndicator(Values.FIR, IND3);    desc.getPricePlot().setRangeKeys(Values.FILT, Values.FIR);    desc.declarePath(Values.RSI, Inputs.PATH);    desc.declareIndicator(Values.RSI, Inputs.IND);    desc.setRangeKeys(Values.RSI);    setMinBars(21);  }  @Override  protected void calculate(int index, DataContext ctx)   {    if (index < 3) return;    Object rsiKey=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    double gamma=getSettings().getDouble(GAMMA);    Object filtKey=getSettings().getInput(Inputs.INPUT2, Enums.BarInput.MIDPOINT);    double alpha=getSettings().getDouble(ALPHA);    var series=ctx.getDataSeries();        //Laguerre RSI Calculations    double rsiPrice=series.getDouble(index, rsiKey, 0);    double prevrL0=series.getDouble(index - 1, Values.R_L0, rsiPrice);    double prevrL1=series.getDouble(index - 1, Values.R_L1, rsiPrice);    double prevrL2=series.getDouble(index - 1, Values.R_L2, rsiPrice);    double prevrL3=series.getDouble(index - 1, Values.R_L3, rsiPrice);    double rl0 = (1 - gamma) * rsiPrice + gamma * prevrL0;    double rl1 = -gamma *rl0 + prevrL0 + gamma * prevrL1;    double rl2 = -gamma * rl1 + prevrL1 + gamma * prevrL2;    double rl3 = -gamma * rl2 + prevrL2 + gamma * prevrL3;    double cu = 0, cd = 0, rsi = 0;        if (rl0 >= rl1) cu = rl0 - rl1;    else cd = rl1 - rl0;        if (rl1 >= rl2) cu = cu + rl1 - rl2;    else cd = cd + rl2 - rl1;        if (rl2 >= rl3) cu = cu + rl2 - rl3;    else cd = cd + rl3 - rl2;        if ( cu + cd != 0.0) rsi = cu / (cu + cd);        series.setDouble(index, Values.RSI, rsi);    series.setDouble(index, Values.R_L0, rl0);    series.setDouble(index, Values.R_L1, rl1);    series.setDouble(index, Values.R_L2, rl2);    series.setDouble(index, Values.R_L3, rl3);    //Laguerre Filter Calculations    double price=series.getDouble(index, filtKey, 0);    double priorP1=series.getDouble(index - 1, filtKey, 0);    double priorP2=series.getDouble(index - 2, filtKey, 0);    double priorP3=series.getDouble(index - 3, filtKey, 0);    double prevL0=series.getDouble(index - 1, Values.F_L0, price);    double prevL1=series.getDouble(index - 1, Values.F_L1, price);    double prevL2=series.getDouble(index - 1, Values.F_L2, price);    double prevL3=series.getDouble(index - 1, Values.F_L3, price);    double l0=alpha * price + (1 - alpha) * prevL0;    double l1=-(1 - alpha) * l0 + prevL0 + (1 - alpha) * prevL1;    double l2=-(1 - alpha) * l1 + prevL1 + (1 - alpha) * prevL2;    double l3=-(1 - alpha) * l2 + prevL2 + (1 - alpha) * prevL3;    double filt=(l0 + 2 * l1 + 2 * l2 + l3) / 6.0;    double fir=(price + 2 * priorP1 + 2 * priorP2 + priorP3) / 6.0;    series.setDouble(index, Values.FILT, filt);    series.setDouble(index, Values.FIR, fir);    series.setDouble(index, Values.F_L0, l0);    series.setDouble(index, Values.F_L1, l1);    series.setDouble(index, Values.F_L2, l2);    series.setDouble(index, Values.F_L3, l3);    series.setComplete(index);  } }