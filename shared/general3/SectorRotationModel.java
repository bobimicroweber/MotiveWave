package com.motivewave.platform.study.general3;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.ColorDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.InstrumentDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Sector Rotation Model 191 */@StudyHeader(    namespace="com.motivewave",     id="ID_SECROTMOD",    rb="com.motivewave.platform.study.nls.strings2",    name="NAME_SECTOR_ROTATION_MODEL",    label="LBL_SECROTMOD",    desc="DESC_SECROTMOD",    helpLink="http://www.motivewave.com/studies/sector_rotation_model.htm",    overlay=false,    multipleInstrument=true,    requiresBarUpdates=true)public class SectorRotationModel extends Study{  final static String INSTR5 = "Instr5";  final static int minPerDay = 24 * 60;  enum Values { OSC }    @Override  public void initialize(Defaults defaults)  {    var sd = createSD();    var tab = sd.addTab(get("TAB_GENERAL"));    var inputs = tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.values(), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("ROC_PERIOD"), 75, 1, 999, 1));    inputs.addRow(new InstrumentDescriptor(Inputs.INSTRUMENT1, get("SELECT_FINANCIAL_(XLF)")));    inputs.addRow(new InstrumentDescriptor(Inputs.INSTRUMENT2, get("SELECT_CONSUMER_DISCRETIONARY_(XLY)")));    inputs.addRow(new InstrumentDescriptor(Inputs.INSTRUMENT3, get("SELECT_ENERGY_(XLE)")));    inputs.addRow(new InstrumentDescriptor(Inputs.INSTRUMENT4, get("SELECT_UTILITIES_(XLU)")));    inputs.addRow(new InstrumentDescriptor(INSTR5, get("SELECT_CONSUMER_STAPLES_(XLP)")));    tab = sd.addTab(get("COLORS"));    var display = tab.addGroup(get("DISPLAY"));    display.addRow(new ColorDescriptor(Inputs.UP_COLOR, get("UP_COLOR"), defaults.getGreen(), true, true));    display.addRow(new ColorDescriptor(Inputs.DOWN_COLOR, get("DOWN_COLOR"), defaults.getRed(), true, true));    display.addRow(new IndicatorDescriptor(Inputs.IND, get("INDICATOR"), null, null, false, true, true));        // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("ROC_PERIOD"), 75, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.INSTRUMENT1, Inputs.INSTRUMENT2, Inputs.INSTRUMENT3, Inputs.INSTRUMENT4, INSTR5, Inputs.UP_COLOR, Inputs.DOWN_COLOR);    var desc = createRD();    desc.exportValue(new ValueDescriptor(Values.OSC, get("LBL_SECROTMOD"),         new String[] {Inputs.INSTRUMENT1, Inputs.INSTRUMENT2, Inputs.INSTRUMENT3, Inputs.INSTRUMENT4, INSTR5}));    desc.setLabelSettings(Inputs.INSTRUMENT1, Inputs.INSTRUMENT2, Inputs.INSTRUMENT3, Inputs.INSTRUMENT4, INSTR5);    desc.declareBars(Values.OSC, null);    desc.declareIndicator(Values.OSC, Inputs.IND);    desc.setRangeKeys(Values.OSC);    desc.getDefaultPlot().setFormatMK(false);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1);  }    @Override    protected void calculate(int index, DataContext ctx)  {    int period = getSettings().getInteger(Inputs.PERIOD);    if (index <= period) return;        var input = (Enums.BarInput)getSettings().getInput(Inputs.INPUT);    var instr1 = getSettings().getInstrument(Inputs.INSTRUMENT1);    var instr2 = getSettings().getInstrument(Inputs.INSTRUMENT2);    var instr3 = getSettings().getInstrument(Inputs.INSTRUMENT3);    var instr4 = getSettings().getInstrument(Inputs.INSTRUMENT4);    var instr5 = getSettings().getInstrument(INSTR5);    var upColor = getSettings().getColorInfo(Inputs.UP_COLOR);    var downColor = getSettings().getColorInfo(Inputs.DOWN_COLOR);        var series = ctx.getDataSeries();    var bar=series.getBarSize();    int barMin=bar.getIntervalMinutes();    if (barMin != minPerDay) return;    Double bull01 = series.roc(index, period, input, instr1);    if (bull01 == null) return;    Double bull02 = series.roc(index, period, input, instr2);    if (bull02 == null) return;    Double bear01 = series.roc(index, period, input, instr3);    if (bear01 == null) return;    Double bear02 = series.roc(index, period, input, instr4);    if (bear02 == null) return;    Double bear03 = series.roc(index, period, input, instr5);    if (bear03 == null) return;        double bear = (bear01 + bear02 + bear03) / 3.0;    double bull = (bull01 + bull02) / 2.0;        double osc = 100.0 * (bull - bear);    series.setDouble(index, Values.OSC, osc);        if (upColor.isEnabled() && osc >= 0.0) {      series.setBarColor(index, Values.OSC, upColor.getColor());    }    if (downColor.isEnabled() && osc < 0.0) {      series.setBarColor(index, Values.OSC, downColor.getColor());    }     series.setComplete(index);  }}