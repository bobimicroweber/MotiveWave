package com.motivewave.platform.study.strategies;import com.motivewave.platform.sdk.order_mgmt.OrderContext;import com.motivewave.platform.sdk.study.StudyHeader;import com.motivewave.platform.study.overlay.VIDYA2;/** VIDYA2 Strategy 126 */@StudyHeader(  namespace="com.motivewave",  id="ID_VIDYA2ST",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_VIDYA2_STRATEGY",  label="LBL_VIDYA2ST",  desc="DESC_VIDYA2",  menu="MENU_TUSHAR_CHANDE",  helpLink="http://www.motivewave.com/strategies/vidya2_strategy.htm",  overlay=true,  signals=true,  strategy=true,  autoEntry=true,  manualEntry=false,  supportsUnrealizedPL=true,  supportsRealizedPL=true,  supportsTotalPL=true,  supportsPositionType=true)public class Vidya2Strategy extends VIDYA2{  @Override  public void onActivate(OrderContext ctx)  {    if (getSettings().isEnterOnActivate()) {      var series=ctx.getDataContext().getDataSeries();      int ind=series.isLastBarComplete() ? series.size() - 1 : series.size() - 2;      // This is a little tricky, find the last signal and check to see if it is a buy or sell      int lastBuy = -1;      for(int i = ind; i >= 0; i--) {        if (series.getBoolean(i, Signals.BUY, false)) { lastBuy = i; break; }      }      int lastSell = -1;      for(int i = ind; i >= 0; i--) {        if (series.getBoolean(i, Signals.SELL, false)) { lastSell = i; break; }      }      if (lastBuy == -1 && lastSell == -1) return;            boolean buy = lastBuy > lastSell;      int tradeLots=getSettings().getTradeLots();      float qty=tradeLots*=ctx.getInstrument().getDefaultQuantityAsFloat();      switch (getSettings().getPositionType()) {      case LONG: // Only Long Positions are allowed.        if (buy) ctx.buy(qty);        break;      case SHORT: // Only Short Positions are allowed.        if (!buy) ctx.sell(qty);        break;      default: // Both Long and Short Positions Allowed        if (buy) ctx.buy(qty);        else ctx.sell(qty);      }    }  }  @Override  public void onSignal(OrderContext ctx, Object signal)  {    var instr=ctx.getInstrument();    float position=ctx.getPositionAsFloat();    float qty=(getSettings().getTradeLots() * instr.getDefaultQuantityAsFloat());    switch (getSettings().getPositionType()) {    case LONG: // Only Long Positions are allowed.      if (position == 0 && signal == Signals.BUY) ctx.buy(qty); // Open Long Position      if (position > 0 && signal == Signals.SELL) ctx.sell(qty); // Close Long Position      break;    case SHORT: // Only Short Positions are allowed.      if (position == 0 && signal == Signals.SELL) ctx.sell(qty); // Open Short Position      if (position < 0 && signal == Signals.BUY) ctx.buy(qty); // Close Short Position      break;    default: // Both Long and Short Positions Allowed      qty+=Math.abs(position); // Stop and Reverse if there is an open position      if (position <= 0 && signal == Signals.BUY) ctx.buy(qty); // Open Long Position      if (position >= 0 && signal == Signals.SELL) ctx.sell(qty); // Open Short Position    }  }}