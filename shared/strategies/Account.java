package com.motivewave.platform.study.strategies;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.order_mgmt.OrderContext;import com.motivewave.platform.sdk.study.Study;public class Account{  static Study studyThis = null;  //used for get(str);  static enum Signal {ENTER_LONG, EXIT_LONG, ENTER_SHORT, EXIT_SHORT, BUY, SELL, STOP_ALL, STOP_LONG, STOP_SHORT};  static final float CLOSED = 0;    private PosType positionType = PosType.LONG;  //SAR, LONG, SHORT, BOTH  private boolean stopAndRev = false;  //Stop and Reverse    OrdType orderType = OrdType.MARKET;  //MARKET or LIMIT  float position = CLOSED;  //0  float bidPrice = 0;  float askPrice = 0;  double enterLongPrice = 0.0;  double enterShortPrice = 0.0;    Account(PosType posType, OrdType ot, float pos){    positionType = posType;  //SAR, Both, Long, Short, Both    orderType = ot;  //Market, Limit    position = pos;    stopAndRev = false;    if (posType == PosType.SAR){      positionType = PosType.BOTH;      stopAndRev = true;    }  }      public void setPositionType(PosType pt){    positionType = pt;    stopAndRev = false;    if (pt == PosType.SAR){      positionType = PosType.BOTH;      stopAndRev = true;    }  }  boolean processSignal(OrderContext octx, Signal sig, float qty, double price){    if (sig == Signal.ENTER_LONG){      if (positionType == PosType.BOTH){        if ( position < CLOSED && stopAndRev){          orderBuy(octx, (-position + qty));  //enterQty);          enterLongPrice = price;          position = qty;          return true;        }        if (position == CLOSED){  //0          orderBuy(octx, qty);          enterLongPrice = price;          position = qty;          return true;        }      }      if (positionType == PosType.LONG){        if ( position == CLOSED){  //0          orderBuy(octx, qty);          enterLongPrice = price;          position = qty;          return true;        }      }    }        if (sig == Signal.EXIT_LONG ){      if (positionType == PosType.LONG){        if ( position > CLOSED ){            orderSell(octx, position);          enterLongPrice = 0;          position = CLOSED;  //0          return true;        }      }    if (positionType == PosType.BOTH){      if ( position > CLOSED){          orderSell(octx, position);        enterLongPrice = 0;        position = CLOSED;  //0        return true;      }    }  }    if (sig == Signal.ENTER_SHORT){      if (positionType == PosType.BOTH){        if ( position > CLOSED && stopAndRev){           orderSell(octx, (position + qty));          enterShortPrice = price;          position = -qty;  //-1;          return true;        }        if (position == CLOSED){          orderSell(octx, qty);          enterShortPrice = price;          position = -qty;          return true;        }      }      if (positionType == PosType.SHORT){        if ( position == CLOSED){  //0          orderSell(octx, qty);          enterShortPrice = price;          position = -qty;          return true;        }      }    }     if (sig == Signal.EXIT_SHORT){      if (positionType == PosType.BOTH){        if ( position < CLOSED){          orderBuy(octx, -position);          enterShortPrice = 0;          position = CLOSED;  // 0;          return true;        }      }      if (positionType == PosType.SHORT){        if ( position < CLOSED){          orderBuy(octx, -position);          enterShortPrice = 0;          position = CLOSED;  // 0;          return true;        }      }    }    if (sig == Signal.BUY){      if (positionType == PosType.BOTH){        if ( position < CLOSED && stopAndRev){          orderBuy(octx, (-position + qty));          enterLongPrice = price;          position = qty;           return true;        }        if (position == CLOSED){          orderBuy(octx, qty);          enterLongPrice = price;          position = qty;           return true;        }      }      if (positionType == PosType.LONG){        if ( position == CLOSED){  //0          orderBuy(octx, qty);          enterLongPrice = price;          position = qty;          return true;        }      }      if (positionType == PosType.SHORT){        if ( position < CLOSED){          orderBuy(octx, -position);          enterShortPrice = 0;          position = CLOSED;          return true;        }      }    }     if (sig == Signal.SELL){      if (positionType == PosType.BOTH){        if ( position > CLOSED && stopAndRev){  //Long          orderSell(octx, (position + qty));          enterShortPrice = price;          position = -qty;  //-1;           return true;        }        if (position == CLOSED){          orderSell(octx, qty);          enterShortPrice = price;          position = -qty;          return true;        }      }      if (positionType == PosType.LONG){        if ( position > CLOSED){          orderSell(octx, position);          enterLongPrice = 0;          position = CLOSED;          return true;        }      }      if (positionType == PosType.SHORT){        if ( position == CLOSED) {          orderSell(octx, qty);          enterShortPrice = price;          position = -qty;          return true;        }      }    }    if (sig == Signal.STOP_ALL){      octx.cancelOrders();      if ( position > CLOSED){  //Long          octx.sell(position);          enterLongPrice = 0;          position = CLOSED;            return true;        }      if ( position < CLOSED){  //Short        octx.buy(-position);        enterShortPrice = 0;        position = CLOSED;          return true;      }    }    if (sig == Signal.STOP_LONG){      if ( position > CLOSED){  //Long        octx.sell(position);        enterLongPrice = 0;        position = CLOSED;        octx.cancelOrders();        return true;      }    }    if (sig == Signal.STOP_SHORT){      if ( position < CLOSED){  //Short        octx.buy(-position);        enterShortPrice = 0;        position = CLOSED;        octx.cancelOrders();        return true;      }    }         return false;  }  boolean orderBuy(OrderContext octx, float qty){    if (orderType == OrdType.MARKET){      octx.buy(qty);    }    if (orderType == OrdType.LIMIT){      if (bidPrice == 0) return false;      octx.createLimitOrder(Enums.OrderAction.BUY, Enums.TIF.GTC, qty, bidPrice);    }        return true;  }    boolean orderSell(OrderContext octx, float qty){    if (orderType == OrdType.MARKET){      octx.sell(qty);    }    if (orderType == OrdType.LIMIT){      if (askPrice == 0) return false;      octx.createLimitOrder(Enums.OrderAction.SELL, Enums.TIF.GTC, qty, askPrice);    }        return true;  }  void close(OrderContext octx){    octx.cancelOrders();    octx.closeAtMarket();     position = CLOSED;    enterLongPrice = 0;    enterShortPrice = 0;    bidPrice = 0;    askPrice = 0;  }    public enum PosType {    SAR,    BOTH,    LONG,    SHORT;    @Override    public String toString(){      if (this.equals(SAR)) return studyThis.get("STOP_AND_REVERSE");      if (this.equals(BOTH)) return studyThis.get("BOTH_LONG_SHORT");      if (this.equals(LONG)) return studyThis.get("LONG");      if (this.equals(SHORT)) return studyThis.get("SHORT");      return "";    }  }  public enum OrdType {    MARKET,    LIMIT;    @Override    public String toString(){      if (this.equals(MARKET)) return studyThis.get("MARKET");;      if (this.equals(LIMIT)) return studyThis.get("LIMIT");      return "";    }  }}