package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** VIDYA2 Standard Deviation indicator 030 */@StudyHeader(  namespace="com.motivewave",  id="ID_VIDYA2",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_VIDYA2_INDICATOR",  label="LBL_VIDYA2",  desc="DESC_VIDYA2",  menu="MENU_TUSHAR_CHANDE",  helpLink="http://www.motivewave.com/studies/vidya2_indicator.htm",  requiresVolume=false,  signals=true,  overlay=true,  studyOverlay=true)public class VIDYA2 extends Study{  final static String ALPHA1="Alpha1", ALPHA2="Alpha2";  enum Values { STD_DEV, VIDYA1, VIDYA2 }  protected enum Signals { BUY, SELL }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.SMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 20, 1, 999, 1));    inputs.addRow(new DoubleDescriptor(ALPHA1, get("ALPHA1"), .2, .01, 10.01, .01));    inputs.addRow(new DoubleDescriptor(ALPHA2, get("ALPHA2"), .04, .01, 10.01, .01));    tab=sd.addTab(get("TAB_DISPLAY"));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_VIDYA1"), defaults.getGreen(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("LBL_VIDYA2"), defaults.getRed(), 1.0f, null, true, true, true));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("LBL_VIDYA1"), defaults.getGreen(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("LBL_VIDYA2"), defaults.getRed(), null, false, true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("LBL_PERIOD"), 5, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(ALPHA1, ALPHA2, Inputs.PATH, Inputs.PATH2);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, ALPHA1, ALPHA2);    desc.exportValue(new ValueDescriptor(Values.VIDYA1, get("LBL_VIDYA1"), new String[] { Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, ALPHA1 }));    desc.exportValue(new ValueDescriptor(Values.VIDYA2, get("LBL_VIDYA2"), new String[] { Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, ALPHA2 }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declarePath(Values.VIDYA1, Inputs.PATH);    desc.declarePath(Values.VIDYA2, Inputs.PATH2);    desc.declareIndicator(Values.VIDYA1, Inputs.IND);    desc.declareIndicator(Values.VIDYA2, Inputs.IND2);    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.setRangeKeys(Values.VIDYA1, Values.VIDYA2);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1 * 2);  }  @Override  protected void calculate(int index, DataContext ctx)  {    var s = getSettings();    int period=s.getInteger(Inputs.PERIOD);    if (index < period) return;    var input=s.getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var method=s.getMAMethod(Inputs.METHOD);    double alpha1=s.getDouble(ALPHA1);    double alpha2=s.getDouble(ALPHA2);    var series=ctx.getDataSeries();    Double stdDev=series.std(index, period, input);    if (stdDev == null) return;    series.setDouble(index, Values.STD_DEV, stdDev);    if (index < period * 2) return;    double price=series.getDouble(index, input, 0);    Double avStdDev=series.ma(method, index, period, Values.STD_DEV);    if (avStdDev == null) return;    double prevVidya1=series.getDouble(index - 1, Values.VIDYA1, price); // first time will yield price    double prevVidya2=series.getDouble(index - 1, Values.VIDYA2, price); // first time will yield price    double ratio=0.0;    if (avStdDev > 0.0) ratio=stdDev / avStdDev;    double vidya1=(alpha1 * ratio * price) + ((1 - (alpha1 * ratio)) * prevVidya1);    double vidya2=(alpha2 * ratio * price) + ((1 - (alpha2 * ratio)) * prevVidya2);    series.setDouble(index, Values.VIDYA1, vidya1);    series.setDouble(index, Values.VIDYA2, vidya2);    // Check for signal events    boolean buy=crossedAbove(series, index, Values.VIDYA1, Values.VIDYA2);    boolean sell=crossedBelow(series, index, Values.VIDYA1, Values.VIDYA2);    if (sell && !series.getBoolean(index, Signals.SELL, false)) {      series.setBoolean(index, Signals.SELL, true);      var c=new Coordinate(series.getStartTime(index), vidya2);      var marker=s.getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_PRICE_VIDYA", Util.round(price, 2), Util.round(vidya1, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, price);    }    if (buy && !series.getBoolean(index, Signals.BUY, false)) {      series.setBoolean(index, Signals.BUY, true);      var c=new Coordinate(series.getStartTime(index), vidya2);      var marker=s.getMarker(Inputs.UP_MARKER);      String msg = get("BUY_PRICE_VIDYA", Util.round(price, 2), Util.round(vidya1, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, price);    }    series.setComplete(index);  }}