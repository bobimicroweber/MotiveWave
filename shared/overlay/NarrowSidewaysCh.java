package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Narrow Sideways Channel 031 */@StudyHeader(  namespace="com.motivewave",  id="ID_NSWCH",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_NARROW_SIDEWAYS_CHANNEL",  label="LBL_NSC",  desc="DESC_NSC",  helpLink="http://www.motivewave.com/studies/narrow_sideways_channel.htm",  requiresVolume=false,  signals=true,  overlay=true,  studyOverlay=true)public class NarrowSidewaysCh extends Study{  final static String INPUT3="Input3";  enum Values { NSC_TOP, NSC_BOTTOM }  enum Signals { BUY, SELL };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.MIDPOINT));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.SMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 14, 2, 999, 1));    inputs.addRow(new DoubleDescriptor(Inputs.INPUT2, get("STD_DEV_FACTOR"), 3.0, .1, 10.1, .1));    inputs.addRow(new DoubleDescriptor(INPUT3, get("RANGE"), 0, 0, 9999.1, .1));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("TOP"), defaults.getRed(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("BOTTOM"), defaults.getGreen(), 1.0f, null, true, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("TOP"), defaults.getRed(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("BOTTOM"), defaults.getGreen(), null, false, true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 14, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.INPUT2, INPUT3, Inputs.PATH, Inputs.PATH2);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.INPUT2);    desc.exportValue(new ValueDescriptor(Values.NSC_TOP, get("NSCT"), new String[] { Inputs.INPUT, Inputs.METHOD,        Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2 }));    desc.exportValue(new ValueDescriptor(Values.NSC_BOTTOM, get("NSCB"), new String[] { Inputs.INPUT, Inputs.METHOD,        Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2 }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.NSC_TOP, Inputs.PATH);    desc.declarePath(Values.NSC_BOTTOM, Inputs.PATH2);    desc.declareIndicator(Values.NSC_TOP, Inputs.IND);    desc.declareIndicator(Values.NSC_BOTTOM, Inputs.IND2);    desc.setRangeKeys(Values.NSC_TOP, Values.NSC_BOTTOM);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1);  }  @Override  public void onBarUpdate(DataContext ctx)  {    calculateValues(ctx);  }  @Override  protected void calculateValues(DataContext ctx)  {    var series=ctx.getDataSeries();    clearFigures();    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.MIDPOINT);    var method=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.SMA);    double stdDevFactor=getSettings().getDouble(Inputs.INPUT2);    double range=getSettings().getDouble(INPUT3);    int period=getSettings().getInteger(Inputs.PERIOD);    double high=0, low=0, stdDev=0;    double top=0, bottom=0;    Double ma=null;    int count=period;    int lastIndex=series.getEndIndex();    for (int index=period; index <= lastIndex; index++) {      if (index < count) continue;      ma=series.ma(method, index, period, key);      if (ma == null) continue;      stdDev=series.std(index, period, key);      top=ma + (stdDev * stdDevFactor);      bottom=ma - (stdDev * stdDevFactor);      for (int i=index - (period - 1); i <= index; i++) {        series.setDouble(i, Values.NSC_TOP, top);        series.setDouble(i, Values.NSC_BOTTOM, bottom);        // start signals        high=series.getHigh(i);        low=series.getLow(i);        boolean sell=(high - low) >= range && (high > top);        boolean buy=(high - low) >= range && (low < bottom);        series.setBoolean(i, Signals.SELL, sell);        series.setBoolean(i, Signals.BUY, buy);        if (sell) {          var c=new Coordinate(series.getStartTime(i), high);          var marker=getSettings().getMarker(Inputs.DOWN_MARKER);          String msg = get("SELL_NSC_HIGH", Util.round(high, 2));          if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));          ctx.signal(i, Signals.SELL, msg, high);        }        if (buy) {          var c=new Coordinate(series.getStartTime(i), low);          var marker=getSettings().getMarker(Inputs.UP_MARKER);          String msg = get("BUY_NSC_LOW", Util.round(low, 2));          if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));          ctx.signal(i, Signals.BUY, msg, low);        }        // end Signals        series.setComplete(i);      }      count=index + period;      if (count > lastIndex) {        period=lastIndex - index;        count=lastIndex;      }    }  }}