package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;import com.motivewave.platform.study.general.Utility;/** Tilson EI2 026 */@StudyHeader(  namespace="com.motivewave",  id="ID_EI/2",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_TILSON_IE2",  label="LBL_TIE2",  desc="DESC_TIE2",  helpLink="http://www.motivewave.com/studies/tilson_ie2.htm",  overlay=true,  studyOverlay=true)public class TilsonIE2 extends Study{  enum Values { ILRS, A, IE2, PRICE }  protected enum Signals { BUY, SELL }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.SMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 15, 1, 999, 1));    var colors=tab.addGroup(get("PATH"));    colors.addRow(new PathDescriptor(Inputs.PATH, get("LBL_TIE2"), defaults.getLineColor(), 1.0f, null, true, true, true));    colors.addRow(new PathDescriptor(Inputs.PATH2, get("PRICE"), defaults.getGreen(), 1.0f, null, true, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    colors=tab.addGroup(get("INDICATOR"));    colors.addRow(new IndicatorDescriptor(Inputs.IND, get("LBL_TIE2"), defaults.getLineColor(), null, false, true, true));    colors.addRow(new IndicatorDescriptor(Inputs.IND2, get("PRICE"), defaults.getGreen(), null, false, true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 15, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.PATH2);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD);    desc.exportValue(new ValueDescriptor(Values.IE2, get("LBL_TIE2"), new String[] { Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.IE2, Inputs.PATH);    desc.declarePath(Values.PRICE, Inputs.PATH2);    desc.declareIndicator(Values.IE2, Inputs.IND);    desc.declareIndicator(Values.PRICE, Inputs.IND2);    desc.setRangeKeys(Values.IE2, Values.PRICE);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period=getSettings().getInteger(Inputs.PERIOD);    if (index < period) return;    Object input=getSettings().getInput(Inputs.INPUT); // Usually based on close.    var method=getSettings().getMAMethod(Inputs.METHOD);    var series=ctx.getDataSeries();    double price=series.getDouble(index, input, 0); // close unless changed by user    Double avPrice=series.ma(method, index, period, input);    if (avPrice == null) return;    double[] value=Utility.linRegLine(series, index, period, input, 0);    double a=value[0]; // line equation y=a+mx.    double m=value[1] + avPrice;    double ie2=(m + a) / 2;    series.setDouble(index, Values.IE2, ie2);    series.setDouble(index, Values.PRICE, price);    // Check for signal events    boolean buy=crossedAbove(series, index, Values.IE2, Values.PRICE);    boolean sell=crossedBelow(series, index, Values.IE2, Values.PRICE);    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      var c=new Coordinate(series.getStartTime(index), ie2);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_PRICE_TILSON_IE2", Util.round(price, 2), Util.round(ie2, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, price);    }    if (buy) {      var c=new Coordinate(series.getStartTime(index), ie2);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_PRICE_TILSON_IE2", Util.round(price, 2), Util.round(ie2, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, price);    }    series.setComplete(index);  }}