package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Buff Averages 023 */@StudyHeader(  namespace="com.motivewave",  id="ID_BUFF_AV",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_BUFF_AVERAGES",  label="LBL_BA",  desc="DESC_BUFF",  menu="MENU_MOVING_AVERAGE",  helpLink="http://www.motivewave.com/studies/buff_averages.htm",  requiresVolume=true,  signals=true,  overlay=true,  studyOverlay=true)public class BuffAverage extends Study{  enum Values { PRICE_VOL, FAST_BUFF, SLOW_BUFF }  protected enum Signals { BUY, SELL }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("FAST_PERIOD"), 5, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("SLOW_PERIOD"), 20, 1, 999, 1));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("FAST"), defaults.getLineColor(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("SLOW"), defaults.getRed(), 1.0f, null, true, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("FAST"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("SLOW"), defaults.getRed(), null, false, true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("FAST_PERIOD"), 5, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("SLOW_PERIOD"), 20, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.PATH2);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2);    desc.exportValue(new ValueDescriptor(Values.FAST_BUFF, get("FBA"), new String[] { Inputs.INPUT, Inputs.PERIOD }));    desc.exportValue(new ValueDescriptor(Values.SLOW_BUFF, get("SBA"), new String[] { Inputs.INPUT, Inputs.PERIOD2 }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.FAST_BUFF, Inputs.PATH);    desc.declarePath(Values.SLOW_BUFF, Inputs.PATH2);    desc.declareIndicator(Values.FAST_BUFF, Inputs.IND);    desc.declareIndicator(Values.SLOW_BUFF, Inputs.IND2);    desc.setRangeKeys(Values.FAST_BUFF, Values.SLOW_BUFF);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars(Math.max(p1, p2));  }  @Override  protected void calculate(int index, DataContext ctx)  {    Object input=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    int fastPeriod=getSettings().getInteger(Inputs.PERIOD);    int slowPeriod=getSettings().getInteger(Inputs.PERIOD2);    var series=ctx.getDataSeries();    double volume=series.getVolume(index);    double price=series.getDouble(index, input, 0); // close unless changed by user    series.setDouble(index, Values.PRICE_VOL, price * volume);    if (index < Math.max(fastPeriod, slowPeriod)) return;    double num=series.sum(index, fastPeriod, Values.PRICE_VOL);    double den=series.sum(index, fastPeriod, Enums.BarInput.VOLUME);    double fastBuff=0.0;    if (den > 0.0) fastBuff=num / den;    series.setDouble(index, Values.FAST_BUFF, fastBuff);    num=series.sum(index, slowPeriod, Values.PRICE_VOL);    den=series.sum(index, slowPeriod, Enums.BarInput.VOLUME);    double slowBuff=0.0;    if (den > 0.0) slowBuff=num / den;    series.setDouble(index, Values.SLOW_BUFF, slowBuff);    // Check for signal events    boolean buy=crossedAbove(series, index, Values.FAST_BUFF, Values.SLOW_BUFF);    boolean sell=crossedBelow(series, index, Values.FAST_BUFF, Values.SLOW_BUFF);    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);        if (sell) {      var c=new Coordinate(series.getStartTime(index), fastBuff);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_PRICE_FAST_BUFF", Util.round(price, 2), Util.round(fastBuff, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, price);    }    if (buy) {      var c=new Coordinate(series.getStartTime(index), fastBuff);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_PRICE_FAST_BUFF", Util.round(price, 2), Util.round(fastBuff, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, price);    }    series.setComplete(index);  }}