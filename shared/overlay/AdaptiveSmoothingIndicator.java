package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Tilson T3 Adaptive Smoothing Indicator 018 */@StudyHeader(  namespace="com.motivewave",  id="ID_ASI_T3",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_ADAPTIVE_SMOOTHING_INDICATOR_T3",  label="LBL_ASIT3",  desc="DESC_ASIT3",  menu="MENU_OVERLAYS",  helpLink="http://www.motivewave.com/studies/adaptive_smoothing_indicator.htm",  requiresVolume=true,  signals=false,  overlay=true,  studyOverlay=true)public class AdaptiveSmoothingIndicator extends Study{  final static String VOLUME_FACTOR="volFac";  enum Values { GD1, GD2, T3, EMA1, EMA2, EMA3, EMA4, EMA5, EMA6 }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.EMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 34, 1, 999, 1));    inputs.addRow(new DoubleDescriptor(VOLUME_FACTOR, get("VOLUME_FACTOR"), 0.50, 0.01, 1.0, 0.01));    var settings=tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("PATH"), defaults.getLineColor(), 1.0f, null, true, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 34, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(VOLUME_FACTOR, Inputs.PATH);    var desc=createRD();    desc.exportValue(new ValueDescriptor(Values.T3, get("LBL_ASIT3"), new String[] { Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, VOLUME_FACTOR }));    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, VOLUME_FACTOR);    desc.declarePath(Values.T3, Inputs.PATH);    desc.declareIndicator(Values.T3, Inputs.IND);    desc.setRangeKeys(Values.T3);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1 * 6);  }  @Override  protected void calculate(int index, DataContext ctx)  {    Object input=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var method=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.EMA);    int period=getSettings().getInteger(Inputs.PERIOD);    if (index < period) return;    double volFac=getSettings().getDouble(VOLUME_FACTOR);    var series=ctx.getDataSeries();    Double ema1=series.ma(method, index, period, input);    series.setDouble(index, Values.EMA1, ema1);    if (index < period * 2) return;    Double ema2=series.ma(method, index, period, Values.EMA1);    series.setDouble(index, Values.EMA2, ema2);    if (ema1 == null || ema2 == null) return;    double gd1=(ema1 * (1 + volFac)) - (ema2 * volFac);    series.setDouble(index, Values.GD1, gd1);    if (index < period * 3) return;    Double ema3=series.ma(method, index, period, Values.GD1);    series.setDouble(index, Values.EMA3, ema3);    if (index < period * 4) return;    Double ema4=series.ma(method, index, period, Values.EMA3);    series.setDouble(index, Values.EMA4, ema4);    if (ema3 == null || ema4 == null) return;    double gd2=(ema3 * (1 + volFac)) - (ema4 * volFac);    series.setDouble(index, Values.GD2, gd2);    if (index < period * 5) return;    Double ema5=series.ma(method, index, period, Values.GD2);    series.setDouble(index, Values.EMA5, ema5);    if (index < period * 6) return;    Double ema6=series.ma(method, index, period, Values.EMA5);    series.setDouble(index, Values.EMA6, ema6);    if (ema5 == null || ema6 == null) return;    double t3=(ema5 * (1 + volFac)) - (ema6 * volFac);    series.setDouble(index, Values.T3, t3);    series.setComplete(index);  }}