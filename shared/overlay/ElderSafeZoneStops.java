package com.motivewave.platform.study.overlay;import java.awt.Font;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.FontInfo;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.BooleanDescriptor;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.FontDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Label;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Elders SafeZone Stops 162 */@StudyHeader(  namespace="com.motivewave",  id="ID_ESSS",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_ESSS",  name="NAME_ELDERS_SAFEZONE_STOPS",  desc="DESC_ESSS",  menu="MENU_ALEXANDER_ELDER",  helpLink="http://www.motivewave.com/studies/elders_safezone_stops.htm",  signals=true,  overlay=true,  studyOverlay=true)public class ElderSafeZoneStops extends Study{  final static String[] POSITION= { "Long", "Short" };  final static String FAC="Fac", ENTRY="Entry", PATH1="Path1", PATH2="Path2";  enum Values { SAFEZ, MA }  protected enum Signals { SELL, BUY }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT2, get("POSITION"), POSITION, POSITION[0]));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.EMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD1"), 63, 1, 9999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("PERIOD2"), 22, 1, 9999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD3, get("PERIOD3"), 3, 1, 9999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD4, get("LOOK_BACK"), 5, 1, 99, 1));    inputs.addRow(new DoubleDescriptor(FAC, get("FACTOR"), 2.5, 2, 4.1, .1));    inputs.addRow(new FontDescriptor(Inputs.FONT, get("FONT"), defaults.getFont()));    inputs.addRow(new BooleanDescriptor(ENTRY, get("SHOW_ENTRIES"), false));    tab=sd.addTab(get("TAB_DISPLAY"));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(PATH1, get("SZ_LONG"), defaults.getBlue(), 1.0f, null, true, false, true));    settings.addRow(new PathDescriptor(PATH2, get("SZ_SHORT"), defaults.getPurple(), 1.0f, null, true, false, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("MA"), defaults.getRed(), 1.0f, null, true, false, true));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND1"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("IND2"), defaults.getRed(), null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT2, Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD1"), 63, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("PERIOD2"), 22, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD3, get("PERIOD3"), 3, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD4, get("LOOK_BACK"), 5, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(FAC, ENTRY, PATH1, PATH2, Inputs.PATH2);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT2, Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3, Inputs.PERIOD4, FAC, ENTRY);    desc.exportValue(new ValueDescriptor(Values.MA, get("MA"), new String[] { Inputs.INPUT2, Inputs.INPUT,        Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3, Inputs.PERIOD4, FAC, ENTRY }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.SAFEZ, Inputs.PATH);    desc.declarePath(Values.MA, Inputs.PATH2);    desc.declareIndicator(Values.SAFEZ, Inputs.IND);    desc.declareIndicator(Values.MA, Inputs.IND2);    desc.setRangeKeys(Values.SAFEZ, Values.MA);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    int p3=getSettings().getInteger(Inputs.PERIOD3);    int p4=getSettings().getInteger(Inputs.PERIOD4);    setMinBars(p1 + p2 + Math.max(p3, p4));  }  @Override  protected void calculate(int index, DataContext ctx)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    if (index < p1) return;    String pos=(String) getSettings().getInput(Inputs.INPUT2, POSITION[0]);    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    int p2=getSettings().getInteger(Inputs.PERIOD2);    int p3=getSettings().getInteger(Inputs.PERIOD3);    int lb=getSettings().getInteger(Inputs.PERIOD4);    var method=getSettings().getMAMethod(Inputs.METHOD);    double fac=getSettings().getDouble(FAC);    FontInfo fi=getSettings().getFont(Inputs.FONT);    Font f=fi.getFont();    boolean showE=getSettings().getBoolean(ENTRY);    var pth1=getSettings().getPath(PATH1);    var pth2=getSettings().getPath(PATH2);    var series=ctx.getDataSeries();    Double ma=series.ma(method, index, p1, key);    series.setDouble(index, Values.MA, ma);    if (index < p1 + p2) return;    double price=series.getDouble(index, key, 0);    double prevP=series.getDouble(index - 1, key, 0);    boolean upTrend=price > ma;    boolean dnTrend=price < ma;    boolean longP=pos == "Long";    boolean shortP=pos == "Short";    if (longP) getSettings().setPath(Inputs.PATH, pth1);    if (shortP) getSettings().setPath(Inputs.PATH, pth2);    double high=0, prevH=0, low=0, prevL=0, dmPlus=0, dmMinus=0, dmAv=0;    double safeZ=0.0;    int countP=0, countM=0;    for (int i=index - (p2 + 1); i <= index; i++) {      high=series.getHigh(i);      prevH=series.getHigh(i - 1);      low=series.getLow(i);      prevL=series.getLow(i - 1);      if (prevL > low) {        countM++;        dmMinus=dmMinus + (prevL - low);      }      if (high > prevH) {        countP++;        dmPlus=dmPlus + (high - prevH);      }    }    if (upTrend && countM != 0) {      dmAv=dmMinus / countM;      safeZ=prevL - fac * dmAv;      series.setDouble(index, Values.SAFEZ, safeZ); // save default value      safeZ=series.highest(index, p3, Values.SAFEZ);      if (safeZ != 0) series.setDouble(index, Values.SAFEZ, safeZ); // overwrite with correct value    }    if (dnTrend && countP != 0) {      dmAv=dmPlus / countP;      safeZ=prevH + fac * dmAv;      series.setDouble(index, Values.SAFEZ, safeZ); // save default value      safeZ=series.lowest(index, p3, Values.SAFEZ);      if (safeZ != 0) series.setDouble(index, Values.SAFEZ, safeZ); // overwrite with correct value    }    // Check for signal events    var defaults=ctx.getDefaults();    high=series.getHigh(index);    low=series.getLow(index);    double pLow, cLow, cMa, pMa;    boolean lowFive=false;    for (int i=-(lb - 1); i <= 0; i++) {      cLow=series.getLow(index + i);      pLow=series.getLow(index + i - 1);      cMa=series.getDouble(index + i, Values.MA, 0);      pMa=series.getDouble(index + i - 1, Values.MA, 0);      lowFive=(cLow < pLow && cLow < cMa && pLow < pMa);      if (!lowFive) break;    }    double pHigh, cHigh;    boolean highFive=false;    for (int i=-(lb - 1); i <= 0; i++) {      cHigh=series.getHigh(index + i);      pHigh=series.getHigh(index + i - 1);      cMa=series.getDouble(index + i, Values.MA, 0);      pMa=series.getDouble(index + i - 1, Values.MA, 0);      highFive=(cHigh > pHigh && cHigh > cMa && pHigh > pMa);      if (!highFive) break;    }    boolean sell=false, buy=false;    String sellGet1="", sellGet2="", buyGet1="", buyGet2="";    if (safeZ != 0) {      if (longP && upTrend) {        sell=prevP > safeZ && price < safeZ; // sell to exit        buy=highFive && showE; // buy        buyGet1="BUY";        buyGet2="BUY_PRICE_SAFEZONE";        sellGet1="EXIT_SELL";        sellGet2="EXIT_SELL_PRICE_SAFEZONE";      }      if (shortP && dnTrend) {        sell=lowFive && showE; // sell short        buy=prevP < safeZ && price > safeZ; // buy to cover        sellGet1="SELL_SHORT";        sellGet2="SELL_SHORT_PRICE_SAFEZONE";        buyGet1="EXIT_BUY";        buyGet2="EXIT_BUY_PRICE_SAFEZONE";      }    }    series.setBoolean(index, Signals.BUY, buy);    series.setBoolean(index, Signals.SELL, sell);    if (sell) {      var c=new Coordinate(series.getStartTime(index + 1), price);      var lbl=new Label(get(sellGet1), f, defaults.getTextColor(), defaults.getRed());      lbl.setLocation(c);      addFigure(lbl);      ctx.signal(index, Signals.SELL, get(sellGet2, Util.round(price, 2), Util.round(safeZ, 3)), price);    }    if (buy) {      var c=new Coordinate(series.getStartTime(index + 1), price);      var lbl=new Label(get(buyGet1), f, defaults.getTextColor(), defaults.getGreen());      lbl.setLocation(c);      addFigure(lbl);      ctx.signal(index, Signals.BUY, get(buyGet2, Util.round(price, 2), Util.round(safeZ, 3)), price);    }    series.setComplete(index);  }}