package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.StudyHeader;import com.motivewave.platform.study.general.Utility;/** New Market Paradigm Expansion 078 */@StudyHeader(  namespace="com.motivewave",  id="ID_NMPE",  rb="com.motivewave.platform.study.nls.strings2",  desc="DESC_NMPE",  label="LBL_NMPE",  name="NAME_NEW_MARKET_PARADIGM_EXPANSION",  helpLink="http://www.motivewave.com/studies/new_market_paradigm_expansion.htm",  overlay=true,  signals=true,  studyOverlay=true)public class NewMarketParadigmExpansion extends NewMarketParadigmContraction{  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1 + 1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period=getSettings().getInteger(Inputs.PERIOD);    if (index < period + 1) return;    double sdUp=getSettings().getDouble(STD_DEV_UP);    double sdDn=getSettings().getDouble(STD_DEV_DOWN);    Object input=getSettings().getInput(Inputs.INPUT);    var series=ctx.getDataSeries();    int nmP=0;    double price=series.getDouble(index, input, 0);    double[] bb=Utility.bollingerBands(series, index, period, sdUp, sdDn, input);    double[] prevBb=Utility.bollingerBands(series, index - 1, period, sdUp, sdDn, input);    double top=bb[0];    double bott=bb[1];    boolean cond1=top < prevBb[0] && bott > prevBb[1];    boolean cond2=top > prevBb[0] && bott < prevBb[1];    boolean cond3=cond1 == false && cond2 == false;    if (cond1) nmP=1;    if (cond2) nmP=2;    if (cond3) nmP=3;    if (nmP == 2) {      series.setDouble(index, Values.UP, top);      series.setDouble(index, Values.DOWN, bott);    }    series.setDouble(index, Values.BB_TOP, top);    series.setDouble(index, Values.BB_BOTT, bott);    series.setDouble(index, Values.SMA, bb[2]);    // Check for signal events    boolean sell=price > bb[0];    boolean buy=price < bb[1];    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      var c=new Coordinate(series.getStartTime(index), price);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_NMPE_PRICE_TOP", Util.round(price, 2), Util.round(top, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, price);    }    if (buy) {      var c=new Coordinate(series.getStartTime(index), price);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_NMPE_PRICE_BOTTOM", Util.round(price, 2), Util.round(bott, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, price);    }    series.setComplete(index);  }}