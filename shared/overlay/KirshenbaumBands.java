package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;import com.motivewave.platform.study.general.Utility;/** Kirshenbaum Bands 106 */@StudyHeader(  namespace="com.motivewave",  id="ID_KHBB",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_KHBB",  name="NAME_KIRSHENBAUM_BANDS",  desc="DESC_KHBB",  menu="MENU_BANDS",  helpLink="http://www.motivewave.com/studies/kirshenbaum_bands.htm",  signals=false,  overlay=true,  studyOverlay=true)public class KirshenbaumBands extends Study{  final static String STD_ERR="StdErr", IND3="Ind3";    enum Values { MA, TB, BB }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.EMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("MA_PERIOD"), 30, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("SE_PERIOD"), 20, 1, 999, 1));    inputs.addRow(new DoubleDescriptor(STD_ERR, get("STD_ERROR_FAC"), 1, 0, 10.01, .01));    tab=sd.addTab(get("TAB_DISPLAY"));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("TOP"), defaults.getRed(), 1.0f, null, true, false, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("MA"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new PathDescriptor(Inputs.PATH3, get("BOTTOM"), defaults.getGreen(), 1.0f, null, true, false, true));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("TOP"), defaults.getRed(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("MA"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(IND3, get("BOTTOM"), defaults.getGreen(), null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("MA_PERIOD"), 30, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("SE_PERIOD"), 20, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(STD_ERR, Inputs.PATH, Inputs.PATH2, Inputs.PATH3);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2, STD_ERR);    desc.exportValue(new ValueDescriptor(Values.TB, get("LBL_KHBB"), new String[] { Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2, STD_ERR }));    desc.declarePath(Values.TB, Inputs.PATH);    desc.declarePath(Values.MA, Inputs.PATH2);    desc.declarePath(Values.BB, Inputs.PATH3);    desc.declareIndicator(Values.TB, Inputs.IND);    desc.declareIndicator(Values.MA, Inputs.IND2);    desc.declareIndicator(Values.BB, IND3);    desc.setRangeKeys(Values.TB, Values.MA, Values.BB);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars(p1 + p2);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period1=getSettings().getInteger(Inputs.PERIOD);    int period2=getSettings().getInteger(Inputs.PERIOD2);    if (index < period1) return;    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var method=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.EMA);    double noSdErr=getSettings().getDouble(STD_ERR);    var series=ctx.getDataSeries();    Double ma=series.ma(method, index, period1, key);    if (ma == null) return;    series.setDouble(index, Values.MA, ma);    if (index < period1 + period2) return;    double sdErr=Utility.stdErr(series, index, period2, key);    double tb=ma + (sdErr * noSdErr);    series.setDouble(index, Values.TB, tb);    double bb=ma - (sdErr * noSdErr);    series.setDouble(index, Values.BB, bb);    series.setComplete(index);  }}