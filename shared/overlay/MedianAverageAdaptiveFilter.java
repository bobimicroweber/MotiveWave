package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;import com.motivewave.platform.study.general.Utility;/** Median Average Adaptive Filter John F. Ehlers 144 */@StudyHeader(  namespace="com.motivewave",  id="ID_MDAAF",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_MDAAF",  name="NAME_MEDIAN_AVERAGE_ADAPTIVE_FILTER",  desc="DESC_MDAAF",  menu="MENU_JOHN_EHLERS",  helpLink="http://www.motivewave.com/studies/median_average_adaptive_filter.htm",  signals=false,  overlay=true,  studyOverlay=true)public class MedianAverageAdaptiveFilter extends Study{  final static String TH="Th";  enum Values { SMTH, VALUE2, FILT }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.MIDPOINT));    inputs.addRow(new DoubleDescriptor(TH, get("THRESHOLD"), .002, 0, 1.001, .001));    var settings=tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_MDAAF"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, TH, Inputs.PATH);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, TH);    desc.exportValue(new ValueDescriptor(Values.FILT, get("LBL_MDAAF"), new String[] { Inputs.INPUT, TH }));    desc.declarePath(Values.FILT, Inputs.PATH);    desc.declareIndicator(Values.FILT, Inputs.IND);    desc.setRangeKeys(Values.FILT);    setMinBars(25);  }  @Override  protected void calculate(int index, DataContext ctx)  {    if (index < 3) return;    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.MIDPOINT);    double th=getSettings().getDouble(TH);    var series=ctx.getDataSeries();    int len=39;    double alpha=0, value1=0, value2=0, value3=0, prevV2;    double price=series.getDouble(index, key, 0);    double prevP1=series.getDouble(index - 1, key, 0);    double prevP2=series.getDouble(index - 2, key, 0);    double prevP3=series.getDouble(index - 3, key, 0);    double smth=(price + 2 * prevP1 + 2 * prevP2 + prevP3) / 6.0;    series.setDouble(index, Values.SMTH, smth);    if (index < len + 3) return;    value3=.2;    prevV2=series.getDouble(index - 1, Values.VALUE2, 0);    while (value3 > th && len > 0) {      alpha=2.0 / (len + 1);      value1=Utility.median(series, index, len, Values.SMTH);      value2=alpha * smth + (1 - alpha) * prevV2;      series.setDouble(index, Values.VALUE2, value2);      if (value1 != 0) value3=Math.abs(value1 - value2) / value1;      len=len - 2;    }    series.setDouble(index, Values.VALUE2, value2);    if (len < 3) len=3;    alpha=2.0 / (len + 1);    double prevF=series.getDouble(index - 1, Values.FILT, 0);    double filt=alpha * smth + (1 - alpha) * prevF;    series.setDouble(index, Values.FILT, filt);    series.setComplete(index);  }}