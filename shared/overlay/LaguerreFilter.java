package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Laguerre Filter John F. Ehlers 141 */@StudyHeader(  namespace="com.motivewave",  id="ID_LAGF",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_LAGF",  name="NAME_LAGUERRE_FILTER",  desc="DESC_LAGF",  menu="MENU_JOHN_EHLERS",  helpLink="http://www.motivewave.com/studies/laguerre_filter.htm",  signals=false,  overlay=true,  studyOverlay=true)public class LaguerreFilter extends Study{  final static String ALPHA="Alpha";    enum Values { L0, L1, L2, L3, FIR, FILT }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.MIDPOINT));    inputs.addRow(new DoubleDescriptor(ALPHA, get("ALPHA"), .2, 0, .99, .01));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_LAGF"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("FIR"), defaults.getRed(), 1.0f, null, true, false, true));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("LBL_LAGF"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("FIR"), defaults.getRed(), null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, ALPHA, Inputs.PATH, Inputs.PATH2);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, ALPHA);    desc.exportValue(new ValueDescriptor(Values.FILT, get("LBL_LAGF"), new String[] { Inputs.INPUT, ALPHA }));    desc.declarePath(Values.FILT, Inputs.PATH);    desc.declarePath(Values.FIR, Inputs.PATH2);    desc.declareIndicator(Values.FILT, Inputs.IND);    desc.declareIndicator(Values.FIR, Inputs.IND2);    desc.setRangeKeys(Values.FILT, Values.FIR);    setMinBars(20);  }  @Override  protected void calculate(int index, DataContext ctx)  {    if (index <= 3) return;    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.MIDPOINT);    double alpha=getSettings().getDouble(ALPHA);    var series=ctx.getDataSeries();    double price=series.getDouble(index, key, 0);    double priorP1=series.getDouble(index - 1, key, 0);    double priorP2=series.getDouble(index - 2, key, 0);    double priorP3=series.getDouble(index - 3, key, 0);    double prevL0=series.getDouble(index - 1, Values.L0, price);    double prevL1=series.getDouble(index - 1, Values.L1, price);    double prevL2=series.getDouble(index - 1, Values.L2, price);    double prevL3=series.getDouble(index - 1, Values.L3, price);    double l0=alpha * price + (1 - alpha) * prevL0;    double l1=-(1 - alpha) * l0 + prevL0 + (1 - alpha) * prevL1;    double l2=-(1 - alpha) * l1 + prevL1 + (1 - alpha) * prevL2;    double l3=-(1 - alpha) * l2 + prevL2 + (1 - alpha) * prevL3;    double filt=(l0 + 2 * l1 + 2 * l2 + l3) / 6.0;    double fir=(price + 2 * priorP1 + 2 * priorP2 + priorP3) / 6.0;    series.setDouble(index, Values.FILT, filt);    series.setDouble(index, Values.FIR, fir);    series.setDouble(index, Values.L0, l0);    series.setDouble(index, Values.L1, l1);    series.setDouble(index, Values.L2, l2);    series.setDouble(index, Values.L3, l3);    series.setComplete(index);  }}