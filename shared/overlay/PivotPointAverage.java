package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Pivot Point Average 100 */@StudyHeader(  namespace="com.motivewave",  id="ID_PPAV",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_PIVOT_POINT_AVERAGE",  label="LBL_PPAV",  desc="DESC_PPAV",  helpLink="http://www.motivewave.com/studies/pivot_point_average.htm",  requiresVolume=false,  signals=true,  overlay=true,  studyOverlay=true)public class PivotPointAverage extends Study{  enum Values { PP, PPAV }  enum Signals { SELL, BUY }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.SMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("SMOOTH_PERIOD"), 3, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("PRICE_METHOD"), 1, 1, 3, 1)); // this not an error JL    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("PP"), defaults.getLineColor(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("PPAV"), defaults.getRed(), 1.0f, null, true, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("PP"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("PPAV"), defaults.getRed(), null, false, true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("SMOOTH_PERIOD"), 3, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("PRICE_METHOD"), 1, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.PATH2);    var desc=createRD();    desc.setLabelSettings(Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2);    desc.exportValue(new ValueDescriptor(Values.PPAV, get("LBL_PPAV"), new String[] { Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2 }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.PP, Inputs.PATH);    desc.declarePath(Values.PPAV, Inputs.PATH2);    desc.declareIndicator(Values.PP, Inputs.IND);    desc.declareIndicator(Values.PPAV, Inputs.IND2);    desc.setRangeKeys(Values.PP, Values.PPAV);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1 + 1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    if (index < 1) return;    var method=getSettings().getMAMethod(Inputs.METHOD);    int period=getSettings().getInteger(Inputs.PERIOD);    int priceM=getSettings().getInteger(Inputs.PERIOD2);    var series=ctx.getDataSeries();    double open=series.getDouble(index, Enums.BarInput.OPEN, 0);    double prevH=series.getDouble(index - 1, Enums.BarInput.HIGH, 0);    double prevL=series.getDouble(index - 1, Enums.BarInput.LOW, 0);    double prevC=series.getDouble(index - 1, Enums.BarInput.CLOSE, 0);    double pp=(prevH + prevL + prevC) / 3.0;    if (priceM == 1) {      pp=(prevH + prevL + prevC) / 3.0;    }    if (priceM == 2) {      pp=(prevH + prevL + prevC + open) / 4.0;    }    if (priceM == 3) {      pp=(prevH + prevL + open) / 3.0;    }    series.setDouble(index, Values.PP, pp);    if (index < period + 1) return;    Double ppav=series.ma(method, index, period, Values.PP);    series.setDouble(index, Values.PPAV, ppav);    boolean sell=crossedBelow(series, index, Values.PP, Values.PPAV);    boolean buy=crossedAbove(series, index, Values.PP, Values.PPAV);    // Check for signal events    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      var c=new Coordinate(series.getStartTime(index), ppav);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_PP", Util.round(pp, 2));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, pp);    }    if (buy) {      var c=new Coordinate(series.getStartTime(index), ppav);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_PP", Util.round(pp, 2));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, pp);    }    series.setComplete(index);  }}