package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Kase Indicator 040 */@StudyHeader(  namespace="com.motivewave",  id="ID_KI",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_KASE_INDICATOR",  label="LBL_KI",  desc="DESC_KI",  // menu="MENU_BANDS",  helpLink="http://www.motivewave.com/studies/kase_indicator.htm",  requiresVolume=true,  signals=false,  overlay=true,  studyOverlay=true)public class KaseIndicator extends Study{  final static String IND3="Ind3";    enum Values { PH_L, H_PL, KUP, KDOWN, PLOT1, PLOT2, PLOT3 }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 10, 1, 999, 1));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("PATH1"), defaults.getGreen(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("PATH2"), defaults.getRed(), 1.0f, null, true, true, true));    settings.addRow(new PathDescriptor(Inputs.PATH3, get("PATH3"), defaults.getLineColor(), 1.0f, null, true, true, true));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND1"), defaults.getGreen(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("IND2"), defaults.getRed(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(IND3, get("IND3"), defaults.getLineColor(), null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 10, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.PATH2, Inputs.PATH3);    var desc=createRD();    desc.setLabelSettings(Inputs.PERIOD);    desc.exportValue(new ValueDescriptor(Values.PLOT1, get("PLOT1"), new String[] { Inputs.PERIOD }));    desc.exportValue(new ValueDescriptor(Values.PLOT2, get("PLOT2"), new String[] { Inputs.PERIOD }));    desc.exportValue(new ValueDescriptor(Values.PLOT3, get("PLOT3"), new String[] { Inputs.PERIOD }));    desc.declarePath(Values.PLOT1, Inputs.PATH);    desc.declarePath(Values.PLOT2, Inputs.PATH2);    desc.declarePath(Values.PLOT3, Inputs.PATH3);    desc.declareIndicator(Values.PLOT1, Inputs.IND);    desc.declareIndicator(Values.PLOT2, Inputs.IND2);    desc.declareIndicator(Values.PLOT3, IND3);    desc.setRangeKeys(Values.PLOT1, Values.PLOT2, Values.PLOT3);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period=getSettings().getInteger(Inputs.PERIOD);    if (index < period) return;    var series=ctx.getDataSeries();    double high=series.getHigh(index);    double low=series.getLow(index);    double priorHigh=series.getHigh(index - period);    double priorLow=series.getLow(index - period);    double avVol=series.sma(index, period, Enums.BarInput.VOLUME);    double avTR=series.atr(index, period);    double kUp=series.getDouble(index - 1, Values.KUP, 0.0); // prevKup    if (avTR > 0.0) kUp=(priorHigh / low) / (avVol * Math.sqrt(period));    double kDown=series.getDouble(index - 1, Values.KDOWN, 0.0); // prevKdown    if (avTR > 0.0) kDown=(high / priorLow) / (avVol * Math.sqrt(period));    Double plot1=null;    if (kUp > kDown) plot1=low;    Double plot2=null;    if (kUp < kDown) plot2=high;    Double plot3=null;    if (kUp == kDown) plot3=(high + low) / 2;    series.setDouble(index, Values.KUP, kUp);    series.setDouble(index, Values.KDOWN, kDown);    series.setDouble(index, Values.PLOT1, plot1);    series.setDouble(index, Values.PLOT2, plot2);    series.setDouble(index, Values.PLOT3, plot3);    series.setComplete(index);  }}