package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Fractal Adaptive Moving Average John F. Ehlers 140 */@StudyHeader(  namespace="com.motivewave",  id="ID_FRAMA",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_FRAMA",  name="NAME_FRACTAL_ADAPTIVE_MOVING_AVERAGE",  desc="DESC_FRAMA",  menu="MENU_JOHN_EHLERS",  helpLink="http://www.motivewave.com/studies/fractal_adaptive_moving_average.htm",  signals=false,  overlay=true,  studyOverlay=true)public class FractalAdaptiveMovingAverage extends Study{  enum Values { FILT }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.MIDPOINT));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 16, 1, 9999, 1));    var settings=tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_FRAMA"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("MA_PERIOD"), 15, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD);    desc.exportValue(new ValueDescriptor(Values.FILT, get("LBL_FRAMA"), new String[] { Inputs.INPUT, Inputs.PERIOD }));    desc.declarePath(Values.FILT, Inputs.PATH);    desc.declareIndicator(Values.FILT, Inputs.IND);    desc.setRangeKeys(Values.FILT);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    if (index < p1) return;    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.MIDPOINT);    var series=ctx.getDataSeries();    double dm=0;    double price=series.getDouble(index, key, 0);    double prevF=series.getDouble(index - 1, Values.FILT, price);    double hh=series.highest(index, p1, Enums.BarInput.HIGH);    double ll=series.lowest(index, p1, Enums.BarInput.LOW);    double n3=(hh - ll) / p1;    int halfP=p1 / 2;    hh=series.highest(index, halfP, Enums.BarInput.HIGH);    ll=series.lowest(index, halfP, Enums.BarInput.LOW);    double n1=(hh - ll) / halfP;    hh=series.highest(index - halfP, halfP, Enums.BarInput.HIGH);    ll=series.lowest(index - halfP, halfP, Enums.BarInput.LOW);    double n2=(hh - ll) / halfP;    if (n1 > 0 && n2 > 0 && n3 > 0) dm=(Math.log(n1 + n2) - Math.log(n3)) / Math.log(2);    double alpha=Math.exp(-4.6 * (dm - 1));    if (alpha < .01) alpha=.01;    if (alpha > 1) alpha=1;    double filt=alpha * price + (1 - alpha) * prevF;    series.setDouble(index, Values.FILT, filt);    series.setComplete(index);  }}