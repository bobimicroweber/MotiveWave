package com.motivewave.platform.study.overlay;import java.awt.Color;import java.awt.Font;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.FontInfo;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.X11Colors;import com.motivewave.platform.sdk.common.desc.BooleanDescriptor;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.FontDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Label;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Average True Range Trailing Stops 168 */@StudyHeader(  namespace="com.motivewave",  id="ID_ATRTS",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_ATRTS",  name="NAME_ATR_TRAILING_STOPS",  desc="DESC_ATRTS",  helpLink="http://www.motivewave.com/studies/atr_trailing_stops.htm",  signals=true,  overlay=true,  studyOverlay=true)public class AtrTrailingStop extends Study{  final static String[] POSITION= { "Long", "Short" };  final static String FAC="Fac", ENTRY="Entry", PATH1="Path1", PATH2="Path2", SHOW_LABELS="showLabels";  enum Values { ATR, ATRTS, MA }  protected enum Signals { SELL, BUY }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT2, get("POSITION"), POSITION, POSITION[0]));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.EMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("MA_PERIOD"), 63, 1, 9999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("ATR_PERIOD"), 21, 1, 9999, 1));    inputs.addRow(new DoubleDescriptor(FAC, get("FACTOR"), 3, 2, 4.1, .1));    inputs.addRow(new FontDescriptor(Inputs.FONT, get("FONT"), defaults.getFont()));    inputs.addRow(new BooleanDescriptor(ENTRY, get("SHOW_ENTRIES"), false));    inputs.addRow(new BooleanDescriptor(SHOW_LABELS, get("LBL_SHOW_LABELS"), true));    tab=sd.addTab(get("TAB_DISPLAY"));    var settings=tab.addGroup(get("PATHS"));    var path=new PathDescriptor(PATH1, get("LONG"), defaults.getBlue(), Enums.PointType.DOT, Enums.Size.SMALL, true, true, false);    path.setSupportsMaxPoints(true);    path.setSupportsColorPolicy(false);    settings.addRow(path);    path=new PathDescriptor(PATH2, get("SHORT"), defaults.getPurple(), Enums.PointType.DOT, Enums.Size.SMALL, true, true, false);    path.setSupportsMaxPoints(true);    path.setSupportsColorPolicy(false);    settings.addRow(path);    settings.addRow(new PathDescriptor(Inputs.PATH2, get("MA"), defaults.getRed(), 1.0f, null, true, false, true));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("LBL_ATRTS"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("MA"), defaults.getRed(), null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.INPUT2, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("MA_PERIOD"), 63, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("ATR_PERIOD"), 21, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(FAC, PATH1, PATH2, Inputs.PATH2, ENTRY, SHOW_LABELS);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT2, Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2, FAC);    desc.exportValue(new ValueDescriptor(Values.MA, get("LBL_CHEXITS"), new String[] { Inputs.INPUT2, Inputs.INPUT,        Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2, FAC }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.ATRTS, Inputs.PATH);    desc.declarePath(Values.MA, Inputs.PATH2);    desc.declareIndicator(Values.ATRTS, Inputs.IND);    desc.declareIndicator(Values.MA, Inputs.IND2);    desc.setRangeKeys(Values.ATRTS, Values.MA);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars(Math.max(p1, p2));  }  @Override  protected void calculate(int index, DataContext ctx)  {    var s = getSettings();    int maP=s.getInteger(Inputs.PERIOD);    int atrP=s.getInteger(Inputs.PERIOD2);    if (index < Math.max(maP, atrP)) return;    String pos=(String) s.getInput(Inputs.INPUT2, POSITION[0]);    Object key=s.getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var method=s.getMAMethod(Inputs.METHOD);    double fac=s.getDouble(FAC);    FontInfo fi=s.getFont(Inputs.FONT);    Font f=fi.getFont();    boolean showE=s.getBoolean(ENTRY);    var pth1=s.getPath(PATH1);    var pth2=s.getPath(PATH2);    boolean longP=pos == "Long";    boolean shortP=pos == "Short";    if (longP) s.setPath(Inputs.PATH, pth1);    if (shortP) s.setPath(Inputs.PATH, pth2);    var series=ctx.getDataSeries();    double atrts=0, atr=0;    Double ma=series.ma(method, index, maP, key);    series.setDouble(index, Values.MA, ma);    double price=series.getDouble(index, key, 0);    double prevP=series.getDouble(index - 1, key, 0);    double prevA=series.getDouble(index, Values.ATRTS, price); // current atrts is plotted at index+1    boolean upTrend=price > ma;    boolean dnTrend=price <= ma;    atr=series.atr(index, atrP);    if (upTrend) {      atrts=price - fac * atr;      if (atrts < prevA) atrts=prevA;    }    if (dnTrend) {      atrts=price + fac * atr;      if (atrts > prevA) atrts=prevA;    }    if (atrts != 0) series.setDouble(index + 1, Values.ATRTS, atrts);    series.setComplete(index);    // Check for signal events    var defaults=ctx.getDefaults();    double high=series.getHigh(index);    double low=series.getLow(index);    boolean sell=false, buy=false;    String sellGet1="", sellGet2="", buyGet1="", buyGet2="";    if (atrts != 0) {      if (longP && upTrend) {        sell=price < atrts; // sell to exit        buy=prevP < atrts && price > atrts && showE; // buy        buyGet1="ENTER_BUY";        buyGet2="BUY_PRICE_ATRTS";        sellGet1="EXIT_SELL";        sellGet2="EXIT_SELL_PRICE_SAFEZONE";      }      if (shortP && dnTrend) {        sell=prevP > atrts && price < atrts && showE; // sell short        buy=price > atrts; // exit buy to cover        sellGet1="SELL_SHORT";        sellGet2="SELL_SHORT_PRICE_ATRTS";        buyGet1="EXIT_BUY";        buyGet2="EXIT_BUY_PRICE_ATRTS";      }    }    series.setBoolean(index, Signals.BUY, buy);    series.setBoolean(index, Signals.SELL, sell);    boolean showLabels = s.getBoolean(SHOW_LABELS, true);    if (sell) {      if (showLabels) {        var c = new Coordinate(series.getStartTime(index + 1), high);        var lbl = new Label(get(sellGet1), f, getTextColor(defaults.getRed()), defaults.getRed());        lbl.setLocation(c);        addFigure(lbl);      }      ctx.signal(index, Signals.SELL, get(sellGet2, Util.round(high, 2), Util.round(atrts, 3)), high);    }    if (buy) {      if (showLabels) {        var c = new Coordinate(series.getStartTime(index + 1), low);        var lbl = new Label(get(buyGet1), f, getTextColor(defaults.getGreen()), defaults.getGreen());        lbl.setLocation(c);        addFigure(lbl);      }      ctx.signal(index, Signals.BUY, get(buyGet2, Util.round(low, 2), Util.round(atrts, 3)), low);    }  }    // Hack: on some chart themes the text color is not displaying well and its hard to read.  Workaround by changing the color to   // Black/White depending on how bright the background is.  private Color getTextColor(Color bg)  {    int tmp = bg.getRed() + bg.getBlue() + bg.getGreen();    if (tmp > 220) return X11Colors.BLACK;    return X11Colors.WHITE;  }  }