package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Ehlers Filter John F. Ehlers 138 */@StudyHeader(  namespace="com.motivewave",  id="ID_EHLF",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_EHLF",  name="NAME_EHLERS_FILTER",  desc="DESC_EHLF",  menu="MENU_JOHN_EHLERS",  helpLink="http://www.motivewave.com/studies/ehlers_filter.htm",  signals=false,  overlay=true,  studyOverlay=true)public class EhlersFilter extends Study{  enum Values { FILT }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 20, 1, 9999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("MOMENTUM_LENGTH"), 5, 1, 9999, 1));    var settings=tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_EHLF"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 20, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("MOMENTUM_LENGTH"), 5, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD);    desc.exportValue(new ValueDescriptor(Values.FILT, get("LBL_EHLF"), new String[] { Inputs.INPUT, Inputs.PERIOD }));    desc.declarePath(Values.FILT, Inputs.PATH);    desc.declareIndicator(Values.FILT, Inputs.IND);    desc.setRangeKeys(Values.FILT);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars(Math.max(p1, p2));  }  @Override  protected void calculate(int index, DataContext ctx)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    if (index < Math.max(p1, p2)) return;    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var series=ctx.getDataSeries();    double price=0, priorP=0, num=0, sumC=0;    double[] coef=new double[p1];    int count=0;    for (int i=index - (p1 - 1); i <= index; i++) {      price=series.getDouble(i, key, 0);      priorP=series.getDouble(i - p2, key, 0);      coef[count]=Math.abs(price - priorP);      count++;    }    count=0;    for (int i=index - (p1 - 1); i <= index; i++) {      price=series.getDouble(i, key, 0);      num=num + coef[count] * price;      sumC=sumC + coef[count];      count++;    }    double filt=num / sumC;    series.setDouble(index, Values.FILT, filt);    series.setComplete(index);  }}