package com.motivewave.platform.study.overlay;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.DataSeries;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.PathInfo;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Figure;import com.motivewave.platform.sdk.draw.Line;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Darvas Box 073 */@StudyHeader(  namespace="com.motivewave",  id="ID_DARVAS",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_DARVAS_BOX",  label="LBL_DARVAS",  desc="DESC_DARVAS",  menu="MENU_OVERLAYS",  helpLink="http://www.motivewave.com/studies/darvas_box.htm",  signals=true,  overlay=true,  studyOverlay=true)public class DarvasBox extends Study{  enum Signals { SELL, BUY };  private Figure topLine, bottLine;  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUT"));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 4, 1, 999, 1));    var settings=tab.addGroup(get("BOX"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("BOX"), defaults.getLineColor(), 1.0f, null, true, true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 4, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH);    var desc=createRD();    desc.setLabelSettings(Inputs.PERIOD);    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1 * 4);  }  @Override  public void onBarUpdate(DataContext ctx)  {    calculateValues(ctx);  }  @Override  protected void calculateValues(DataContext ctx)  {    int period=getSettings().getInteger(Inputs.PERIOD);    var series=ctx.getDataSeries();    clearFigures();    int state=0;    double hPrice=0, lPrice=0;    double boxTop=0;    double boxBott=0;    int startX=0, countTop=0, countBott=0;    int endIndex=series.getEndIndex() - 1;    for (int i=0; (i <= endIndex); i++) {      hPrice=series.getHigh(i);      lPrice=series.getLow(i);      countTop++;      if (countTop >= period) {        state=2;      }      if (countTop >= (period * 2)) {        state=3;        countBott++;      }      if (countTop >= (period * 2) && countBott >= period) {        state=4;      }      if (countTop >= (period * 2) && countBott >= (period * 2)) {        state=5;      }      if (hPrice > boxTop) {        if (state == 5) {          plotBox(series, startX, boxTop, i, boxBott);          signal(ctx, i, hPrice, true); // sell signal          state=1;          boxTop=0.0;          countTop=0;          countBott=0;          continue;        }        boxTop=hPrice;        boxBott=lPrice;        startX=i;        state=1;        countTop=0;        countBott=0;        continue;      }      if (lPrice < boxBott) {        if (state == 5) {          plotBox(series, startX, boxTop, i, boxBott);          signal(ctx, i, lPrice, false); // buy signal          state=1;          boxTop=0.0;          countTop=0;          countBott=0;          continue;        }        boxBott=lPrice;        countBott=0;      }      if (state == 2) {        plotTop(series, startX, i, boxTop);      }      if (state == 3) {        plotTop(series, startX, i, boxTop);      }      if (state == 3) {        plotBott(series, startX, i, boxBott);      }      if (state == 4) {        plotBott(series, startX, i, boxBott);      }    }  }  protected void signal(DataContext ctx, int i, double price, boolean sell)  {    var series=ctx.getDataSeries();    if (sell) {      var c=new Coordinate(series.getStartTime(i), price);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_DARVAS_BOX_HIGH", Util.round(price, 2));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(i, Signals.SELL, msg, price);    }    if (!sell) {      var c=new Coordinate(series.getStartTime(i), price);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_DARVAS_BOX_LOW", Util.round(price, 2));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(i, Signals.BUY, msg, price);    }  }  protected void plotBox(DataSeries series, int startX, double boxTop, int endX, double boxBott)  {    if (getSettings().getPath(Inputs.PATH).isEnabled()) {      if (topLine != null) removeFigure(topLine);      if (bottLine != null) removeFigure(bottLine);      PathInfo lineInfo=getSettings().getPath(Inputs.PATH);      var start=new Coordinate(series.getStartTime(startX), boxTop);      var end=new Coordinate(series.getStartTime(endX), boxTop);      Line line=new Line(start, end, lineInfo);      addFigure(line);      start=new Coordinate(series.getStartTime(endX), boxTop);      end=new Coordinate(series.getStartTime(endX), boxBott);      line=new Line(start, end, lineInfo);      addFigure(line);      start=new Coordinate(series.getStartTime(endX), boxBott);      end=new Coordinate(series.getStartTime(startX), boxBott);      line=new Line(start, end, lineInfo);      addFigure(line);      start=new Coordinate(series.getStartTime(startX), boxBott);      end=new Coordinate(series.getStartTime(startX), boxTop);      line=new Line(start, end, lineInfo);      addFigure(line);    }  }  protected void plotTop(DataSeries series, int startX, int endX, double boxTop)  {    if (getSettings().getPath(Inputs.PATH).isEnabled()) {      var lineInfo=getSettings().getPath(Inputs.PATH);      var start=new Coordinate(series.getStartTime(startX), boxTop);      var end=new Coordinate(series.getStartTime(endX), boxTop);      if (topLine != null) removeFigure(topLine);      Line line=new Line(start, end, lineInfo);      topLine=line;      addFigure(line);    }  }  protected void plotBott(DataSeries series, int startX, int endX, double boxBott)  {    if (getSettings().getPath(Inputs.PATH).isEnabled()) {      var lineInfo=getSettings().getPath(Inputs.PATH);      var start=new Coordinate(series.getStartTime(startX), boxBott);      var end=new Coordinate(series.getStartTime(endX), boxBott);      if (bottLine != null) removeFigure(bottLine);      Line line=new Line(start, end, lineInfo);      bottLine=line;      addFigure(line);    }  }}