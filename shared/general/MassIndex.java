package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.GuideInfo;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Mass Index 006 */@StudyHeader(  namespace="com.motivewave",  id="ID_MSSI",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_MSSI",  name="NAME_MASS_INDEX",  desc="DESC_MSSI",  menu="MENU_OSCILLATORS",  helpLink="http://www.motivewave.com/studies/mass_index.htm",  signals=true,  overlay=false,  studyOverlay=true)public class MassIndex extends Study{  final static String TREND_METHOD = "trendMethod";  final static String TREND_INPUT = "trendInput";  final static String TREND_PERIOD = "trendPeriod";  enum Values { TREND, MASS_INDEX, HIGH_LOW, FIRST_EMA, SECOND_EMA, RATIO };  protected enum Signals { BUY, SELL, ALERT};  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.EMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD1"), 21, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("PERIOD2"), 21, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD3, get("PERIOD3"), 25, 1, 999, 1));    inputs.addRow(new InputDescriptor(TREND_INPUT, get("TREND_INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(TREND_METHOD, get("TREND_METHOD"), Enums.MAMethod.EMA));    inputs.addRow(new IntegerDescriptor(TREND_PERIOD, get("TREND_PERIOD"), 9, 1, 999, 1));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("MASS_INDEX"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("MASS_INDEX_TREND"), defaults.getLineColor(), 1.0f, null, true, false, true));    tab=sd.addTab(get("TAB_DISPLAY"));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("MASS_INDEX"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("MASS_INDEX_TREND"), defaults.getLineColor(), null, false, true, true));    var guides=tab.addGroup(get("GUIDES"));    var topDesc=new GuideDescriptor(Inputs.TOP_GUIDE, get("TOP_GUIDE"), 27, 1, 100.01, .01, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    var bottomDesc=new GuideDescriptor(Inputs.BOTTOM_GUIDE, get("BOTTOM_GUIDE"), 26.5, 1, 100.01, .01, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.TOP_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.BOTTOM_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD1"), 21, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("PERIOD2"), 21, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD3, get("PERIOD3"), 25, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(TREND_INPUT, TREND_METHOD);    sd.addQuickSettings(new SliderDescriptor(TREND_PERIOD, get("TREND_PERIOD"), 9, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.PATH2);    var desc=createRD();    desc.setLabelSettings(Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3);    desc.exportValue(new ValueDescriptor(Values.MASS_INDEX, get("LBL_MASSI"), new String[] { Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3 }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.getPricePlot().setLabelPrefix("MIT");    desc.getPricePlot().declarePath(Values.TREND, Inputs.PATH2);    desc.declarePath(Values.MASS_INDEX, Inputs.PATH);    desc.declareIndicator(Values.MASS_INDEX, Inputs.IND);    desc.setRangeKeys(Values.MASS_INDEX);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    int p3=getSettings().getInteger(Inputs.PERIOD3);    setMinBars(p1 + p2 + p3);  }  @Override  public void calculate(int index, DataContext ctx)  {    int trendP=getSettings().getInteger(TREND_PERIOD);    Enums.MAMethod method=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.EMA);    int firstEmaPeriod=getSettings().getInteger(Inputs.PERIOD);    int secondEmaPeriod=getSettings().getInteger(Inputs.PERIOD2);    int sumPeriod=getSettings().getInteger(Inputs.PERIOD3);    Object key=getSettings().getInput(TREND_INPUT, Enums.BarInput.CLOSE);    var trendM=getSettings().getMAMethod(TREND_METHOD, Enums.MAMethod.EMA);    var series=ctx.getDataSeries();    Double trend=0.0;    if (index > trendP) {      trend=series.ma(trendM, index, trendP, key);      series.setDouble(index, Values.TREND, trend);    }    double high=series.getHigh(index);    double low=series.getLow(index);    series.setDouble(index, Values.HIGH_LOW, (high - low));    if (index < firstEmaPeriod) return;    Double firstEma=series.ma(method, index, firstEmaPeriod, Values.HIGH_LOW);    series.setDouble(index, Values.FIRST_EMA, firstEma);    if (index < firstEmaPeriod + secondEmaPeriod) return;    Double secondEma=series.ma(method, index, secondEmaPeriod, Values.FIRST_EMA);    series.setDouble(index, Values.SECOND_EMA, secondEma);    series.setDouble(index, Values.RATIO, secondEma / firstEma);    series.setBoolean(index, Signals.ALERT, false);    if (index < firstEmaPeriod + secondEmaPeriod + sumPeriod) return;    Double massIndex=series.sum(index, sumPeriod, Values.RATIO);    series.setDouble(index, Values.MASS_INDEX, massIndex);    GuideInfo topGuide=getSettings().getGuide(Inputs.TOP_GUIDE);    double topG=topGuide.getValue();    GuideInfo bottomGuide=getSettings().getGuide(Inputs.BOTTOM_GUIDE);    double bottG=bottomGuide.getValue();    double lastT=series.getDouble(index - 1, Values.TREND, 0);    boolean upTrend=lastT < trend;    boolean downTrend=lastT > trend;    if (massIndex > topG) series.setBoolean(index, Signals.ALERT, true);    boolean prevAlert=series.getBoolean(index - 1, Signals.ALERT);    if (massIndex > bottG && prevAlert) series.setBoolean(index, Signals.ALERT, true);    boolean sell=massIndex <= bottG && prevAlert && upTrend; // JL sell in up trend??    boolean buy=massIndex <= bottG && prevAlert && downTrend; // JL buy in a down trend??    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      var c=new Coordinate(series.getStartTime(index), massIndex);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_HIGH_MASS_INDEX", Util.round(high, 2), Util.round(massIndex, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, high);    }    if (buy) {      var c=new Coordinate(series.getStartTime(index), massIndex);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_LOW_MASS_INDEX", Util.round(low, 2), Util.round(massIndex, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, low);    }    series.setComplete(index);  }}