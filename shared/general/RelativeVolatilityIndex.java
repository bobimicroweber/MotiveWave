package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Relative Volatility Index 019 */@StudyHeader(  namespace="com.motivewave",  id="ID_RVI",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_RELATIVE_VOLATILITY_INDEX",  label="LBL_RVI",  desc="DESC_RVI",  helpLink="http://www.motivewave.com/studies/relative_volatility_index.htm",  signals=true,  overlay=false,  studyOverlay=true)public class RelativeVolatilityIndex extends Study{  protected enum Signals { BUY, SELL, RVI_TOP, RVI_BOTTOM }  enum Values { STAND_DEV, RVI, UP, DOWN, STD_HIGH_UP, STD_HIGH_DOWN, STD_LOW_UP, STD_LOW_DOWN }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("STD_DEV_PERIOD"), 10, 1, 999, 1));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.SMMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("SMOOTH_PERIOD"), 14, 1, 999, 1));    var lines=tab.addGroup(get("PATH_INDICATOR"));    lines.addRow(new PathDescriptor(Inputs.PATH, get("LBL_RVI"), defaults.getLineColor(), 1.0f, null));    lines.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var guides=tab.addGroup(get("GUIDES"));    var topDesc=new GuideDescriptor(Inputs.TOP_GUIDE, get("TOP_GUIDE"), 70, 0, 999.1, .1, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 50, 0, 999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var bottomDesc=new GuideDescriptor(Inputs.BOTTOM_GUIDE, get("BOTTOM_GUIDE"), 30, 0, 999.1, .1, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    lines=tab.addGroup(get("SHADING"));    lines.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.TOP_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    lines.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.BOTTOM_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("STD_DEV_PERIOD"), 10, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("SMOOTH_PERIOD"), 14, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD, Inputs.METHOD, Inputs.PERIOD2);    desc.exportValue(new ValueDescriptor(Values.RVI, get("RVI"), new String[] { Inputs.INPUT, Inputs.PERIOD, Inputs.METHOD }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declarePath(Values.RVI, Inputs.PATH);    desc.declareIndicator(Values.RVI, Inputs.IND);    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.setRangeKeys(Values.RVI);    desc.setMaxBottomValue(15);    desc.setMinTopValue(85);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars(p1 + p2 + 1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    var series=ctx.getDataSeries();    // Set Inputs    int stDevLength=getSettings().getInteger(Inputs.PERIOD);    int averageLength=getSettings().getInteger(Inputs.PERIOD2);    // Min. Bar Check    if (index <= stDevLength) return;    var averageType=getSettings().getMAMethod(Inputs.METHOD);    // Set Variables    double high=series.getHigh(index);    double low=series.getLow(index);    double prevHigh=series.getHigh(index - 1);    double prevLow=series.getLow(index - 1);    // Standard Deviation Calculations    double stDevHi=series.std(index, stDevLength, Enums.BarInput.HIGH);    double stDevLo=series.std(index, stDevLength, Enums.BarInput.LOW);    double stDevHiUp=(high > prevHigh) ? stDevHi : 0d;    double stDevHiDown=(high < prevHigh) ? stDevHi : 0d;    double stDevLoUp=(low > prevLow) ? stDevLo : 0d;    double stDevLoDown=(low < prevLow) ? stDevLo : 0d;    // Set Enum Values    series.setDouble(index, Values.STD_HIGH_UP, Math.abs(stDevHiUp));    series.setDouble(index, Values.STD_HIGH_DOWN, Math.abs(stDevHiDown));    series.setDouble(index, Values.STD_LOW_UP, Math.abs(stDevLoUp));    series.setDouble(index, Values.STD_LOW_DOWN, Math.abs(stDevLoDown));    // Min. Bar Check    if (index <= averageLength + stDevLength) return;    // Calculate Averages    double avgStDevHiUp=Util.toDouble(series.ma(averageType, index, averageLength, Values.STD_HIGH_UP));    double avgStDevHiDown=Util.toDouble(series.ma(averageType, index, averageLength, Values.STD_HIGH_DOWN));    double avgStDevLoUp=Util.toDouble(series.ma(averageType, index, averageLength, Values.STD_LOW_UP));    double avgStDevLoDown=Util.toDouble(series.ma(averageType, index, averageLength, Values.STD_LOW_DOWN));    // Calculate RVI    double rviHi=(avgStDevHiUp + avgStDevHiDown == 0d) ? 50d : 100d * avgStDevHiUp / (avgStDevHiUp + avgStDevHiDown);    double rviLo=(avgStDevLoUp + avgStDevLoDown == 0d) ? 50d : 100d * avgStDevLoUp / (avgStDevLoUp + avgStDevLoDown);    double rvi=(rviHi + rviLo) / 2;    series.setDouble(index, Values.RVI, rvi);        // Do we need to generate a signal?    var topGuide=getSettings().getGuide(Inputs.TOP_GUIDE);    var bottomGuide=getSettings().getGuide(Inputs.BOTTOM_GUIDE);    if (crossedAbove(series, index, Values.RVI, topGuide.getValue())) {      series.setBoolean(index, Signals.SELL, true);      var location=new Coordinate(series.getStartTime(index), rvi);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SIGNAL_RVI_TOP", topGuide.getValue(), round(rvi));      if (marker.isEnabled()) addFigure(new Marker(location, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, round(rvi));    }    else if (crossedBelow(series, index, Values.RVI, bottomGuide.getValue())) {      series.setBoolean(index, Signals.BUY, true);      var location=new Coordinate(series.getStartTime(index), rvi);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("SIGNAL_RVI_TOP", bottomGuide.getValue(), round(rvi));      if (marker.isEnabled()) addFigure(new Marker(location, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, round(rvi));    }    series.setComplete(index);  }}