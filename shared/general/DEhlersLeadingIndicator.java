package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.DataSeries;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.LineInfo;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** D Ehlers Leading Indicator John Ehlers 080 */@StudyHeader(  namespace="com.motivewave",  id="ID_DELI",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_DETRENDED_EHLERS_LEADING_INDICATOR",  label="LBL_DELI",  desc="DESC_DELI",  menu="MENU_JOHN_EHLERS",  helpLink="http://www.motivewave.com/studies/detrended_ehlers_leading_indicator.htm",  overlay=false,  signals=false,  studyOverlay=true)public class DEhlersLeadingIndicator extends Study{  enum Values { EMA1, EMA2, DSNP, TEMP, DELI };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUT"));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 14, 1, 999, 1));    var lines=tab.addGroup(get("PATHS"));    lines.addRow(new PathDescriptor(Inputs.PATH, get("DSNP"), defaults.getLineColor(), 1.0f, null, true, true, true));    lines.addRow(new PathDescriptor(Inputs.PATH2, get("DELI"), defaults.getRed(), 1.0f, null, true, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    lines=tab.addGroup(get("INDICATORS"));    lines.addRow(new IndicatorDescriptor(Inputs.IND, get("DSNP"), defaults.getLineColor(), null, false, true, true));    lines.addRow(new IndicatorDescriptor(Inputs.IND2, get("DELI"), defaults.getRed(), null, false, true, true));    lines=tab.addGroup(get("SHADING"));    lines.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.PATH2, 0, Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    lines.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.PATH2, 0, Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 14, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.PATH2, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);    var desc=createRD();    desc.setLabelSettings(Inputs.PERIOD);    desc.exportValue(new ValueDescriptor(Values.DSNP, get("DSNP"), new String[] { Inputs.PERIOD }));    desc.exportValue(new ValueDescriptor(Values.DELI, get("DELI"), new String[] { Inputs.PERIOD }));    desc.declarePath(Values.DSNP, Inputs.PATH);    desc.declarePath(Values.DELI, Inputs.PATH2);    desc.declareIndicator(Values.DSNP, Inputs.IND);    desc.declareIndicator(Values.DELI, Inputs.IND2);    desc.setRangeKeys(Values.DSNP, Values.DELI);    desc.addHorizontalLine(new LineInfo(0, null, 1.0f, new float[] { 3f, 3f }));  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    if (index < 1) return;    int period=getSettings().getInteger(Inputs.PERIOD);    DataSeries series=ctx.getDataSeries();    double high=series.getDouble(index, Enums.BarInput.HIGH, 0);    double low=series.getDouble(index, Enums.BarInput.LOW, 0);    double prevHigh=series.getDouble(index - 1, Enums.BarInput.HIGH, 0);    double prevLow=series.getDouble(index - 1, Enums.BarInput.LOW, 0);    if (prevHigh > high) high=prevHigh;    if (prevLow < low) low=prevLow;    double price=(high + low) / 2;    double alpha=.67;    if (period > 2) alpha=2.0 / (period + 1);    double prevEma1=series.getDouble(index - 1, Values.EMA1, price); // returns price on first try    double ema1=(alpha * price) + ((1 - alpha) * prevEma1);    series.setDouble(index, Values.EMA1, ema1);    double prevEma2=series.getDouble(index - 1, Values.EMA2, price);    double ema2=((alpha / 2.0) * price) + ((1 - (alpha / 2.0)) * prevEma2);    series.setDouble(index, Values.EMA2, ema2);    double dsnp=ema1 - ema2;    series.setDouble(index, Values.DSNP, dsnp);    double prevTemp=series.getDouble(index - 1, Values.TEMP, 0.0); // returns 0 on first try    double temp=(alpha * dsnp) + ((1 - alpha) * prevTemp);    double deli=dsnp - temp;    series.setDouble(index, Values.DELI, deli);    series.setComplete(index);  }}