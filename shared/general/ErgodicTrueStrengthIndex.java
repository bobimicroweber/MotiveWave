package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.LineInfo;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Ergodic True Strength Indicator William Blau 085 */@StudyHeader(  namespace="com.motivewave",  id="ID_ETSI",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_ERGODIC_TRUE_STRENGTH_INDEX",  desc="DESC_ETSI",  label="LBL_ETSI",  menu="MENU_WILLIAM_BLAU",  helpLink="http://www.motivewave.com/studies/ergodic_true_strength_index.htm",  signals=false,  overlay=false,  studyOverlay=true)public class ErgodicTrueStrengthIndex extends Study{  enum Values { PRICE_D, ABS_PRICE_D, MA1, AMA1, MA2, AMA2, ETSI, SIG };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD1"), 4, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("PERIOD2"), 8, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD3, get("PERIOD3"), 6, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD4, get("SMOOTH_PERIOD"), 3, 1, 999, 1));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.EMA));    tab=sd.addTab(get("TAB_DISPLAY"));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_ETSI"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("SIGNAL"), defaults.getRed(), 1.0f, null, true, false, true));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("LBL_ETSI"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("SIGNAL"), defaults.getRed(), null, false, true, true));    settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.PATH, 0, Enums.ShadeType.ABOVE,        defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.PATH, 0, Enums.ShadeType.BELOW,        defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD1"), 4, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("PERIOD2"), 8, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD3, get("PERIOD3"), 6, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD4, get("SMOOTH_PERIOD"), 3, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.METHOD, Inputs.PATH, Inputs.PATH2, Inputs.TOP_FILL, Inputs.BOTTOM_FILL);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3, Inputs.PERIOD4, Inputs.METHOD);    desc.exportValue(new ValueDescriptor(Values.ETSI, get("LBL_ETSI"), new String[] { Inputs.INPUT, Inputs.PERIOD,        Inputs.PERIOD2, Inputs.PERIOD3, Inputs.PERIOD4, Inputs.METHOD }));    desc.declarePath(Values.ETSI, Inputs.PATH);    desc.declarePath(Values.SIG, Inputs.PATH2);    desc.declareIndicator(Values.ETSI, Inputs.IND);    desc.declareIndicator(Values.SIG, Inputs.IND2);    desc.setRangeKeys(Values.ETSI, Values.SIG);    desc.addHorizontalLine(new LineInfo(0, null, 1.0f, new float[] { 3f, 3f }));  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    int p3=getSettings().getInteger(Inputs.PERIOD3);    int p4=getSettings().getInteger(Inputs.PERIOD4);    setMinBars(p1 + p2 + p3 + p4 + 1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    if (index < 1) return;    int period1=getSettings().getInteger(Inputs.PERIOD);    int period2=getSettings().getInteger(Inputs.PERIOD2);    int period3=getSettings().getInteger(Inputs.PERIOD3);    int sPeriod=getSettings().getInteger(Inputs.PERIOD4);    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var method=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.EMA);    var series=ctx.getDataSeries();    double etsi=0.0;    double price=series.getDouble(index, key, 0);    double prevP=series.getDouble(index - 1, key, 0);    double priceD=price - prevP;    double absPriceD=Math.abs(price - prevP);    series.setDouble(index, Values.PRICE_D, priceD);    series.setDouble(index, Values.ABS_PRICE_D, absPriceD);    if (index < period1 + 1) return;    Double ma1=series.ma(method, index, period1, Values.PRICE_D);    Double aMa1=series.ma(method, index, period1, Values.ABS_PRICE_D);    series.setDouble(index, Values.MA1, ma1);    series.setDouble(index, Values.AMA1, aMa1);    if (index < period1 + period2 + 1) return;    Double ma2=series.ma(method, index, period2, Values.MA1);    Double aMa2=series.ma(method, index, period2, Values.AMA1);    series.setDouble(index, Values.MA2, ma2);    series.setDouble(index, Values.AMA2, aMa2);    if (index < period1 + period2 + period3 + 1) return;    Double ma3=series.ma(method, index, period3, Values.MA2);    Double aMa3=series.ma(method, index, period3, Values.AMA2);    if (ma3 == null || aMa3 == null) return;    if (aMa3 != 0.0) {      etsi=(100 * ma3) / aMa3;      series.setDouble(index, Values.ETSI, etsi);    }    if (index < period1 + period2 + period3 + sPeriod + 1) return;    Double sig=series.ma(method, index, sPeriod, Values.ETSI);    series.setDouble(index, Values.SIG, sig);    series.setComplete(index);  }}