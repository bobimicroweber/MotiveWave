package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** JRC Fractal Dimension 083 */@StudyHeader(  namespace="com.motivewave",  id="ID_JRCFD",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_JRC_FRACTAL_DIMENSION",  label="LBL_JRCFD",  desc="DESC_JRCFD",  // menu="MENU_OSCILLATORS",  helpLink="http://www.motivewave.com/studies/jrc_fractal_dimension.htm",  signals=false,  overlay=false,  studyOverlay=true)public class JRCFractalDim extends Study{  enum Values { SR, SS, FD, JRCFD };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("SIZE"), 20, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("COUNT"), 5, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD3, get("SMOOTH"), 5, 1, 999, 1));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.SMA));    var colors=tab.addGroup(get("PATH_INDICATOR"));    colors.addRow(new PathDescriptor(Inputs.PATH, get("LBL_JRCFD"), defaults.getLineColor(), 1.0f, null, true, true, true));    colors.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), null, null, false, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var guides=tab.addGroup(get("GUIDE"));    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 1, 0, 999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("SIZE"), 20, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("COUNT"), 5, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD3, get("SMOOTH"), 5, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.METHOD, Inputs.PATH);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3, Inputs.METHOD);    desc.exportValue(new ValueDescriptor(Values.JRCFD, get("LBL_JRCFD"), new String[] { Inputs.INPUT, Inputs.PERIOD,        Inputs.PERIOD2, Inputs.PERIOD3, Inputs.METHOD }));    desc.declarePath(Values.JRCFD, Inputs.PATH);    desc.declareIndicator(Values.JRCFD, Inputs.IND);    desc.setRangeKeys(Values.JRCFD);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    int p3=getSettings().getInteger(Inputs.PERIOD3);    setMinBars(Math.max(Math.max(p1, p2), p3) + (p1 * p2) + 1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int size=getSettings().getInteger(Inputs.PERIOD);    int count=getSettings().getInteger(Inputs.PERIOD2);    int smoothP=getSettings().getInteger(Inputs.PERIOD3);    int longest=Math.max(Math.max(size, count), smoothP);    if (index < longest) return;    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var method=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.SMA);    var series=ctx.getDataSeries();    double smallRange=0.0;    double bigRange=0.0;    double smallSum=0.0;    double fd=0.0;    int wind1=(count - 1) * size;    int wind2=count * size;    double nlog=Math.log(count);    double highest=series.highest(index, size, Enums.BarInput.HIGH);    double lowest=series.lowest(index, size, Enums.BarInput.LOW);    double priorC=series.getDouble(index - size, key, 0.0);    smallRange=Math.max(priorC, highest) - Math.min(priorC, lowest);    series.setDouble(index, Values.SR, smallRange);    if (index < longest + wind2) return;    highest=series.highest(index, wind2, Enums.BarInput.HIGH);    lowest=series.lowest(index, wind2, Enums.BarInput.LOW);    priorC=series.getDouble(index - wind2, key, 0.0);    bigRange=Math.max(priorC, highest) - Math.min(priorC, lowest);    double prevSS=series.getDouble(index - 1, Values.SS, smallRange); // returns smallRange on first try    double priorSR=series.getDouble(index - wind1, Values.SR, 0.0);    smallSum=prevSS + smallRange - priorSR;    if (smallSum < 0.0) return;    series.setDouble(index, Values.SS, smallSum);    if (index < longest + wind2 + 1) return;    double temp=Math.log(bigRange / (smallSum / wind1));    fd=2 - (temp / nlog);    series.setDouble(index, Values.FD, fd);    if (index < longest + wind2 + 1 + smoothP) return;    Double jrcfd=series.ma(method, index, smoothP, Values.FD);    series.setDouble(index, Values.JRCFD, jrcfd);    series.setComplete(index);  }}