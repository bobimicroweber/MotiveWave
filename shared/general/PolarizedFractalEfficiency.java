package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Polarized Fractal Efficiency 082 */@StudyHeader(  namespace="com.motivewave",  id="ID_PLFE",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_POLARIZED_FRACTAL_EFFICIENCY",  label="LBL_PLFE",  desc="DESC_PLFE",  // menu="MENU_OSCILLATORS",  helpLink="http://www.motivewave.com/studies/polarized_fractal_efficiency.htm",  signals=true,  overlay=false,  studyOverlay=true)public class PolarizedFractalEfficiency extends Study{  enum Values { EMA };  enum Signals { SELL, BUY };  double highSell=Double.NEGATIVE_INFINITY;  double lowBuy=Double.MAX_VALUE;  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD"), 9, 1, 999, 1));    var colors=tab.addGroup(get("PATH_INDICATOR"));    colors.addRow(new PathDescriptor(Inputs.PATH, get("LBL_PLFE"), defaults.getLineColor(), 1.0f, null, true, true, true));    colors.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), null, null, false, true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var guides=tab.addGroup(get("GUIDES"));    var topDesc=new GuideDescriptor(Inputs.TOP_GUIDE, get("TOP_GUIDE"), 50, 0, 999.1, .1, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -50.1, 50.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var bottomDesc=new GuideDescriptor(Inputs.BOTTOM_GUIDE, get("BOTTOM_GUIDE"), -50, -999.1, 0, .1, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    var set=tab.addGroup(get("SHADING"));    set.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    set.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD"), 9, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD);    desc.exportValue(new ValueDescriptor(Values.EMA, get("EMA"), new String[] { Inputs.INPUT, Inputs.PERIOD }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declarePath(Values.EMA, Inputs.PATH);    desc.declareIndicator(Values.EMA, Inputs.IND);    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.setRangeKeys(Values.EMA);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    setMinBars(p1 + 1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period=getSettings().getInteger(Inputs.PERIOD);    if (index < period + 1) return;    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var series=ctx.getDataSeries();    double pfe=0.0;    double c2c=0.0;    int counter=0;    double fracEff=0.0;    double ema=0.0;    double prevEma=0.0;    double priceCM1=0.0;    double priceC=0.0;    double price=series.getDouble(index, key, 0);    double priorPrice=series.getDouble(index - period, key, 0);    pfe=Math.sqrt(Math.pow((price - priorPrice), 2) + 100);    for (counter=1; counter <= period; counter++) {      priceCM1=series.getDouble(index - counter - 1, key, 0.0);      priceC=series.getDouble(index - counter, key, 0.0);      c2c=c2c + Math.sqrt(Math.pow(priceCM1 - priceC, 2) + 1);    }    if (price - priorPrice > 0.0) fracEff=Math.round((pfe / c2c) * 100);    else fracEff=Math.rint(-(pfe / c2c) * 100);    prevEma=series.getDouble(index - 1, Values.EMA, fracEff); // returns fracEff on first try    ema=Math.rint((fracEff * 0.333) + prevEma * (1 - 0.333));    series.setDouble(index, Values.EMA, ema);    // Check for signal events    var topGuide=getSettings().getGuide(Inputs.TOP_GUIDE);    double topG=topGuide.getValue();    var bottomGuide=getSettings().getGuide(Inputs.BOTTOM_GUIDE);    double bottG=bottomGuide.getValue();    prevEma=series.getDouble(index - 1, Values.EMA, 0.0);    boolean sell=(ema > topG) && (prevEma >= ema) && (ema > highSell); // peaked above topG    boolean buy=(ema < bottG && prevEma <= ema) && (ema < lowBuy); // trough below bottG    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      lowBuy=Double.MAX_VALUE;      highSell=ema;      var c=new Coordinate(series.getStartTime(index), ema);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_PRICE_PLFE", Util.round(price, 2), Util.round(ema, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, price);    }    if (buy) {      highSell=Double.NEGATIVE_INFINITY;      lowBuy=ema;      var c=new Coordinate(series.getStartTime(index), ema);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_PRICE_PLFE", Util.round(price, 2), Util.round(ema, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, price);    }    series.setComplete(index);  }}