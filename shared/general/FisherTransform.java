package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Fisher Transform 007 */@StudyHeader(  namespace="com.motivewave",  id="ID_FISH_TRAN",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_FISHER_TRANSFORM",  label="LBL_FISH",  desc="DESC_FISH",  menu="MENU_OSCILLATORS",  helpLink="http://www.motivewave.com/studies/fisher_transform.htm",  signals=true,  overlay=false,  studyOverlay=true)public class FisherTransform extends Study{  enum Values { FISHER, SIGNAL, MEDIAN, VALUE };  protected enum Signals { BUY, SELL };  double highSell=Double.NEGATIVE_INFINITY;  double lowBuy=Double.MAX_VALUE;  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.MIDPOINT));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("FISHER_PERIOD"), 10, 10, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("SIGNAL_PERIOD"), 2, 1, 999, 1));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_FISH"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("SIGNAL"), defaults.getRed(), 1.0f, null, true, false, true));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("LBL_FISH"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("SIGNAL"), defaults.getRed(), null, false, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var guides=tab.addGroup(get("GUIDES"));    var topDesc=new GuideDescriptor(Inputs.TOP_GUIDE, get("TOP_GUIDE"), .5, 0, 9.01, .01, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -9.01, 9.01, .01, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var bottomDesc=new GuideDescriptor(Inputs.BOTTOM_GUIDE, get("BOTTOM_GUIDE"), -.5, -9.01, 0, .01, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    var shade=tab.addGroup(get("SHADING"));    shade.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    shade.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("FISHER_PERIOD"), 10, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("SIGNAL_PERIOD"), 2, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH, Inputs.PATH2);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2);    desc.exportValue(new ValueDescriptor(Values.FISHER, get("LBL_FISH"), new String[] { Inputs.INPUT, Inputs.PERIOD }));    desc.exportValue(new ValueDescriptor(Values.SIGNAL, get("FSIG"), new String[] { Inputs.INPUT, Inputs.PERIOD2 }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.declarePath(Values.FISHER, Inputs.PATH);    desc.declarePath(Values.SIGNAL, Inputs.PATH2);    desc.declareIndicator(Values.FISHER, Inputs.IND);    desc.declareIndicator(Values.SIGNAL, Inputs.IND2);    desc.setRangeKeys(Values.FISHER, Values.SIGNAL);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars(Math.max(p1, p2));  }  @Override  protected void calculate(int index, DataContext ctx)  {    int normalisedPeriod=getSettings().getInteger(Inputs.PERIOD);    int signalPeriod=getSettings().getInteger(Inputs.PERIOD2);    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.MIDPOINT);    int longP=Math.max(normalisedPeriod, signalPeriod);    if (index < longP) return;    var series=ctx.getDataSeries();    double high=series.getHigh(index);    double low=series.getLow(index);    double median=series.getDouble(index, key, 0);    double minMedian=series.lowest(index, normalisedPeriod, key);    double maxMedian=series.highest(index, normalisedPeriod, key);    double prevValue=series.getDouble(index - 1, Values.VALUE, 0);    double prevFish=series.getDouble(index - 1, Values.FISHER, 0);    double signal=series.getDouble(index - signalPeriod, Values.FISHER, 0);    double temp=(median - minMedian) / (maxMedian - minMedian);    if (maxMedian == minMedian) temp=0; // no data for normalizedPeriod    double value=.5 * 2 * (temp - .5) + (.5 * prevValue);    if (value > .9999) value=.9999;    if (value < -.9999) value=-.9999;    series.setDouble(index, Values.VALUE, value);    temp=(1 + value) / (1 - value);    double fisher=(.25 * Math.log(temp)) + (.5 * prevFish);    series.setDouble(index, Values.FISHER, fisher);    series.setDouble(index, Values.SIGNAL, signal);    // Check for signal events    var topGuide=getSettings().getGuide(Inputs.TOP_GUIDE);    double topG=topGuide.getValue();    var bottomGuide=getSettings().getGuide(Inputs.BOTTOM_GUIDE);    double bottG=bottomGuide.getValue();    boolean sell=fisher > topG && crossedBelow(series, index, Values.FISHER, Values.SIGNAL) && (fisher > highSell);    boolean buy=fisher < bottG && crossedAbove(series, index, Values.FISHER, Values.SIGNAL) && (fisher < lowBuy);    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      lowBuy=Double.MAX_VALUE;      highSell=fisher;      var c=new Coordinate(series.getStartTime(index), fisher);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_FISHER_TRANSFORM_HIGH_FISHER", Util.round(high, 2), Util.round(fisher, 3));       if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, high);    }    if (buy) {      highSell=Double.NEGATIVE_INFINITY;      lowBuy=fisher;      var c=new Coordinate(series.getStartTime(index), fisher);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_FISHER_TRANSFORM_LOW_FISHER", Util.round(low, 2), Util.round(fisher, 3));       if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, low);    }    series.setComplete(index);  }}