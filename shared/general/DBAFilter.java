package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Divergent Bars Alligator Filter (Bill Williams) 107 */@StudyHeader(  namespace="com.motivewave",  id="ID_DVBAF",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_DIVERGENT_BARS_ALLIGATOR_FILTER",  label="LBL_DVBAF",  desc="DESC_DVBAF",  menu="MENU_BILL_WILLIAMS",  helpLink="http://www.motivewave.com/studies/divergent_bars_alligator_filter.htm",  signals=true,  overlay=true,  studyOverlay=true)public class DBAFilter extends Study{  final static String JAW_SHIFT="jawShift";  final static String JAW_IND="jawInd";  final static String TEETH_SHIFT="teethShift";  final static String TEETH_IND="teethInd";  final static String LIPS_SHIFT="lipsShift";  final static String LIPS_IND="lipsInd";  final static String UB_IND="ubInd";  final static String LB_IND="lbInd";  final static String FACTOR="Factor";  final static String PATH5="Path5";  enum Values { JAW, TEETH, LIPS, UB, LB }  protected enum Signals { BUY, SELL }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.MIDPOINT));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.SMMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("JAW_PERIOD"), 13, 1, 999, 1),         new IntegerDescriptor(JAW_SHIFT, get("SHIFT"), 8, 0, 99, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("TEETH_PERIOD"), 8, 1, 999, 1),         new IntegerDescriptor(TEETH_SHIFT, get("SHIFT"), 5, 0, 99, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD3, get("LIPS_PERIOD"), 5, 1, 999, 1),         new IntegerDescriptor(LIPS_SHIFT, get("SHIFT"), 3, 0, 99, 1));    inputs.addRow(new DoubleDescriptor(FACTOR, get("%FACTOR"), 1, -100.01, 100.01, .01));    var lines=tab.addGroup(get("PATHS"));    lines.addRow(new PathDescriptor(Inputs.PATH, get("JAW"), defaults.getBlue(), 1.0f, null, true, true, true));    lines.addRow(new PathDescriptor(Inputs.PATH2, get("TEETH"), defaults.getRed(), 1.0f, null, true, true, true));    lines.addRow(new PathDescriptor(Inputs.PATH3, get("LIPS"), defaults.getGreen(), 1.0f, null, true, true, true));    lines.addRow(new PathDescriptor(Inputs.PATH4, get("FILTER_UPPER"), defaults.getLineColor(), .025f, new float[] { 5f, 5f }, true, true, true));    lines.addRow(new PathDescriptor(PATH5, get("FILTER_LOWER"), defaults.getLineColor(), .025f, new float[] { 5f, 5f }, true, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    lines=tab.addGroup(get("INDICATORS"));    lines.addRow(new IndicatorDescriptor(JAW_IND, get("JAW"), defaults.getBlue(), null, false, true, true));    lines.addRow(new IndicatorDescriptor(TEETH_IND, get("TEETH"), defaults.getRed(), null, false, true, true));    lines.addRow(new IndicatorDescriptor(LIPS_IND, get("LIPS"), defaults.getGreen(), null, false, true, true));    lines.addRow(new IndicatorDescriptor(UB_IND, get("FILTER_UPPER"), defaults.getLineColor(), null, false, true, true));    lines.addRow(new IndicatorDescriptor(LB_IND, get("FILTER_LOWER"), defaults.getLineColor(), null, false, true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("JAW_PERIOD"), 20, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("TEETH_PERIOD"), 20, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD3, get("LIPS_PERIOD"), 20, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(FACTOR, Inputs.PATH, Inputs.PATH2, Inputs.PATH3, Inputs.PATH4, PATH5);    var desc=createRD();    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, JAW_SHIFT, Inputs.PERIOD2, TEETH_SHIFT,        Inputs.PERIOD3, LIPS_SHIFT, FACTOR);    desc.exportValue(new ValueDescriptor(Values.JAW, get("JAW"), new String[] { Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD }));    desc.exportValue(new ValueDescriptor(Values.TEETH, get("TEETH"), new String[] { Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD2 }));    desc.exportValue(new ValueDescriptor(Values.LIPS, get("LIPS"), new String[] { Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD3 }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declarePath(Values.JAW, Inputs.PATH);    desc.declarePath(Values.TEETH, Inputs.PATH2);    desc.declarePath(Values.LIPS, Inputs.PATH3);    desc.declarePath(Values.UB, Inputs.PATH4);    desc.declarePath(Values.LB, PATH5);    desc.declareIndicator(Values.JAW, JAW_IND);    desc.declareIndicator(Values.TEETH, TEETH_IND);    desc.declareIndicator(Values.LIPS, LIPS_IND);    desc.declareIndicator(Values.UB, UB_IND);    desc.declareIndicator(Values.LB, LB_IND);    desc.setRangeKeys(Values.UB, Values.LB, Values.JAW, Values.TEETH, Values.LIPS);  }  @Override  public void onLoad(Defaults defaults)  {    int jawP=getSettings().getInteger(Inputs.PERIOD);    int teethP=getSettings().getInteger(Inputs.PERIOD2);    int lipsP=getSettings().getInteger(Inputs.PERIOD3);    setMinBars(Math.max(Math.max(jawP, teethP), lipsP));  }  @Override  protected synchronized void calculate(int index, DataContext ctx)  {    int jawP=getSettings().getInteger(Inputs.PERIOD);    if (index < jawP) return;    int teethP=getSettings().getInteger(Inputs.PERIOD2);    if (index < teethP) return;    int lipsP=getSettings().getInteger(Inputs.PERIOD3);    if (index < lipsP) return;    int jawS=getSettings().getInteger(JAW_SHIFT);    int teethS=getSettings().getInteger(TEETH_SHIFT);    int lipsS=getSettings().getInteger(LIPS_SHIFT);    double fac=getSettings().getDouble(FACTOR);    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.MIDPOINT);    var method=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.SMMA);    var series=ctx.getDataSeries();    double low=series.getLow(index);    double high=series.getHigh(index);    float close=series.getClose(index);    double prevLow=series.getLow(index - 1);    double prevHigh=series.getHigh(index - 1);    double currentAverage=(high + low) / 2;    Double jaw=series.ma(method, index, jawP, key);    if (jaw == null) return;    series.setDouble(index + jawS, Values.JAW, jaw);    double cJaw=series.getDouble(index, Values.JAW, jaw);    Double teeth=series.ma(method, index, teethP, key);    if (teeth == null) return;    series.setDouble(index + teethS, Values.TEETH, teeth);    double cTeeth=series.getDouble(index, Values.TEETH, teeth);    Double lips=series.ma(method, index, lipsP, key);    if (lips == null) return;    series.setDouble(index + lipsS, Values.LIPS, lips);    double cLips=series.getDouble(index, Values.LIPS, lips);    double min=Math.min(Math.min(cJaw, cTeeth), cLips);    double max=Math.max(Math.max(cJaw, cTeeth), cLips);    double mid=(max + min) * .5;    double minL=min - (fac * min / 100);    if (minL > mid) minL=mid;    double maxH=max + (fac * max / 100);    if (maxH < mid) maxH=mid;    series.setDouble(index, Values.UB, maxH);    series.setDouble(index, Values.LB, minL);    // signals    boolean buy=(low < prevLow && close > currentAverage && low < minL);    boolean sell=(high > prevHigh && close < currentAverage && high > maxH);    boolean wasBuy = index == series.size()-1 && series.getBoolean(index, Signals.BUY, false);    boolean wasSell = index == series.size()-1 && series.getBoolean(index, Signals.SELL, false);    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      var c=new Coordinate(series.getStartTime(index), high);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_DVBAF_CLOSE", Util.round(close, 2));      if (!wasSell && marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, close);    }    if (buy) {      var c=new Coordinate(series.getStartTime(index), low);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_DVBAF_CLOSE", Util.round(close, 2));      if (!wasBuy && marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, close);    }    series.setComplete(index);  }}