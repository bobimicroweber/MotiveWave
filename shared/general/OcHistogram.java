package com.motivewave.platform.study.general;import java.awt.Color;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.ColorDescriptor;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** OC Histogram 093 */@StudyHeader(  namespace="com.motivewave",  id="ID_OCHG",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_OC_HISTOGRAM",  label="LBL_OCHG",  desc="DESC_OCHG",  helpLink="http://www.motivewave.com/studies/oc_histogram.htm",  signals=false,  overlay=false,  studyOverlay=true)public class OcHistogram extends Study{  enum Values { OC };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT1"), Enums.BarInput.CLOSE));    inputs.addRow(new InputDescriptor(Inputs.INPUT2, get("INPUT2"), Enums.BarInput.OPEN));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.EMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD1"), 10, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("PERIOD2"), 10, 1, 999, 1));    tab=sd.addTab(get("TAB_DISPLAY"));    var settings=tab.addGroup(get("COLORS"));    settings.addRow(new ColorDescriptor(Inputs.UP_COLOR, get("LBL_UP_COLOR"), defaults.getGreen()));    settings.addRow(new ColorDescriptor(Inputs.DOWN_COLOR, get("LBL_DOWN_COLOR"), defaults.getRed()));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    var guides=tab.addGroup(get("GUIDE"));    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -999.1, 999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT, Inputs.INPUT2, Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD1"), 10, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("PERIOD2"), 10, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.UP_COLOR, Inputs.DOWN_COLOR);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.INPUT2, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2);    desc.exportValue(new ValueDescriptor(Values.OC, get("LBL_OCHG"), new String[] { Inputs.INPUT, Inputs.INPUT2,        Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2 }));    desc.declareBars(Values.OC, null);    desc.declareIndicator(Values.OC, Inputs.IND);    desc.setRangeKeys(Values.OC);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars(Math.max(p1, p2));  }  @Override  protected void calculate(int index, DataContext ctx)  {    int period1=getSettings().getInteger(Inputs.PERIOD);    int period2=getSettings().getInteger(Inputs.PERIOD2);    if (index < Math.max(period1, period2)) return;    Object key1=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    Object key2=getSettings().getInput(Inputs.INPUT2, Enums.BarInput.OPEN);    var method=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.EMA);    var series=ctx.getDataSeries();    Double ma1=series.ma(method, index, period1, key1);    Double ma2=series.ma(method, index, period2, key2);    if (ma1 == null || ma2 == null) return;    Double oc=ma1 - ma2;    series.setDouble(index, Values.OC, oc);    var midGuide=getSettings().getGuide(Inputs.MIDDLE_GUIDE);    double midG=midGuide.getValue();    Color upC=getSettings().getColor(Inputs.UP_COLOR);    Color dnC=getSettings().getColor(Inputs.DOWN_COLOR);    if (oc > midG) series.setBarColor(index, Values.OC, upC);    else series.setBarColor(index, Values.OC, dnC);    series.setComplete(index);  }}