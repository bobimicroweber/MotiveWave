package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.Coordinate;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.Util;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.MarkerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.draw.Marker;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Fast & Slow Relative Strength Index 090 */@StudyHeader(  namespace="com.motivewave",  id="ID_FSRSI",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_FAST_SLOW_RSI",  desc="DESC_FSRSI",  label="LBL_FSRSI",  // menu="MENU_OSCILLATORS",  helpLink="http://www.motivewave.com/studies/fast_and_slow_rsi.htm",  signals=true,  overlay=false,  studyOverlay=true)public class FastSlowRelativeStrengthIndex extends Study{  enum Signals { SELL, BUY };  enum Values { MOM, FSK, V4, UP, DOWN, FSRSI, SIG };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("MOMENTUM_PERIOD"), 3, 1, 500, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("FSK_PERIOD"), 6, 1, 500, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD3, get("RSI_PERIOD"), 9, 1, 500, 1));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("RSI_METHOD"), Enums.MAMethod.EMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD4, get("SIGNAL_PERIOD"), 6, 1, 500, 1));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD2, get("SIGNAL_METHOD"), Enums.MAMethod.WMA));    var settings=tab.addGroup(get("PATHS"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_FSRSI"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new PathDescriptor(Inputs.PATH2, get("SIGNAL"), defaults.getRed(), 1.0f, null, true, false, true));    tab=sd.addTab(get("TAB_DISPLAY"));    settings=tab.addGroup(get("INDICATORS"));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("LBL_FSRSI"), defaults.getLineColor(), null, false, true, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND2, get("SIGNAL"), defaults.getRed(), null, false, true, true));    var markers=tab.addGroup(get("MARKERS"));    markers.addRow(new MarkerDescriptor(Inputs.UP_MARKER, get("UP_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getGreen(), defaults.getLineColor(), true, true));    markers.addRow(new MarkerDescriptor(Inputs.DOWN_MARKER, get("DOWN_MARKER"), Enums.MarkerType.TRIANGLE,        Enums.Size.VERY_SMALL, defaults.getRed(), defaults.getLineColor(), true, true));    var guides=tab.addGroup(get("GUIDES"));    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 50, 0, 999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("MOMENTUM_PERIOD"), 3, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("FSK_PERIOD"), 6, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD3, get("RSI_PERIOD"), 9, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.METHOD);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD4, get("SIGNAL_PERIOD"), 6, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.METHOD2, Inputs.PATH, Inputs.PATH2);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2, Inputs.PERIOD3, Inputs.PERIOD4, Inputs.METHOD, Inputs.METHOD2);    desc.exportValue(new ValueDescriptor(Values.FSRSI, get("LBL_FSRSI"), new String[] { Inputs.INPUT, Inputs.PERIOD,        Inputs.PERIOD2, Inputs.PERIOD3, Inputs.PERIOD4, Inputs.METHOD }));    desc.exportValue(new ValueDescriptor(Signals.SELL, Enums.ValueType.BOOLEAN, get("SELL"), null));    desc.exportValue(new ValueDescriptor(Signals.BUY, Enums.ValueType.BOOLEAN, get("BUY"), null));    desc.declarePath(Values.FSRSI, Inputs.PATH);    desc.declarePath(Values.SIG, Inputs.PATH2);    desc.declareIndicator(Values.FSRSI, Inputs.IND);    desc.declareIndicator(Values.SIG, Inputs.IND2);    desc.declareSignal(Signals.SELL, get("SELL"));    desc.declareSignal(Signals.BUY, get("BUY"));    desc.setRangeKeys(Values.FSRSI, Values.SIG);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    int p3=getSettings().getInteger(Inputs.PERIOD3);    int p4=getSettings().getInteger(Inputs.PERIOD4);    setMinBars(p1 + p2 + p3 + p4 + 1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int momP=getSettings().getInteger(Inputs.PERIOD);    if (index < momP) return;    int fskP=getSettings().getInteger(Inputs.PERIOD2);    int rsiP=getSettings().getInteger(Inputs.PERIOD3);    int sigP=getSettings().getInteger(Inputs.PERIOD4);    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    var rsiMethod=getSettings().getMAMethod(Inputs.METHOD, Enums.MAMethod.EMA);    var sigMethod=getSettings().getMAMethod(Inputs.METHOD2, Enums.MAMethod.WMA);    var series=ctx.getDataSeries();    double price=series.getDouble(index, key, 0);    double mom=Utility.momentum(ctx, index, momP, key);    series.setDouble(index, Values.MOM, mom);    if (index < momP + 1) return;    double prevMom=series.getDouble(index - 1, Values.MOM);    double prevFsk=series.getDouble(index - 1, Values.FSK, 0.0); // returns 0.0 on first try    double fsk=(.03 * (mom - prevMom)) + ((1 - .03) * prevFsk);    series.setDouble(index, Values.FSK, fsk);    if (index < (momP + fskP) + 1) return;    Double v4=series.ma(sigMethod, index, fskP, Values.FSK);    if (v4 == null) return;    series.setDouble(index, Values.V4, v4);    // if (index < period1 + period2 + period3 + 1) return;    double diff=series.getDouble(index, key) - series.getDouble(index - 1, key);    double up=0, down=0;    if (diff > 0) up=diff;    else down=diff;    series.setDouble(index, Values.UP, up);    series.setDouble(index, Values.DOWN, Math.abs(down));    if (index < (momP + fskP + rsiP + 1)) return;    Double avgUp=series.ma(rsiMethod, index, rsiP, Values.UP);    if (avgUp == null) return;    Double avgDown=series.ma(rsiMethod, index, rsiP, Values.DOWN);    if (avgDown == null) return;    double rs=avgUp / avgDown;    double rsi=100.0 - (100.0 / (1.0 + rs));    double fsrsi=(10000 * v4) + rsi;    series.setDouble(index, Values.FSRSI, fsrsi);    if (index < momP + fskP + rsiP + sigP + 1) return;    Double sig=series.ma(sigMethod, index, sigP, Values.FSRSI);    if (sig == null) return;    series.setDouble(index, Values.SIG, sig);    // Check for signal events    boolean buy=crossedAbove(series, index, Values.FSRSI, Values.SIG);    boolean sell=crossedBelow(series, index, Values.FSRSI, Values.SIG);    series.setBoolean(index, Signals.SELL, sell);    series.setBoolean(index, Signals.BUY, buy);    if (sell) {      var c=new Coordinate(series.getStartTime(index), fsrsi);      var marker=getSettings().getMarker(Inputs.DOWN_MARKER);      String msg = get("SELL_PRICE_FSRSI", Util.round(price, 2), Util.round(fsrsi, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.TOP, marker, msg));      ctx.signal(index, Signals.SELL, msg, price);    }    if (buy) {      var c=new Coordinate(series.getStartTime(index), fsrsi);      var marker=getSettings().getMarker(Inputs.UP_MARKER);      String msg = get("BUY_PRICE_FSRSI", Util.round(price, 2), Util.round(fsrsi, 3));      if (marker.isEnabled()) addFigure(new Marker(c, Enums.Position.BOTTOM, marker, msg));      ctx.signal(index, Signals.BUY, msg, price);    }    series.setComplete(index);  }}