package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.DataSeries;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.LineInfo;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Mobility Oscillator Mel Winder 051 */@StudyHeader(  namespace="com.motivewave",  id="ID_MO",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_MOBILITY_OSCILLATOR",  label="LBL_MO",  desc="DESC_MO",  // menu="MENU_MEL_WIDNER",  helpLink="http://www.motivewave.com/studies/mobility_oscillator.htm",  signals=false,  overlay=false,  studyOverlay=true)public class MobilityOsc extends Study{  enum Values { MO };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("M_PERIOD"), 10, 10, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("LB_PERIOD"), 14, 1, 999, 1));    var set=tab.addGroup(get("PATH_INDICATOR"));    set.addRow(new PathDescriptor(Inputs.PATH, get("LBL_MO"), defaults.getLineColor(), 1.0f, null));    set.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), null, null, false, true, true));    var guides=tab.addGroup(get("GUIDE"));    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -999.1, 999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("M_PERIOD"), 10, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("LBL_PERIOD"), 14, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH);    var desc=createRD();    desc.setLabelSettings(Inputs.PERIOD, Inputs.PERIOD2);    desc.exportValue(new ValueDescriptor(Values.MO, get("LBL_MO"), new String[] { Inputs.PERIOD, Inputs.PERIOD2 }));    desc.declarePath(Values.MO, Inputs.PATH);    desc.declareIndicator(Values.MO, Inputs.IND);    desc.setRangeKeys(Values.MO);    desc.addHorizontalLine(new LineInfo(0.0, null, 1.0f, new float[] { 3f, 3f }));  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars(p1 + p2 + 1);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int m=getSettings().getInteger(Inputs.PERIOD);    int period=getSettings().getInteger(Inputs.PERIOD2);    if (index < m + period + 1) return;    var series=ctx.getDataSeries();    double mo=-mo(series, index, m, period);    series.setDouble(index, Values.MO, mo);    series.setComplete(index);  }  public double mo(DataSeries series, int index, int m, int period)  {    double hMax=series.highest(index, period, Enums.BarInput.HIGH);    double lMin=series.lowest(index, period, Enums.BarInput.LOW);    double rX=(hMax - lMin) / m;    double bL=0.0;    double bU=0.0;    double pdfI=0.0;    double pdfC=0.0;    double pdfMx=0.0;    int imX=1;    double priorClose=0.0;    int x=0;    for (int i=index - m + 1; i <= index; i++) {      bU=lMin + ((x + 1) * rX);      bL=bU - rX;      pdfI=pdf(series, i, (x + 1), m, period);      if (x == 0) pdfMx=pdfI;      if (pdfI > pdfMx) {        imX=x + 1;        pdfMx=pdfI;      }      if (x == 0) pdfC=pdfI;      priorClose=series.getClose(index - (period - 1));      if (priorClose > bL && priorClose <= bU) pdfC=pdfI;      x++;    }    double pmo=lMin + (imX - .5) * rX;    double moVar=100 * (1 - pdfC / pdfMx);    if (priorClose < pmo) moVar=-moVar;    return moVar;  }  public double pdf(DataSeries series, int index, int value1, int m, int period)  {    double hMax=series.highest(index, period, Enums.BarInput.HIGH);    double lMin=series.lowest(index, period, Enums.BarInput.LOW);    double high=0.0;    double low=0.0;    double pdf=0.0;    double rX=(hMax - lMin) / m;    double bL=lMin + ((value1 - 1) * rX);    double bU=lMin + (value1 * rX);    for (int i=index - period + 1; i <= index; i++) {      high=series.getHigh(i);      low=series.getLow(i);      if (high <= low) continue;      if (high <= bU) pdf++;      if (!(high <= bU || low >= bU)) pdf=pdf + (bU - low) / (high - low);      if (high <= bL) pdf--;      if (!(high <= bL || low >= bL)) pdf=pdf - (bL - low) / (high - low);    }    return pdf / period;  }}