package com.motivewave.platform.study.general;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.SliderDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Trend Analysis Index 053 */@StudyHeader(  namespace="com.motivewave",  id="ID_TAI",  rb="com.motivewave.platform.study.nls.strings2",  name="NAME_TREND_ANALYSIS_INDEX",  label="LBL_TAI",  desc="DESC_TAI",  helpLink="http://www.motivewave.com/studies/trend_analysis_index.htm",  signals=false,  overlay=false,  studyOverlay=true)public class TrendAnalysisIndex extends Study{  enum Values { AV1, TAI };  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("PERIOD1"), 28, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("PERIOD2"), 5, 1, 999, 1));    var lines=tab.addGroup(get("PATH_INDICATOR"));    lines.addRow(new PathDescriptor(Inputs.PATH, get("LBL_TAI"), defaults.getLineColor(), 1.0f, null));    lines.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    var guides=tab.addGroup(get("GUIDE"));    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 0, -999.1, 999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    // Quick Settings (Tool Bar and Popup Editor)    sd.addQuickSettings(Inputs.INPUT);    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD, get("PERIOD1"), 28, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(new SliderDescriptor(Inputs.PERIOD2, get("PERIOD2"), 5, 1, 9999, true, () -> Enums.Icon.SINE_WAVE.get()));    sd.addQuickSettings(Inputs.PATH);    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2);    desc.exportValue(new ValueDescriptor(Values.TAI, get("LBL_TAI"), new String[] { Inputs.INPUT, Inputs.PERIOD, Inputs.PERIOD2 }));    desc.declarePath(Values.TAI, Inputs.PATH);    desc.declareIndicator(Values.TAI, Inputs.IND);    desc.setRangeKeys(Values.TAI);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars(p1 + p2);  }  @Override  protected void calculate(int index, DataContext ctx)  {    Object input=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    int avPeriod=getSettings().getInteger(Inputs.PERIOD);    int taiPeriod=getSettings().getInteger(Inputs.PERIOD2);    if (index < avPeriod) return;    var series=ctx.getDataSeries();    double av1=series.sma(index, avPeriod, input);    series.setDouble(index, Values.AV1, av1);    if (index < avPeriod + taiPeriod) return;    double highest=series.highest(index, taiPeriod, Values.AV1);    double lowest=series.lowest(index, taiPeriod, Values.AV1);    double value=series.getDouble(index, input);    double tai=(highest - lowest) * 100.0 / value;    series.setDouble(index, Values.TAI, tai);    series.setComplete(index);  }}