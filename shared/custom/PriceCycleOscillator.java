package com.motivewave.platform.study.custom;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.DataSeries;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.desc.GuideDescriptor;import com.motivewave.platform.sdk.common.desc.IndicatorDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.common.desc.ShadeDescriptor;import com.motivewave.platform.sdk.common.desc.ValueDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** Price Cycle Oscillator 176 */@StudyHeader(  namespace="com.motivewave",  id="ID_PRICE_CYCLE_OSC",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_PCYOSC",  name="NAME_PRICE_CYCLE_OSCILLATOR",  desc="DESC_PCYOSC",  menu="MENU_CUSTOM",  helpLink="http://www.motivewave.com/studies/price_cycle_oscillator.htm",  signals=true,  overlay=false,  studyOverlay=true)public class PriceCycleOscillator extends Study{  enum Values { CL, AVG, UP, DOWN, PCO }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT1"), Enums.BarInput.CLOSE));    inputs.addRow(new InputDescriptor(Inputs.INPUT2, get("INPUT2"), Enums.BarInput.LOW));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("AVERAGE_METHOD"), Enums.MAMethod.SMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("AVERAGE_PERIOD"), 22, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("ATR_PERIOD"), 22, 1, 999, 1));    var settings=tab.addGroup(get("PATH_INDICATOR"));    settings.addRow(new PathDescriptor(Inputs.PATH, get("LBL_PCYOSC"), defaults.getLineColor(), 1.0f, null, true, false, true));    settings.addRow(new IndicatorDescriptor(Inputs.IND, get("IND"), defaults.getLineColor(), null, false, true, true));    tab=sd.addTab(get("TAB_DISPLAY"));    var guides=tab.addGroup(get("GUIDES"));    var topDesc=new GuideDescriptor(Inputs.TOP_GUIDE, get("TOP_GUIDE"), 70, 0, 999.1, .1, true);    topDesc.setLineColor(defaults.getRed());    guides.addRow(topDesc);    var mg=new GuideDescriptor(Inputs.MIDDLE_GUIDE, get("MIDDLE_GUIDE"), 50, 0, 999.1, .1, true);    mg.setDash(new float[] { 3, 3 });    guides.addRow(mg);    var bottomDesc=new GuideDescriptor(Inputs.BOTTOM_GUIDE, get("BOTTOM_GUIDE"), 30, 0, 999.1, .1, true);    bottomDesc.setLineColor(defaults.getGreen());    guides.addRow(bottomDesc);    settings=tab.addGroup(get("SHADING"));    settings.addRow(new ShadeDescriptor(Inputs.TOP_FILL, get("TOP_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.ABOVE, defaults.getTopFillColor(), true, true));    settings.addRow(new ShadeDescriptor(Inputs.BOTTOM_FILL, get("BOTTOM_FILL"), Inputs.MIDDLE_GUIDE, Inputs.PATH,        Enums.ShadeType.BELOW, defaults.getBottomFillColor(), true, true));    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.INPUT2, Inputs.METHOD, Inputs.METHOD2, Inputs.PERIOD, Inputs.PERIOD2);    desc.exportValue(new ValueDescriptor(Values.PCO, get("LBL_PCYOSC"), new String[] { Inputs.INPUT, Inputs.INPUT2,        Inputs.METHOD, Inputs.METHOD2, Inputs.PERIOD, Inputs.PERIOD2 }));    desc.declarePath(Values.PCO, Inputs.PATH);    desc.declareIndicator(Values.PCO, Inputs.IND);    desc.setRangeKeys(Values.PCO);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars(p1 + p2);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int avPeriod=getSettings().getInteger(Inputs.PERIOD);    int atrPeriod=getSettings().getInteger(Inputs.PERIOD2);    Object key1=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    Object key2=getSettings().getInput(Inputs.INPUT2, Enums.BarInput.LOW);    Enums.MAMethod method=getSettings().getMAMethod(Inputs.METHOD);    DataSeries series=ctx.getDataSeries();    double price1=series.getDouble(index, key1, 0);    double price2=series.getDouble(index, key2, 0);    double cl=price1 - price2;    series.setDouble(index, Values.CL, cl);    if (index < avPeriod) return;    Double avg=series.ma(method, index, avPeriod, Values.CL);    if (avg == null) return;    series.setDouble(index, Values.AVG, avg);    if (index < Math.max(avPeriod, atrPeriod)) return;    // ATR    double atr=series.sma(index, atrPeriod, Enums.BarInput.TR);    double pco=(avg / atr) * 100.0;    series.setDouble(index, Values.PCO, pco);    series.setComplete(index);  }}