package com.motivewave.platform.study.custom;import java.awt.Color;import com.motivewave.platform.sdk.common.DataContext;import com.motivewave.platform.sdk.common.DataSeries;import com.motivewave.platform.sdk.common.Defaults;import com.motivewave.platform.sdk.common.Enums;import com.motivewave.platform.sdk.common.Inputs;import com.motivewave.platform.sdk.common.X11Colors;import com.motivewave.platform.sdk.common.desc.BooleanDescriptor;import com.motivewave.platform.sdk.common.desc.ColorDescriptor;import com.motivewave.platform.sdk.common.desc.DoubleDescriptor;import com.motivewave.platform.sdk.common.desc.InputDescriptor;import com.motivewave.platform.sdk.common.desc.IntegerDescriptor;import com.motivewave.platform.sdk.common.desc.MAMethodDescriptor;import com.motivewave.platform.sdk.common.desc.PathDescriptor;import com.motivewave.platform.sdk.study.Study;import com.motivewave.platform.sdk.study.StudyHeader;/** LBR Paint Bar 183 */@StudyHeader(  namespace="com.motivewave",  id="ID_LBR_PAINT_BAR",  rb="com.motivewave.platform.study.nls.strings2",  label="LBL_LBRPB",  name="NAME_LBR_PAINT_BARS",  desc="DESC_LBRPB",  helpLink="http://www.motivewave.com/studies/lbr_paint_bars.htm",  signals=false,  overlay=true,  studyOverlay=true)public class LBRPaintBar extends Study{  final static String FACTOR="Factor", BULL="Bull", BEAR="Bear", PAINT_BARS="PaintBars", SHOW_VOLT="ShowVolt";  final static String[] AND_OR= { "And", "Or" };  enum Values { ATR, BAND1, BAND2 }  @Override  public void initialize(Defaults defaults)  {    var sd=createSD();    var tab=sd.addTab(get("TAB_GENERAL"));    var inputs=tab.addGroup(get("INPUTS"));    inputs.addRow(new InputDescriptor(Inputs.INPUT, get("INPUT"), Enums.BarInput.CLOSE));    inputs.addRow(new MAMethodDescriptor(Inputs.METHOD, get("METHOD"), Enums.MAMethod.SMA));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD, get("ATR_PERIOD"), 9, 1, 999, 1));    inputs.addRow(new IntegerDescriptor(Inputs.PERIOD2, get("HIGH_LOW_PERIOD"), 16, 1, 999, 1));    inputs.addRow(new DoubleDescriptor(FACTOR, get("FACTOR"), 2.5, .1, 999.1, .1));    inputs.addRow(new BooleanDescriptor(PAINT_BARS, get("PAINT_BARS"), true));    inputs.addRow(new BooleanDescriptor(SHOW_VOLT, get("SHOW_VOLATILITY_LINES"), true));    inputs.addRow(new InputDescriptor(Inputs.INPUT2, get("AND_OR"), AND_OR, AND_OR[0]));    tab=sd.addTab(get("TAB_DISPLAY"));    var paths=tab.addGroup(get("PATHS"));    paths.addRow(new PathDescriptor(Inputs.PATH, get("BAND1"), defaults.getGreen(), 1.0f, null, true, false, true));    paths.addRow(new PathDescriptor(Inputs.PATH2, get("BAND2"), defaults.getRed(), 1.0f, null, true, false, true));    var settings=tab.addGroup(get("COLORS"));    settings.addRow(new ColorDescriptor(BULL, get("BULLISH"), X11Colors.MEDIUM_SPRING_GREEN));     settings.addRow(new ColorDescriptor(BEAR, get("BEARISH"), X11Colors.INDIAN_RED));    var desc=createRD();    desc.setLabelSettings(Inputs.INPUT, Inputs.METHOD, Inputs.PERIOD, Inputs.PERIOD2, FACTOR,         PAINT_BARS, SHOW_VOLT, Inputs.INPUT2);    desc.declarePath(Values.BAND1, Inputs.PATH);    desc.declarePath(Values.BAND2, Inputs.PATH2);  }  @Override  public void onLoad(Defaults defaults)  {    int p1=getSettings().getInteger(Inputs.PERIOD);    int p2=getSettings().getInteger(Inputs.PERIOD2);    setMinBars((p1 * 2) + p2);  }  @Override  protected void calculate(int index, DataContext ctx)  {    int atrPeriod=getSettings().getInteger(Inputs.PERIOD);    if (index < atrPeriod) return;    int hlPeriod=getSettings().getInteger(Inputs.PERIOD2);    Object key=getSettings().getInput(Inputs.INPUT, Enums.BarInput.CLOSE);    Enums.MAMethod method=getSettings().getMAMethod(Inputs.METHOD);    boolean pb=getSettings().getBoolean(PAINT_BARS);    boolean sv=getSettings().getBoolean(SHOW_VOLT);    String andOr = (String) getSettings().getInput(Inputs.INPUT2, AND_OR[0]);    double factor=getSettings().getDouble(FACTOR);    Color bullC=getSettings().getColor(BULL);    Color bearC=getSettings().getColor(BEAR);    DataSeries series=ctx.getDataSeries();    double atr=series.atr(index, atrPeriod);    series.setDouble(index, Values.ATR, atr);    if (index < atrPeriod * 2) return;    Double ma = series.ma(method, index, atrPeriod, Values.ATR);    if (ma == null) return;    double aatr=factor * ma;    if (index < (atrPeriod * 2) + hlPeriod) return;    double band1=series.lowest(index, hlPeriod, Enums.BarInput.LOW) + aatr;    double band2=series.highest(index, hlPeriod, Enums.BarInput.HIGH) - aatr;    if (sv) {      series.setDouble(index, Values.BAND1, band1);      series.setDouble(index, Values.BAND2, band2);    }    double price=series.getDouble(index, key, 0);    boolean upperVolt = false, lowerVolt = false;        if (andOr.equals("And")){      upperVolt=price > band1 && price > band2;      lowerVolt=price < band1 && price < band2;    }    if (andOr.equals("Or")){      upperVolt=price >= band1 || price >= band2;      lowerVolt=price <= band1 || price <= band2;    }    if (upperVolt && pb) {      series.setPriceBarColor(index, bullC);    }    if (lowerVolt && pb) {      series.setPriceBarColor(index, bearC);    }    series.setComplete(index);  }}